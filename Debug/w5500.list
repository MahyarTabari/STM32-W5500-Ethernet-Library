
w5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004794  08004794  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800479c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200000ac  08004848  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004848  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd26  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002195  00000000  00000000  0002be45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  0002dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085e  00000000  00000000  0002eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001758c  00000000  00000000  0002f33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c432  00000000  00000000  000468ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf1f  00000000  00000000  00052cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003464  00000000  00000000  000dec1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e2080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800446c 	.word	0x0800446c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	0800446c 	.word	0x0800446c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f001 fc63 	bl	8001e4c <HAL_Init>

  // don't buffer the output of printf
  setbuf(stdout, NULL);
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0x64>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 f84c 	bl	800362c <setbuf>

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f852 	bl	800063c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f918 	bl	80007cc <MX_GPIO_Init>
  MX_SPI1_Init();
 800059c:	f000 f8ae 	bl	80006fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f8ea 	bl	8000778 <MX_USART1_UART_Init>

  // initialize w5500
  w5500_init();
 80005a4:	f000 fe26 	bl	80011f4 <w5500_init>

  // static host configuration
  ctlnetwork(CN_SET_NETINFO, (void*) &net_info);
 80005a8:	490e      	ldr	r1, [pc, #56]	; (80005e4 <main+0x68>)
 80005aa:	2000      	movs	r0, #0
 80005ac:	f001 f83c 	bl	8001628 <ctlnetwork>

  check_cable_presence();
 80005b0:	f000 fc36 	bl	8000e20 <check_cable_presence>

  check_phy_status();
 80005b4:	f000 fc6a 	bl	8000e8c <check_phy_status>

  print_current_host_configuration();
 80005b8:	f000 fd08 	bl	8000fcc <print_current_host_configuration>

  /* Infinite loop */
  while (1)
  {
	  // test printf
	  for (int i = 0; i < 100; i++)
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	e00a      	b.n	80005d8 <main+0x5c>
	  {
		  printf("%i: Hello World!\r\n", i);
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <main+0x6c>)
 80005c6:	f002 ffc3 	bl	8003550 <iprintf>
		  HAL_Delay(1500);
 80005ca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005ce:	f001 fcaf 	bl	8001f30 <HAL_Delay>
	  for (int i = 0; i < 100; i++)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b63      	cmp	r3, #99	; 0x63
 80005dc:	ddf1      	ble.n	80005c2 <main+0x46>
 80005de:	e7ed      	b.n	80005bc <main+0x40>
 80005e0:	200000a8 	.word	0x200000a8
 80005e4:	20000000 	.word	0x20000000
 80005e8:	08004484 	.word	0x08004484

080005ec <write_data_uart1>:
/**
  * @brief send 1 byte of data to uart1
  * @retval None
  */
void write_data_uart1(const char data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	// busy wait until transmit buffer becomes empty
	while((huart1.Instance->SR & UART_FLAG_TXE) != UART_FLAG_TXE);
 80005f6:	bf00      	nop
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <write_data_uart1+0x30>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	2b80      	cmp	r3, #128	; 0x80
 8000604:	d1f8      	bne.n	80005f8 <write_data_uart1+0xc>

	huart1.Instance->DR = data;
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <write_data_uart1+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	605a      	str	r2, [r3, #4]

}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000120 	.word	0x20000120

08000620 <__io_putchar>:

// overwrite __io_putchar function to redirect printf to UART1
int __io_putchar(int ch)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	write_data_uart1(ch);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffdd 	bl	80005ec <write_data_uart1>

	return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f97c 	bl	8003948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <SystemClock_Config+0xb8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SystemClock_Config+0xb8>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <SystemClock_Config+0xb8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <SystemClock_Config+0xbc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <SystemClock_Config+0xbc>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <SystemClock_Config+0xbc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fee5 	bl	8002480 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006bc:	f000 f8b8 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 f948 	bl	8002970 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006e6:	f000 f8a3 	bl	8000830 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_SPI1_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_SPI1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_SPI1_Init+0x74>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_SPI1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_SPI1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_SPI1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_SPI1_Init+0x74>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_SPI1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_SPI1_Init+0x74>)
 8000748:	2207      	movs	r2, #7
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <MX_SPI1_Init+0x74>)
 800074e:	f002 faef 	bl	8002d30 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f86a 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <MX_SPI1_Init+0x74>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b03      	ldr	r3, [pc, #12]	; (8000770 <MX_SPI1_Init+0x74>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800076a:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000c8 	.word	0x200000c8
 8000774:	40013000 	.word	0x40013000

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART1_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007b0:	f002 fb47 	bl	8002e42 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f839 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000120 	.word	0x20000120
 80007c8:	40011000 	.word	0x40011000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_GPIO_Init+0x5c>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_GPIO_Init+0x5c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_GPIO_Init+0x5c>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|SCS_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2103      	movs	r1, #3
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <MX_GPIO_Init+0x60>)
 8000802:	f001 fe23 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RESET_Pin SCS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|SCS_Pin;
 8000806:	2303      	movs	r3, #3
 8000808:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0x60>)
 800081c:	f001 fc92 	bl	8002144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_SPI_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008e6:	23e0      	movs	r3, #224	; 0xe0
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f6:	2305      	movs	r3, #5
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_SPI_MspInit+0x8c>)
 8000902:	f001 fc1f 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40013000 	.word	0x40013000
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12c      	bne.n	8000998 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000988:	2307      	movs	r3, #7
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 8000994:	f001 fbd6 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f001 fa7a 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e00a      	b.n	8000a28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a12:	f3af 8000 	nop.w
 8000a16:	4601      	mov	r1, r0
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	b2ca      	uxtb	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbf0      	blt.n	8000a12 <_read+0x12>
  }

  return len;
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e009      	b.n	8000a60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fde3 	bl	8000620 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbf1      	blt.n	8000a4c <_write+0x12>
  }
  return len;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_close>:

int _close(int file)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_isatty>:

int _isatty(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f002 ff6a 	bl	80039e4 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20010000 	.word	0x20010000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	20000168 	.word	0x20000168
 8000b44:	200002c8 	.word	0x200002c8

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <WIZCHIP_READ+0x24>
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d114      	bne.n	8000bba <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	0c12      	lsrs	r2, r2, #16
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	0a12      	lsrs	r2, r2, #8
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	4610      	mov	r0, r2
 8000baa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	4798      	blx	r3
 8000bb8:	e011      	b.n	8000bde <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	0c1b      	lsrs	r3, r3, #16
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f107 020c 	add.w	r2, r7, #12
 8000bd8:	2103      	movs	r1, #3
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4798      	blx	r3
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <WIZCHIP_READ+0x94>)
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	4798      	blx	r3
   return ret;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000001c 	.word	0x2000001c

08000c04 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d119      	bne.n	8000c60 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c2e:	6a1b      	ldr	r3, [r3, #32]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	0c12      	lsrs	r2, r2, #16
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	4610      	mov	r0, r2
 8000c38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	0a12      	lsrs	r2, r2, #8
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	4610      	mov	r0, r2
 8000c46:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	4610      	mov	r0, r2
 8000c52:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	78fa      	ldrb	r2, [r7, #3]
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4798      	blx	r3
 8000c5e:	e013      	b.n	8000c88 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7e:	f107 020c 	add.w	r2, r7, #12
 8000c82:	2104      	movs	r1, #4
 8000c84:	4610      	mov	r0, r2
 8000c86:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000c8e:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <WIZCHIP_WRITE+0x98>)
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	4798      	blx	r3
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000001c 	.word	0x2000001c

08000ca0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	4613      	mov	r3, r2
 8000cac:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000cb4:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <WIZCHIP_READ_BUF+0x2a>
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d126      	bne.n	8000d18 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000ccc:	6a1b      	ldr	r3, [r3, #32]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	0c12      	lsrs	r2, r2, #16
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000cd8:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	0a12      	lsrs	r2, r2, #8
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	82fb      	strh	r3, [r7, #22]
 8000cf6:	e00a      	b.n	8000d0e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	8afa      	ldrh	r2, [r7, #22]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	188c      	adds	r4, r1, r2
 8000d02:	4798      	blx	r3
 8000d04:	4603      	mov	r3, r0
 8000d06:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000d08:	8afb      	ldrh	r3, [r7, #22]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	82fb      	strh	r3, [r7, #22]
 8000d0e:	8afa      	ldrh	r2, [r7, #22]
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d3f0      	bcc.n	8000cf8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d16:	e017      	b.n	8000d48 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	0c1b      	lsrs	r3, r3, #16
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d32:	f107 0210 	add.w	r2, r7, #16
 8000d36:	2103      	movs	r1, #3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d40:	88fa      	ldrh	r2, [r7, #6]
 8000d42:	4611      	mov	r1, r2
 8000d44:	68b8      	ldr	r0, [r7, #8]
 8000d46:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d4e:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <WIZCHIP_READ_BUF+0xbc>)
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	4798      	blx	r3
}
 8000d54:	bf00      	nop
 8000d56:	371c      	adds	r7, #28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	2000001c 	.word	0x2000001c

08000d60 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d126      	bne.n	8000dd8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	0c12      	lsrs	r2, r2, #16
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	4610      	mov	r0, r2
 8000d96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	0a12      	lsrs	r2, r2, #8
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	4610      	mov	r0, r2
 8000da4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	4610      	mov	r0, r2
 8000db0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	82fb      	strh	r3, [r7, #22]
 8000db6:	e00a      	b.n	8000dce <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	8afa      	ldrh	r2, [r7, #22]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	440a      	add	r2, r1
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000dc8:	8afb      	ldrh	r3, [r7, #22]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	82fb      	strh	r3, [r7, #22]
 8000dce:	8afa      	ldrh	r2, [r7, #22]
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3f0      	bcc.n	8000db8 <WIZCHIP_WRITE_BUF+0x58>
 8000dd6:	e017      	b.n	8000e08 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	0c1b      	lsrs	r3, r3, #16
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	f107 0210 	add.w	r2, r7, #16
 8000df6:	2103      	movs	r1, #3
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e00:	88fa      	ldrh	r2, [r7, #6]
 8000e02:	4611      	mov	r1, r2
 8000e04:	68b8      	ldr	r0, [r7, #8]
 8000e06:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000e0e:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	4798      	blx	r3
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000001c 	.word	0x2000001c

08000e20 <check_cable_presence>:
 *
 * This function continuously checks the status of the PHY link until the Ethernet cable is connected.
 *
 * @return void
 */
void check_cable_presence() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
    uint8_t phy_status;
    int error_status;

    printf("\r\nChecking ethernet cable presence ...\r\n");
 8000e26:	4815      	ldr	r0, [pc, #84]	; (8000e7c <check_cable_presence+0x5c>)
 8000e28:	f002 fbf8 	bl	800361c <puts>

    do {
        // Get the PHY link status
        error_status = ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status);
 8000e2c:	1cfb      	adds	r3, r7, #3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	200f      	movs	r0, #15
 8000e32:	f000 fb17 	bl	8001464 <ctlwizchip>
 8000e36:	4603      	mov	r3, r0
 8000e38:	607b      	str	r3, [r7, #4]

        if (error_status == -1) {
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e40:	d103      	bne.n	8000e4a <check_cable_presence+0x2a>
            printf("Failed to get PHY link info.\r\nTrying again...\r\n");
 8000e42:	480f      	ldr	r0, [pc, #60]	; (8000e80 <check_cable_presence+0x60>)
 8000e44:	f002 fbea 	bl	800361c <puts>
            continue;
 8000e48:	e009      	b.n	8000e5e <check_cable_presence+0x3e>
        }

        // Check if the cable is not connected
        if (phy_status == PHY_LINK_OFF) {
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d106      	bne.n	8000e5e <check_cable_presence+0x3e>
            printf("Cable is not connected.\r\n");
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <check_cable_presence+0x64>)
 8000e52:	f002 fbe3 	bl	800361c <puts>
            HAL_Delay(1500);
 8000e56:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e5a:	f001 f869 	bl	8001f30 <HAL_Delay>
        }
    } while (error_status == -1 || phy_status == PHY_LINK_OFF);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e64:	d0e2      	beq.n	8000e2c <check_cable_presence+0xc>
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0df      	beq.n	8000e2c <check_cable_presence+0xc>

    printf("Cable is connected.\r\n");
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <check_cable_presence+0x68>)
 8000e6e:	f002 fbd5 	bl	800361c <puts>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08004498 	.word	0x08004498
 8000e80:	080044c0 	.word	0x080044c0
 8000e84:	080044f0 	.word	0x080044f0
 8000e88:	0800450c 	.word	0x0800450c

08000e8c <check_phy_status>:
 *
 * This function retrieves and prints the PHY link status and configuration, including mode, speed, and duplex settings.
 *
 * @return void
 */
void check_phy_status() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
    uint8_t phy_status;

    // Get the PHY link status
    if (ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status) == -1) {
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	4619      	mov	r1, r3
 8000e96:	200f      	movs	r0, #15
 8000e98:	f000 fae4 	bl	8001464 <ctlwizchip>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ea2:	d103      	bne.n	8000eac <check_phy_status+0x20>
        printf("Failed to get PHY link status.\r\n");
 8000ea4:	4838      	ldr	r0, [pc, #224]	; (8000f88 <check_phy_status+0xfc>)
 8000ea6:	f002 fbb9 	bl	800361c <puts>
        return;
 8000eaa:	e06a      	b.n	8000f82 <check_phy_status+0xf6>
    }

    // Print the PHY link status
    if (phy_status == PHY_LINK_ON) {
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d103      	bne.n	8000eba <check_phy_status+0x2e>
        printf("PHY Link is ON.\r\n");
 8000eb2:	4836      	ldr	r0, [pc, #216]	; (8000f8c <check_phy_status+0x100>)
 8000eb4:	f002 fbb2 	bl	800361c <puts>
 8000eb8:	e002      	b.n	8000ec0 <check_phy_status+0x34>
    } else {
        printf("PHY Link is OFF.\r\n");
 8000eba:	4835      	ldr	r0, [pc, #212]	; (8000f90 <check_phy_status+0x104>)
 8000ebc:	f002 fbae 	bl	800361c <puts>
    }

    // Get the PHY configuration (optional, for more detailed information)
    wiz_PhyConf phy_conf;
    if (ctlwizchip(CW_GET_PHYCONF, (void*)&phy_conf) == -1) {
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	200b      	movs	r0, #11
 8000ec6:	f000 facd 	bl	8001464 <ctlwizchip>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed0:	d103      	bne.n	8000eda <check_phy_status+0x4e>
        printf("Failed to get PHY configuration.\r\n");
 8000ed2:	4830      	ldr	r0, [pc, #192]	; (8000f94 <check_phy_status+0x108>)
 8000ed4:	f002 fba2 	bl	800361c <puts>
        return;
 8000ed8:	e053      	b.n	8000f82 <check_phy_status+0xf6>
    }

    // Print the PHY configuration
    printf("PHY Mode: ");
 8000eda:	482f      	ldr	r0, [pc, #188]	; (8000f98 <check_phy_status+0x10c>)
 8000edc:	f002 fb38 	bl	8003550 <iprintf>
    switch (phy_conf.by) {
 8000ee0:	783b      	ldrb	r3, [r7, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <check_phy_status+0x60>
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d004      	beq.n	8000ef4 <check_phy_status+0x68>
 8000eea:	e007      	b.n	8000efc <check_phy_status+0x70>
        case PHY_CONFBY_HW:
            printf("Configured by hardware.\r\n");
 8000eec:	482b      	ldr	r0, [pc, #172]	; (8000f9c <check_phy_status+0x110>)
 8000eee:	f002 fb95 	bl	800361c <puts>
            break;
 8000ef2:	e007      	b.n	8000f04 <check_phy_status+0x78>
        case PHY_CONFBY_SW:
            printf("Configured by software.\r\n");
 8000ef4:	482a      	ldr	r0, [pc, #168]	; (8000fa0 <check_phy_status+0x114>)
 8000ef6:	f002 fb91 	bl	800361c <puts>
            break;
 8000efa:	e003      	b.n	8000f04 <check_phy_status+0x78>
        default:
            printf("Unknown.\r\n");
 8000efc:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <check_phy_status+0x118>)
 8000efe:	f002 fb8d 	bl	800361c <puts>
            break;
 8000f02:	bf00      	nop
    }

    printf("PHY Speed: ");
 8000f04:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <check_phy_status+0x11c>)
 8000f06:	f002 fb23 	bl	8003550 <iprintf>
    switch (phy_conf.speed) {
 8000f0a:	78bb      	ldrb	r3, [r7, #2]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <check_phy_status+0x8a>
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d004      	beq.n	8000f1e <check_phy_status+0x92>
 8000f14:	e007      	b.n	8000f26 <check_phy_status+0x9a>
        case PHY_SPEED_10:
            printf("10 Mbps.\r\n");
 8000f16:	4825      	ldr	r0, [pc, #148]	; (8000fac <check_phy_status+0x120>)
 8000f18:	f002 fb80 	bl	800361c <puts>
            break;
 8000f1c:	e007      	b.n	8000f2e <check_phy_status+0xa2>
        case PHY_SPEED_100:
            printf("100 Mbps.\r\n");
 8000f1e:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <check_phy_status+0x124>)
 8000f20:	f002 fb7c 	bl	800361c <puts>
            break;
 8000f24:	e003      	b.n	8000f2e <check_phy_status+0xa2>
        default:
            printf("Unknown.\r\n");
 8000f26:	481f      	ldr	r0, [pc, #124]	; (8000fa4 <check_phy_status+0x118>)
 8000f28:	f002 fb78 	bl	800361c <puts>
            break;
 8000f2c:	bf00      	nop
    }

    printf("PHY Duplex: ");
 8000f2e:	4821      	ldr	r0, [pc, #132]	; (8000fb4 <check_phy_status+0x128>)
 8000f30:	f002 fb0e 	bl	8003550 <iprintf>
    switch (phy_conf.duplex) {
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <check_phy_status+0xb4>
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d004      	beq.n	8000f48 <check_phy_status+0xbc>
 8000f3e:	e007      	b.n	8000f50 <check_phy_status+0xc4>
        case PHY_DUPLEX_HALF:
            printf("Half duplex.\r\n");
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <check_phy_status+0x12c>)
 8000f42:	f002 fb6b 	bl	800361c <puts>
            break;
 8000f46:	e007      	b.n	8000f58 <check_phy_status+0xcc>
        case PHY_DUPLEX_FULL:
            printf("Full duplex.\r\n");
 8000f48:	481c      	ldr	r0, [pc, #112]	; (8000fbc <check_phy_status+0x130>)
 8000f4a:	f002 fb67 	bl	800361c <puts>
            break;
 8000f4e:	e003      	b.n	8000f58 <check_phy_status+0xcc>
        default:
            printf("Unknown.\r\n");
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <check_phy_status+0x118>)
 8000f52:	f002 fb63 	bl	800361c <puts>
            break;
 8000f56:	bf00      	nop
    }

    // Print the PHY negotiation mode
    printf("PHY Negotiation Mode: ");
 8000f58:	4819      	ldr	r0, [pc, #100]	; (8000fc0 <check_phy_status+0x134>)
 8000f5a:	f002 faf9 	bl	8003550 <iprintf>
    switch (phy_conf.mode) {
 8000f5e:	787b      	ldrb	r3, [r7, #1]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <check_phy_status+0xde>
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d004      	beq.n	8000f72 <check_phy_status+0xe6>
 8000f68:	e007      	b.n	8000f7a <check_phy_status+0xee>
        case PHY_MODE_MANUAL:
            printf("Manual.\r\n");
 8000f6a:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <check_phy_status+0x138>)
 8000f6c:	f002 fb56 	bl	800361c <puts>
            break;
 8000f70:	e007      	b.n	8000f82 <check_phy_status+0xf6>
        case PHY_MODE_AUTONEGO:
            printf("Auto-negotiation.\r\n");
 8000f72:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <check_phy_status+0x13c>)
 8000f74:	f002 fb52 	bl	800361c <puts>
            break;
 8000f78:	e003      	b.n	8000f82 <check_phy_status+0xf6>
        default:
            printf("Unknown.\r\n");
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <check_phy_status+0x118>)
 8000f7c:	f002 fb4e 	bl	800361c <puts>
            break;
 8000f80:	bf00      	nop
    }
}
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08004524 	.word	0x08004524
 8000f8c:	08004544 	.word	0x08004544
 8000f90:	08004558 	.word	0x08004558
 8000f94:	0800456c 	.word	0x0800456c
 8000f98:	08004590 	.word	0x08004590
 8000f9c:	0800459c 	.word	0x0800459c
 8000fa0:	080045b8 	.word	0x080045b8
 8000fa4:	080045d4 	.word	0x080045d4
 8000fa8:	080045e0 	.word	0x080045e0
 8000fac:	080045ec 	.word	0x080045ec
 8000fb0:	080045f8 	.word	0x080045f8
 8000fb4:	08004604 	.word	0x08004604
 8000fb8:	08004614 	.word	0x08004614
 8000fbc:	08004624 	.word	0x08004624
 8000fc0:	08004634 	.word	0x08004634
 8000fc4:	0800464c 	.word	0x0800464c
 8000fc8:	08004658 	.word	0x08004658

08000fcc <print_current_host_configuration>:
 * This function retrieves the current network configuration from the WIZnet chip
 * and prints the MAC address, IP address, subnet mask, gateway, and DNS server.
 *
 * @return void
 */
void print_current_host_configuration() {
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af04      	add	r7, sp, #16
    wiz_NetInfo current_net_info;

    // Retrieve the current network information from the WIZnet chip
    ctlnetwork(CN_GET_NETINFO, (void*)&current_net_info);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 fb26 	bl	8001628 <ctlnetwork>

    // Print the MAC address
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 8000fdc:	783b      	ldrb	r3, [r7, #0]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000fde:	4618      	mov	r0, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 8000fe0:	787b      	ldrb	r3, [r7, #1]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000fe2:	461c      	mov	r4, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 8000fe4:	78bb      	ldrb	r3, [r7, #2]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000fe6:	461d      	mov	r5, r3
           current_net_info.mac[3], current_net_info.mac[4], current_net_info.mac[5]);
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	793a      	ldrb	r2, [r7, #4]
 8000fec:	7979      	ldrb	r1, [r7, #5]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000fee:	9102      	str	r1, [sp, #8]
 8000ff0:	9201      	str	r2, [sp, #4]
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	462b      	mov	r3, r5
 8000ff6:	4622      	mov	r2, r4
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	481b      	ldr	r0, [pc, #108]	; (8001068 <print_current_host_configuration+0x9c>)
 8000ffc:	f002 faa8 	bl	8003550 <iprintf>

    // Print the IP address
    printf("IP: %d.%d.%d.%d\r\n",
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 8001000:	79bb      	ldrb	r3, [r7, #6]
    printf("IP: %d.%d.%d.%d\r\n",
 8001002:	4619      	mov	r1, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 8001004:	79fb      	ldrb	r3, [r7, #7]
    printf("IP: %d.%d.%d.%d\r\n",
 8001006:	461a      	mov	r2, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 8001008:	7a3b      	ldrb	r3, [r7, #8]
    printf("IP: %d.%d.%d.%d\r\n",
 800100a:	4618      	mov	r0, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 800100c:	7a7b      	ldrb	r3, [r7, #9]
    printf("IP: %d.%d.%d.%d\r\n",
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4603      	mov	r3, r0
 8001012:	4816      	ldr	r0, [pc, #88]	; (800106c <print_current_host_configuration+0xa0>)
 8001014:	f002 fa9c 	bl	8003550 <iprintf>

    // Print the subnet mask
    printf("SN: %d.%d.%d.%d\r\n",
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 8001018:	7abb      	ldrb	r3, [r7, #10]
    printf("SN: %d.%d.%d.%d\r\n",
 800101a:	4619      	mov	r1, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 800101c:	7afb      	ldrb	r3, [r7, #11]
    printf("SN: %d.%d.%d.%d\r\n",
 800101e:	461a      	mov	r2, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 8001020:	7b3b      	ldrb	r3, [r7, #12]
    printf("SN: %d.%d.%d.%d\r\n",
 8001022:	4618      	mov	r0, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 8001024:	7b7b      	ldrb	r3, [r7, #13]
    printf("SN: %d.%d.%d.%d\r\n",
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	4603      	mov	r3, r0
 800102a:	4811      	ldr	r0, [pc, #68]	; (8001070 <print_current_host_configuration+0xa4>)
 800102c:	f002 fa90 	bl	8003550 <iprintf>

    // Print the gateway address
    printf("GW: %d.%d.%d.%d\r\n",
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 8001030:	7bbb      	ldrb	r3, [r7, #14]
    printf("GW: %d.%d.%d.%d\r\n",
 8001032:	4619      	mov	r1, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 8001034:	7bfb      	ldrb	r3, [r7, #15]
    printf("GW: %d.%d.%d.%d\r\n",
 8001036:	461a      	mov	r2, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 8001038:	7c3b      	ldrb	r3, [r7, #16]
    printf("GW: %d.%d.%d.%d\r\n",
 800103a:	4618      	mov	r0, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 800103c:	7c7b      	ldrb	r3, [r7, #17]
    printf("GW: %d.%d.%d.%d\r\n",
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	4603      	mov	r3, r0
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <print_current_host_configuration+0xa8>)
 8001044:	f002 fa84 	bl	8003550 <iprintf>

    // Print the DNS server address
    printf("DNS: %d.%d.%d.%d\r\n",
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8001048:	7cbb      	ldrb	r3, [r7, #18]
    printf("DNS: %d.%d.%d.%d\r\n",
 800104a:	4619      	mov	r1, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 800104c:	7cfb      	ldrb	r3, [r7, #19]
    printf("DNS: %d.%d.%d.%d\r\n",
 800104e:	461a      	mov	r2, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8001050:	7d3b      	ldrb	r3, [r7, #20]
    printf("DNS: %d.%d.%d.%d\r\n",
 8001052:	4618      	mov	r0, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8001054:	7d7b      	ldrb	r3, [r7, #21]
    printf("DNS: %d.%d.%d.%d\r\n",
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	4603      	mov	r3, r0
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <print_current_host_configuration+0xac>)
 800105c:	f002 fa78 	bl	8003550 <iprintf>
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bdb0      	pop	{r4, r5, r7, pc}
 8001068:	0800466c 	.word	0x0800466c
 800106c:	08004694 	.word	0x08004694
 8001070:	080046a8 	.word	0x080046a8
 8001074:	080046bc 	.word	0x080046bc
 8001078:	080046d0 	.word	0x080046d0

0800107c <SPIReadWrite>:
 *@brief Helper driver to send and receive one byte through SPI
 *@param data   : 1 byte data to transmit
 *@return		: 1 byte data which is received
 */
uint8_t SPIReadWrite(uint8_t data)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	 * the SPI_CR2 register is set.
	 */

	// check TXE(tx empty buffer) bit of the status register(SR),
	// and wait until the tx buffer becomes empty
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001086:	bf00      	nop
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <SPIReadWrite+0x4c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b02      	cmp	r3, #2
 8001094:	d1f8      	bne.n	8001088 <SPIReadWrite+0xc>



	// write the data to the data register to be sent
	*(__IO uint8_t*)&hspi1.Instance->DR = data;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <SPIReadWrite+0x4c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	330c      	adds	r3, #12
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	701a      	strb	r2, [r3, #0]
	 *	 * and the RXNE flag is set
	 */

	// wait until the data from the slave is received,
	// and the RXNE flag is set
	while((hspi1.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80010a0:	bf00      	nop
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <SPIReadWrite+0x4c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d1f8      	bne.n	80010a2 <SPIReadWrite+0x26>


	// return the received byte
	return 	(*(__IO uint8_t*)&hspi1.Instance->DR);
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SPIReadWrite+0x4c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	330c      	adds	r3, #12
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200000c8 	.word	0x200000c8

080010cc <wizchip_deselect>:

/**
 *@brief Helper driver to deselect wizchip
 */
void wizchip_deselect()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2102      	movs	r1, #2
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <wizchip_deselect+0x14>)
 80010d6:	f001 f9b9 	bl	800244c <HAL_GPIO_WritePin>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40020000 	.word	0x40020000

080010e4 <wizchip_select>:

/**
 *@brief Helper driver to select wizchip
 */
void wizchip_select()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2102      	movs	r1, #2
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <wizchip_select+0x14>)
 80010ee:	f001 f9ad 	bl	800244c <HAL_GPIO_WritePin>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40020000 	.word	0x40020000

080010fc <wizchip_read>:
/**
 *@brief Helper driver to read one byte through SPI
 *@return		: 1 byte data which is received
 */
uint8_t wizchip_read()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	// pass a dummy variable and read from the spi
	return SPIReadWrite(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff ffbb 	bl	800107c <SPIReadWrite>
 8001106:	4603      	mov	r3, r0
}
 8001108:	4618      	mov	r0, r3
 800110a:	bd80      	pop	{r7, pc}

0800110c <wizchip_write>:
/**
 *@brief Helper driver to send one byte through SPI
 *@param data   : 1 byte data to transmit
 */
void wizchip_write(uint8_t data)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(data);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffaf 	bl	800107c <SPIReadWrite>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <wizchip_read_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param buff   : buffer to put the received data
 *@param len    : number of bytes to read
 */
void wizchip_read_burst(uint8_t* buff, uint16_t len)
{
 8001126:	b590      	push	{r4, r7, lr}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	e009      	b.n	800114c <wizchip_read_burst+0x26>
	{
		buff[i] = wizchip_read();
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	18d4      	adds	r4, r2, r3
 800113e:	f7ff ffdd 	bl	80010fc <wizchip_read>
 8001142:	4603      	mov	r3, r0
 8001144:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbf1      	blt.n	8001138 <wizchip_read_burst+0x12>
	}

}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}

0800115e <wizchip_write_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param data   : array containing data to be sent
 *@param len    : number of bytes to send
 */
void wizchip_write_burst(uint8_t* data, uint16_t len)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	e009      	b.n	8001184 <wizchip_write_burst+0x26>
	{
		wizchip_write(data[i]);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffc7 	bl	800110c <wizchip_write>
	for (int i = 0; i < len; i++)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3301      	adds	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbf1      	blt.n	8001170 <wizchip_write_burst+0x12>
	}
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <w5500_pins_init>:
/**
 *@brief initializer of PA0(RESET) and SCS(PA1)
 */

void w5500_pins_init()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]


	// enable GPIO clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <w5500_pins_init+0x54>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <w5500_pins_init+0x54>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6313      	str	r3, [r2, #48]	; 0x30
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <w5500_pins_init+0x54>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]

	// configuring RESET(PA0) and SCS(PA1) as outputs
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80011c8:	2303      	movs	r3, #3
 80011ca:	607b      	str	r3, [r7, #4]

	// push pull(high if 1 and low if 0)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]

	// output is NOPULL
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]

	// mark these pins fast
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d4:	2302      	movs	r3, #2
 80011d6:	613b      	str	r3, [r7, #16]


	// initialize the pins
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <w5500_pins_init+0x58>)
 80011de:	f000 ffb1 	bl	8002144 <HAL_GPIO_Init>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000

080011f4 <w5500_init>:

void w5500_init()
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
	// the available size of w5500 is 32KB
	// w5500 supports 8 independents sockets simultaneously
	// here 2KB is allocated for
	// each of the transmit and receive buffer of each socket
	uint8_t memory_for_each_socket[2][8] =
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <w5500_init+0x84>)
 80011fc:	1d3c      	adds	r4, r7, #4
 80011fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{
			{2, 2, 2, 2, 2, 2, 2, 2},		// receive buffer size
			{2, 2, 2, 2, 2, 2, 2, 2}		// transmit buffer size
	};

	uint8_t tmp = 0xFF;
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	75fb      	strb	r3, [r7, #23]


	// initialize RESET and SCS pins
	w5500_pins_init();
 8001208:	f7ff ffc6 	bl	8001198 <w5500_pins_init>

	// first deselect the chip(by setting SCS pin)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	481a      	ldr	r0, [pc, #104]	; (800127c <w5500_init+0x88>)
 8001212:	f001 f91b 	bl	800244c <HAL_GPIO_WritePin>


	// hard reset the wiznet chip by clearing RESET
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	4818      	ldr	r0, [pc, #96]	; (800127c <w5500_init+0x88>)
 800121c:	f001 f916 	bl	800244c <HAL_GPIO_WritePin>

	// busy wait for a while and keep the RESET pin 0
	while(tmp--);
 8001220:	bf00      	nop
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	75fa      	strb	r2, [r7, #23]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1fa      	bne.n	8001222 <w5500_init+0x2e>


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2101      	movs	r1, #1
 8001230:	4812      	ldr	r0, [pc, #72]	; (800127c <w5500_init+0x88>)
 8001232:	f001 f90b 	bl	800244c <HAL_GPIO_WritePin>

	// assign the helper drivers to complete the driver

	// callback functions for selecting and deselecting the chip
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001236:	4912      	ldr	r1, [pc, #72]	; (8001280 <w5500_init+0x8c>)
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <w5500_init+0x90>)
 800123a:	f000 f895 	bl	8001368 <reg_wizchip_cs_cbfunc>

	// callback functions for reading and writing bytes of data
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800123e:	4912      	ldr	r1, [pc, #72]	; (8001288 <w5500_init+0x94>)
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <w5500_init+0x98>)
 8001242:	f000 f8b7 	bl	80013b4 <reg_wizchip_spi_cbfunc>

	// callback functions for reading and writing burst of data
	reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 8001246:	4912      	ldr	r1, [pc, #72]	; (8001290 <w5500_init+0x9c>)
 8001248:	4812      	ldr	r0, [pc, #72]	; (8001294 <w5500_init+0xa0>)
 800124a:	f000 f8df 	bl	800140c <reg_wizchip_spiburst_cbfunc>



	// allocate the specified memory for each socket
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memory_for_each_socket) == -1)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4619      	mov	r1, r3
 8001252:	2001      	movs	r0, #1
 8001254:	f000 f906 	bl	8001464 <ctlwizchip>
 8001258:	4603      	mov	r3, r0
 800125a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800125e:	d103      	bne.n	8001268 <w5500_init+0x74>
	{
		printf("WIZCHIP initialization failed\r\n");
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <w5500_init+0xa4>)
 8001262:	f002 f9db 	bl	800361c <puts>
		while(1);
 8001266:	e7fe      	b.n	8001266 <w5500_init+0x72>
	}

	printf("WIZCHIP initialization done successfully\r\n");
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <w5500_init+0xa8>)
 800126a:	f002 f9d7 	bl	800361c <puts>
}
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	bf00      	nop
 8001278:	08004730 	.word	0x08004730
 800127c:	40020000 	.word	0x40020000
 8001280:	080010cd 	.word	0x080010cd
 8001284:	080010e5 	.word	0x080010e5
 8001288:	0800110d 	.word	0x0800110d
 800128c:	080010fd 	.word	0x080010fd
 8001290:	0800115f 	.word	0x0800115f
 8001294:	08001127 	.word	0x08001127
 8001298:	080046e4 	.word	0x080046e4
 800129c:	08004704 	.word	0x08004704

080012a0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	70fb      	strb	r3, [r7, #3]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
 8001314:	2300      	movs	r3, #0
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	807b      	strh	r3, [r7, #2]
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	807b      	strh	r3, [r7, #2]
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <reg_wizchip_cs_cbfunc+0x16>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <reg_wizchip_cs_cbfunc+0x40>)
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <reg_wizchip_cs_cbfunc+0x44>)
 8001382:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <reg_wizchip_cs_cbfunc+0x40>)
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <reg_wizchip_cs_cbfunc+0x48>)
 8001388:	619a      	str	r2, [r3, #24]
 800138a:	e006      	b.n	800139a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <reg_wizchip_cs_cbfunc+0x40>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <reg_wizchip_cs_cbfunc+0x40>)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	6193      	str	r3, [r2, #24]
   }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000001c 	.word	0x2000001c
 80013ac:	080012bd 	.word	0x080012bd
 80013b0:	080012cb 	.word	0x080012cb

080013b4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80013be:	bf00      	nop
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <reg_wizchip_spi_cbfunc+0x4c>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f9      	beq.n	80013c0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <reg_wizchip_spi_cbfunc+0x24>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d106      	bne.n	80013e6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <reg_wizchip_spi_cbfunc+0x4c>)
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <reg_wizchip_spi_cbfunc+0x50>)
 80013dc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <reg_wizchip_spi_cbfunc+0x4c>)
 80013e0:	4a09      	ldr	r2, [pc, #36]	; (8001408 <reg_wizchip_spi_cbfunc+0x54>)
 80013e2:	621a      	str	r2, [r3, #32]
 80013e4:	e006      	b.n	80013f4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <reg_wizchip_spi_cbfunc+0x4c>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <reg_wizchip_spi_cbfunc+0x4c>)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	6213      	str	r3, [r2, #32]
   }
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	2000001c 	.word	0x2000001c
 8001404:	08001311 	.word	0x08001311
 8001408:	08001321 	.word	0x08001321

0800140c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001416:	bf00      	nop
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f9      	beq.n	8001418 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <reg_wizchip_spiburst_cbfunc+0x24>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <reg_wizchip_spiburst_cbfunc+0x50>)
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001438:	4a09      	ldr	r2, [pc, #36]	; (8001460 <reg_wizchip_spiburst_cbfunc+0x54>)
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
 800143c:	e006      	b.n	800144c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	2000001c 	.word	0x2000001c
 800145c:	08001337 	.word	0x08001337
 8001460:	0800134f 	.word	0x0800134f

08001464 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	f200 80c7 	bhi.w	8001612 <ctlwizchip+0x1ae>
 8001484:	a201      	add	r2, pc, #4	; (adr r2, 800148c <ctlwizchip+0x28>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	080014cd 	.word	0x080014cd
 8001490:	080014d3 	.word	0x080014d3
 8001494:	080014ff 	.word	0x080014ff
 8001498:	080014f3 	.word	0x080014f3
 800149c:	0800150d 	.word	0x0800150d
 80014a0:	08001519 	.word	0x08001519
 80014a4:	08001527 	.word	0x08001527
 80014a8:	0800154d 	.word	0x0800154d
 80014ac:	08001573 	.word	0x08001573
 80014b0:	080015b7 	.word	0x080015b7
 80014b4:	080015bd 	.word	0x080015bd
 80014b8:	080015c5 	.word	0x080015c5
 80014bc:	08001619 	.word	0x08001619
 80014c0:	080015cd 	.word	0x080015cd
 80014c4:	080015db 	.word	0x080015db
 80014c8:	080015f7 	.word	0x080015f7
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80014cc:	f000 f8ea 	bl	80016a4 <wizchip_sw_reset>
         break;
 80014d0:	e0a3      	b.n	800161a <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3308      	adds	r3, #8
 80014e0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f927 	bl	800173c <wizchip_init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e094      	b.n	800161c <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f9ac 	bl	8001854 <wizchip_clrinterrupt>
         break;
 80014fc:	e08d      	b.n	800161a <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80014fe:	f000 f9dd 	bl	80018bc <wizchip_getinterrupt>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	801a      	strh	r2, [r3, #0]
         break;
 800150a:	e086      	b.n	800161a <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f000 f9f8 	bl	8001906 <wizchip_setinterruptmask>
         break;         
 8001516:	e080      	b.n	800161a <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001518:	f000 fa10 	bl	800193c <wizchip_getinterruptmask>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	801a      	strh	r2, [r3, #0]
         break;
 8001524:	e079      	b.n	800161a <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001536:	f7ff fb65 	bl	8000c04 <WIZCHIP_WRITE>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001546:	f7ff fb5d 	bl	8000c04 <WIZCHIP_WRITE>
         break;
 800154a:	e066      	b.n	800161a <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 800154c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001550:	f7ff fb0c 	bl	8000b6c <WIZCHIP_READ>
 8001554:	4603      	mov	r3, r0
 8001556:	b29b      	uxth	r3, r3
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b29c      	uxth	r4, r3
 800155c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001560:	f7ff fb04 	bl	8000b6c <WIZCHIP_READ>
 8001564:	4603      	mov	r3, r0
 8001566:	b29b      	uxth	r3, r3
 8001568:	4423      	add	r3, r4
 800156a:	b29a      	uxth	r2, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	801a      	strh	r2, [r3, #0]
         break;
 8001570:	e053      	b.n	800161a <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <ctlwizchip+0x1c0>)
 8001574:	789a      	ldrb	r2, [r3, #2]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	4a29      	ldr	r2, [pc, #164]	; (8001624 <ctlwizchip+0x1c0>)
 8001580:	78d2      	ldrb	r2, [r2, #3]
 8001582:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	3302      	adds	r3, #2
 8001588:	4a26      	ldr	r2, [pc, #152]	; (8001624 <ctlwizchip+0x1c0>)
 800158a:	7912      	ldrb	r2, [r2, #4]
 800158c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3303      	adds	r3, #3
 8001592:	4a24      	ldr	r2, [pc, #144]	; (8001624 <ctlwizchip+0x1c0>)
 8001594:	7952      	ldrb	r2, [r2, #5]
 8001596:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3304      	adds	r3, #4
 800159c:	4a21      	ldr	r2, [pc, #132]	; (8001624 <ctlwizchip+0x1c0>)
 800159e:	7992      	ldrb	r2, [r2, #6]
 80015a0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3305      	adds	r3, #5
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <ctlwizchip+0x1c0>)
 80015a8:	79d2      	ldrb	r2, [r2, #7]
 80015aa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	3306      	adds	r3, #6
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
         break;
 80015b4:	e031      	b.n	800161a <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80015b6:	f000 fa13 	bl	80019e0 <wizphy_reset>
         break;
 80015ba:	e02e      	b.n	800161a <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f000 fa36 	bl	8001a2e <wizphy_setphyconf>
         break;
 80015c2:	e02a      	b.n	800161a <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f000 fa75 	bl	8001ab4 <wizphy_getphyconf>
         break;
 80015ca:	e026      	b.n	800161a <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fad9 	bl	8001b88 <wizphy_setphypmode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	e020      	b.n	800161c <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80015da:	f000 f9e8 	bl	80019ae <wizphy_getphypmode>
 80015de:	4603      	mov	r3, r0
 80015e0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2bff      	cmp	r3, #255	; 0xff
 80015e6:	d102      	bne.n	80015ee <ctlwizchip+0x18a>
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ec:	e016      	b.n	800161c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	7dfa      	ldrb	r2, [r7, #23]
 80015f2:	701a      	strb	r2, [r3, #0]
         break;
 80015f4:	e011      	b.n	800161a <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80015f6:	f000 f9c4 	bl	8001982 <wizphy_getphylink>
 80015fa:	4603      	mov	r3, r0
 80015fc:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	2bff      	cmp	r3, #255	; 0xff
 8001602:	d102      	bne.n	800160a <ctlwizchip+0x1a6>
 8001604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001608:	e008      	b.n	800161c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	7dfa      	ldrb	r2, [r7, #23]
 800160e:	701a      	strb	r2, [r3, #0]
         break;
 8001610:	e003      	b.n	800161a <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001616:	e001      	b.n	800161c <ctlwizchip+0x1b8>
         break;
 8001618:	bf00      	nop
   }
   return 0;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	371c      	adds	r7, #28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}
 8001624:	2000001c 	.word	0x2000001c

08001628 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2b05      	cmp	r3, #5
 8001638:	d82c      	bhi.n	8001694 <ctlnetwork+0x6c>
 800163a:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <ctlnetwork+0x18>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001659 	.word	0x08001659
 8001644:	08001661 	.word	0x08001661
 8001648:	08001669 	.word	0x08001669
 800164c:	08001677 	.word	0x08001677
 8001650:	08001685 	.word	0x08001685
 8001654:	0800168d 	.word	0x0800168d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f000 fadf 	bl	8001c1c <wizchip_setnetinfo>
         break;
 800165e:	e01c      	b.n	800169a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f000 fb1b 	bl	8001c9c <wizchip_getnetinfo>
         break;
 8001666:	e018      	b.n	800169a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fb55 	bl	8001d1c <wizchip_setnetmode>
 8001672:	4603      	mov	r3, r0
 8001674:	e012      	b.n	800169c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001676:	f000 fb73 	bl	8001d60 <wizchip_getnetmode>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	701a      	strb	r2, [r3, #0]
         break;
 8001682:	e00a      	b.n	800169a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f000 fb73 	bl	8001d70 <wizchip_settimeout>
         break;
 800168a:	e006      	b.n	800169a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800168c:	6838      	ldr	r0, [r7, #0]
 800168e:	f000 fb90 	bl	8001db2 <wizchip_gettimeout>
         break;
 8001692:	e002      	b.n	800169a <ctlnetwork+0x72>
      default:
         return -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001698:	e000      	b.n	800169c <ctlnetwork+0x74>
   }
   return 0;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2206      	movs	r2, #6
 80016ae:	4619      	mov	r1, r3
 80016b0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80016b4:	f7ff faf4 	bl	8000ca0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2204      	movs	r2, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016c4:	f7ff faec 	bl	8000ca0 <WIZCHIP_READ_BUF>
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	2204      	movs	r2, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80016d4:	f7ff fae4 	bl	8000ca0 <WIZCHIP_READ_BUF>
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2204      	movs	r2, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80016e4:	f7ff fadc 	bl	8000ca0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fa8a 	bl	8000c04 <WIZCHIP_WRITE>
   getMR(); // for delay
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fa3b 	bl	8000b6c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2206      	movs	r2, #6
 80016fa:	4619      	mov	r1, r3
 80016fc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001700:	f7ff fb2e 	bl	8000d60 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2204      	movs	r2, #4
 800170a:	4619      	mov	r1, r3
 800170c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001710:	f7ff fb26 	bl	8000d60 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2204      	movs	r2, #4
 800171a:	4619      	mov	r1, r3
 800171c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001720:	f7ff fb1e 	bl	8000d60 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2204      	movs	r2, #4
 800172a:	4619      	mov	r1, r3
 800172c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001730:	f7ff fb16 	bl	8000d60 <WIZCHIP_WRITE_BUF>
}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800174a:	f7ff ffab 	bl	80016a4 <wizchip_sw_reset>
   if(txsize)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d03b      	beq.n	80017cc <wizchip_init+0x90>
   {
      tmp = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e015      	b.n	800178a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	4413      	add	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8001770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001774:	2b10      	cmp	r3, #16
 8001776:	dd02      	ble.n	800177e <wizchip_init+0x42>
 8001778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800177c:	e066      	b.n	800184c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	3301      	adds	r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	2b07      	cmp	r3, #7
 8001790:	dde5      	ble.n	800175e <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e015      	b.n	80017c4 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	3301      	adds	r3, #1
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80017a6:	4618      	mov	r0, r3
 80017a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff fa26 	bl	8000c04 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c8:	2b07      	cmp	r3, #7
 80017ca:	dde5      	ble.n	8001798 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03b      	beq.n	800184a <wizchip_init+0x10e>
   {
      tmp = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e015      	b.n	8001808 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80017dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	4413      	add	r3, r2
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80017ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	dd02      	ble.n	80017fc <wizchip_init+0xc0>
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fa:	e027      	b.n	800184c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3301      	adds	r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180c:	2b07      	cmp	r3, #7
 800180e:	dde5      	ble.n	80017dc <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e015      	b.n	8001842 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	3301      	adds	r3, #1
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001824:	4618      	mov	r0, r3
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f9e7 	bl	8000c04 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	3301      	adds	r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	2b07      	cmp	r3, #7
 8001848:	dde5      	ble.n	8001816 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	b29b      	uxth	r3, r3
 8001868:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f023 030f 	bic.w	r3, r3, #15
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4619      	mov	r1, r3
 8001874:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001878:	f7ff f9c4 	bl	8000c04 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e014      	b.n	80018ac <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8001882:	7bba      	ldrb	r2, [r7, #14]
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	fa42 f303 	asr.w	r3, r2, r3
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <wizchip_clrinterrupt+0x52>
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	3301      	adds	r3, #1
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800189e:	211f      	movs	r1, #31
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff f9af 	bl	8000c04 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	3301      	adds	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b07      	cmp	r3, #7
 80018b0:	d9e7      	bls.n	8001882 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80018ce:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80018d2:	f7ff f94b 	bl	8000b6c <WIZCHIP_READ>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f023 030f 	bic.w	r3, r3, #15
 80018dc:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80018de:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80018e2:	f7ff f943 	bl	8000b6c <WIZCHIP_READ>
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80018ea:	79bb      	ldrb	r3, [r7, #6]
 80018ec:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80018fc:	88bb      	ldrh	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	4619      	mov	r1, r3
 8001920:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001924:	f7ff f96e 	bl	8000c04 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	4619      	mov	r1, r3
 800192c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001930:	f7ff f968 	bl	8000c04 <WIZCHIP_WRITE>
#endif   
}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800194e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001952:	f7ff f90b 	bl	8000b6c <WIZCHIP_READ>
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800195a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800195e:	f7ff f905 	bl	8000b6c <WIZCHIP_READ>
 8001962:	4603      	mov	r3, r0
 8001964:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001966:	79bb      	ldrb	r3, [r7, #6]
 8001968:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b29a      	uxth	r2, r3
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4413      	add	r3, r2
 8001976:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001978:	88bb      	ldrh	r3, [r7, #4]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001988:	2300      	movs	r3, #0
 800198a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800198c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001990:	f7ff f8ec 	bl	8000b6c <WIZCHIP_READ>
 8001994:	4603      	mov	r3, r0
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800199e:	2301      	movs	r3, #1
 80019a0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80019b8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019bc:	f7ff f8d6 	bl	8000b6c <WIZCHIP_READ>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019c6:	2b30      	cmp	r3, #48	; 0x30
 80019c8:	d102      	bne.n	80019d0 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80019ca:	2301      	movs	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	e001      	b.n	80019d4 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80019d0:	2300      	movs	r3, #0
 80019d2:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80019e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019ea:	f7ff f8bf 	bl	8000b6c <WIZCHIP_READ>
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019f8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a02:	f7ff f8ff 	bl	8000c04 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001a06:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a0a:	f7ff f8af 	bl	8000b6c <WIZCHIP_READ>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a18:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a22:	f7ff f8ef 	bl	8000c04 <WIZCHIP_WRITE>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d104      	bne.n	8001a4c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e003      	b.n	8001a54 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a52:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d104      	bne.n	8001a66 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e019      	b.n	8001a9a <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	78db      	ldrb	r3, [r3, #3]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d10d      	bne.n	8001a8a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d104      	bne.n	8001a80 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	f043 0318 	orr.w	r3, r3, #24
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e00c      	b.n	8001a9a <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e007      	b.n	8001a9a <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	789b      	ldrb	r3, [r3, #2]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d103      	bne.n	8001a9a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	f043 0310 	orr.w	r3, r3, #16
 8001a98:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001aa2:	f7ff f8af 	bl	8000c04 <WIZCHIP_WRITE>
   wizphy_reset();
 8001aa6:	f7ff ff9b 	bl	80019e0 <wizphy_reset>
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001ac0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001ac4:	f7ff f852 	bl	8000b6c <WIZCHIP_READ>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	119b      	asrs	r3, r3, #6
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	d001      	beq.n	8001aea <wizphy_getphyconf+0x36>
 8001ae6:	2b38      	cmp	r3, #56	; 0x38
 8001ae8:	d103      	bne.n	8001af2 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
         break;
 8001af0:	e003      	b.n	8001afa <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	705a      	strb	r2, [r3, #1]
         break;
 8001af8:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b00:	3b10      	subs	r3, #16
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	bf8c      	ite	hi
 8001b06:	2201      	movhi	r2, #1
 8001b08:	2200      	movls	r2, #0
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d10f      	bne.n	8001b30 <wizphy_getphyconf+0x7c>
 8001b10:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <wizphy_getphyconf+0xcc>)
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bf14      	ite	ne
 8001b1e:	2301      	movne	r3, #1
 8001b20:	2300      	moveq	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	709a      	strb	r2, [r3, #2]
         break;
 8001b2e:	e003      	b.n	8001b38 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	709a      	strb	r2, [r3, #2]
         break;
 8001b36:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b3e:	3b08      	subs	r3, #8
 8001b40:	2b18      	cmp	r3, #24
 8001b42:	bf8c      	ite	hi
 8001b44:	2201      	movhi	r2, #1
 8001b46:	2200      	movls	r2, #0
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	2a00      	cmp	r2, #0
 8001b4c:	d10f      	bne.n	8001b6e <wizphy_getphyconf+0xba>
 8001b4e:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <wizphy_getphyconf+0xd0>)
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf14      	ite	ne
 8001b5c:	2301      	movne	r3, #1
 8001b5e:	2300      	moveq	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	70da      	strb	r2, [r3, #3]
         break;
 8001b6c:	e003      	b.n	8001b76 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	70da      	strb	r2, [r3, #3]
         break;
 8001b74:	bf00      	nop
   }
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	00010101 	.word	0x00010101
 8001b84:	01010001 	.word	0x01010001

08001b88 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001b96:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b9a:	f7fe ffe7 	bl	8000b6c <WIZCHIP_READ>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <wizphy_setphypmode+0x2a>
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb0:	e030      	b.n	8001c14 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001bb8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d104      	bne.n	8001bca <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e003      	b.n	8001bd2 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001bd0:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001bda:	f7ff f813 	bl	8000c04 <WIZCHIP_WRITE>
   wizphy_reset();
 8001bde:	f7ff feff 	bl	80019e0 <wizphy_reset>
   tmp = getPHYCFGR();
 8001be2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001be6:	f7fe ffc1 	bl	8000b6c <WIZCHIP_READ>
 8001bea:	4603      	mov	r3, r0
 8001bec:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d106      	bne.n	8001c02 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <wizphy_setphypmode+0x88>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e008      	b.n	8001c14 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <wizphy_setphypmode+0x88>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e001      	b.n	8001c14 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2206      	movs	r2, #6
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001c2e:	f7ff f897 	bl	8000d60 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	330e      	adds	r3, #14
 8001c36:	2204      	movs	r2, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c3e:	f7ff f88f 	bl	8000d60 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	330a      	adds	r3, #10
 8001c46:	2204      	movs	r2, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001c4e:	f7ff f887 	bl	8000d60 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3306      	adds	r3, #6
 8001c56:	2204      	movs	r2, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001c5e:	f7ff f87f 	bl	8000d60 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7c9a      	ldrb	r2, [r3, #18]
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <wizchip_setnetinfo+0x78>)
 8001c68:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7cda      	ldrb	r2, [r3, #19]
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <wizchip_setnetinfo+0x78>)
 8001c70:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7d1a      	ldrb	r2, [r3, #20]
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <wizchip_setnetinfo+0x78>)
 8001c78:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7d5a      	ldrb	r2, [r3, #21]
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <wizchip_setnetinfo+0x78>)
 8001c80:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7d9a      	ldrb	r2, [r3, #22]
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <wizchip_setnetinfo+0x7c>)
 8001c88:	701a      	strb	r2, [r3, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000016c 	.word	0x2000016c
 8001c98:	20000170 	.word	0x20000170

08001c9c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2206      	movs	r2, #6
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001cae:	f7fe fff7 	bl	8000ca0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	330e      	adds	r3, #14
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cbe:	f7fe ffef 	bl	8000ca0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	330a      	adds	r3, #10
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001cce:	f7fe ffe7 	bl	8000ca0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3306      	adds	r3, #6
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001cde:	f7fe ffdf 	bl	8000ca0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <wizchip_getnetinfo+0x78>)
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <wizchip_getnetinfo+0x78>)
 8001cec:	785a      	ldrb	r2, [r3, #1]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <wizchip_getnetinfo+0x78>)
 8001cf4:	789a      	ldrb	r2, [r3, #2]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <wizchip_getnetinfo+0x78>)
 8001cfc:	78da      	ldrb	r2, [r3, #3]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <wizchip_getnetinfo+0x7c>)
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	759a      	strb	r2, [r3, #22]
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000016c 	.word	0x2000016c
 8001d18:	20000170 	.word	0x20000170

08001d1c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <wizchip_setnetmode+0x1e>
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d38:	e00e      	b.n	8001d58 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7fe ff16 	bl	8000b6c <WIZCHIP_READ>
 8001d40:	4603      	mov	r3, r0
 8001d42:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7fe ff57 	bl	8000c04 <WIZCHIP_WRITE>
   return 0;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7fe ff01 	bl	8000b6c <WIZCHIP_READ>
 8001d6a:	4603      	mov	r3, r0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001d82:	f7fe ff3f 	bl	8000c04 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	885b      	ldrh	r3, [r3, #2]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001d96:	f7fe ff35 	bl	8000c04 <WIZCHIP_WRITE>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	885b      	ldrh	r3, [r3, #2]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001da6:	f7fe ff2d 	bl	8000c04 <WIZCHIP_WRITE>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001db2:	b590      	push	{r4, r7, lr}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001dba:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001dbe:	f7fe fed5 	bl	8000b6c <WIZCHIP_READ>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001dca:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001dce:	f7fe fecd 	bl	8000b6c <WIZCHIP_READ>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b29c      	uxth	r4, r3
 8001dda:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001dde:	f7fe fec5 	bl	8000b6c <WIZCHIP_READ>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4423      	add	r3, r4
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	805a      	strh	r2, [r3, #2]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}
	...

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dfc:	f7fe fea4 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	; (8001e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e26:	f001 fde3 	bl	80039f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7fe fba7 	bl	800057c <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001e3c:	0800479c 	.word	0x0800479c
  ldr r2, =_sbss
 8001e40:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001e44:	200002c4 	.word	0x200002c4

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f931 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7fe fcdc 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f93b 	bl	800212a <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ecc:	f000 f911 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000018 	.word	0x20000018
 8001ee8:	2000004c 	.word	0x2000004c
 8001eec:	20000048 	.word	0x20000048

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	2000004c 	.word	0x2000004c
 8001f14:	20000174 	.word	0x20000174

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000174 	.word	0x20000174

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000004c 	.word	0x2000004c

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff47 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff5c 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffb0 	bl	8002098 <SysTick_Config>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e159      	b.n	8002414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002160:	2201      	movs	r2, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	429a      	cmp	r2, r3
 800217a:	f040 8148 	bne.w	800240e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d005      	beq.n	8002196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002192:	2b02      	cmp	r3, #2
 8002194:	d130      	bne.n	80021f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021cc:	2201      	movs	r2, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 0201 	and.w	r2, r3, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b03      	cmp	r3, #3
 8002202:	d017      	beq.n	8002234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d123      	bne.n	8002288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3208      	adds	r2, #8
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0203 	and.w	r2, r3, #3
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a2 	beq.w	800240e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b57      	ldr	r3, [pc, #348]	; (800242c <HAL_GPIO_Init+0x2e8>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	4a56      	ldr	r2, [pc, #344]	; (800242c <HAL_GPIO_Init+0x2e8>)
 80022d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d8:	6453      	str	r3, [r2, #68]	; 0x44
 80022da:	4b54      	ldr	r3, [pc, #336]	; (800242c <HAL_GPIO_Init+0x2e8>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e6:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_GPIO_Init+0x2ec>)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	220f      	movs	r2, #15
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a49      	ldr	r2, [pc, #292]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x202>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a48      	ldr	r2, [pc, #288]	; (8002438 <HAL_GPIO_Init+0x2f4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x1fe>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a47      	ldr	r2, [pc, #284]	; (800243c <HAL_GPIO_Init+0x2f8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x1fa>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a46      	ldr	r2, [pc, #280]	; (8002440 <HAL_GPIO_Init+0x2fc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x1f6>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a45      	ldr	r2, [pc, #276]	; (8002444 <HAL_GPIO_Init+0x300>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x1f2>
 8002332:	2304      	movs	r3, #4
 8002334:	e008      	b.n	8002348 <HAL_GPIO_Init+0x204>
 8002336:	2307      	movs	r3, #7
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x204>
 800233a:	2303      	movs	r3, #3
 800233c:	e004      	b.n	8002348 <HAL_GPIO_Init+0x204>
 800233e:	2302      	movs	r3, #2
 8002340:	e002      	b.n	8002348 <HAL_GPIO_Init+0x204>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_GPIO_Init+0x204>
 8002346:	2300      	movs	r3, #0
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	f002 0203 	and.w	r2, r2, #3
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	4093      	lsls	r3, r2
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002358:	4935      	ldr	r1, [pc, #212]	; (8002430 <HAL_GPIO_Init+0x2ec>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002366:	4b38      	ldr	r3, [pc, #224]	; (8002448 <HAL_GPIO_Init+0x304>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800238a:	4a2f      	ldr	r2, [pc, #188]	; (8002448 <HAL_GPIO_Init+0x304>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002390:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_GPIO_Init+0x304>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b4:	4a24      	ldr	r2, [pc, #144]	; (8002448 <HAL_GPIO_Init+0x304>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_GPIO_Init+0x304>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023de:	4a1a      	ldr	r2, [pc, #104]	; (8002448 <HAL_GPIO_Init+0x304>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_GPIO_Init+0x304>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002408:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_GPIO_Init+0x304>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	f67f aea2 	bls.w	8002160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40013800 	.word	0x40013800
 8002434:	40020000 	.word	0x40020000
 8002438:	40020400 	.word	0x40020400
 800243c:	40020800 	.word	0x40020800
 8002440:	40020c00 	.word	0x40020c00
 8002444:	40021000 	.word	0x40021000
 8002448:	40013c00 	.word	0x40013c00

0800244c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002468:	e003      	b.n	8002472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	041a      	lsls	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	619a      	str	r2, [r3, #24]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e267      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d075      	beq.n	800258a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b85      	ldr	r3, [pc, #532]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b6:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c2:	d10b      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	4b7e      	ldr	r3, [pc, #504]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05b      	beq.n	8002588 <HAL_RCC_OscConfig+0x108>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d157      	bne.n	8002588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e242      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x74>
 80024e6:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a75      	ldr	r2, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x98>
 80024fe:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6f      	ldr	r2, [pc, #444]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6c      	ldr	r2, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 8002518:	4b69      	ldr	r3, [pc, #420]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a68      	ldr	r2, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fcee 	bl	8001f18 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff fcea 	bl	8001f18 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e207      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b5b      	ldr	r3, [pc, #364]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0xc0>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fcda 	bl	8001f18 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fcd6 	bl	8001f18 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1f3      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0xe8>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d063      	beq.n	800265e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d11c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e1c7      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4937      	ldr	r1, [pc, #220]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	e03a      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <HAL_RCC_OscConfig+0x244>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7ff fc8f 	bl	8001f18 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fe:	f7ff fc8b 	bl	8001f18 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1a8      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4925      	ldr	r1, [pc, #148]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e015      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_RCC_OscConfig+0x244>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff fc6e 	bl	8001f18 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002640:	f7ff fc6a 	bl	8001f18 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e187      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_RCC_OscConfig+0x248>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff fc4e 	bl	8001f18 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff fc4a 	bl	8001f18 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e167      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x200>
 800269e:	e01b      	b.n	80026d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_OscConfig+0x248>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fc37 	bl	8001f18 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	e00e      	b.n	80026cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ae:	f7ff fc33 	bl	8001f18 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d907      	bls.n	80026cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e150      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b88      	ldr	r3, [pc, #544]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ea      	bne.n	80026ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8097 	beq.w	8002814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b81      	ldr	r3, [pc, #516]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b7d      	ldr	r3, [pc, #500]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a7c      	ldr	r2, [pc, #496]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b7a      	ldr	r3, [pc, #488]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b77      	ldr	r3, [pc, #476]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4b74      	ldr	r3, [pc, #464]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a73      	ldr	r2, [pc, #460]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7ff fbf3 	bl	8001f18 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7ff fbef 	bl	8001f18 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e10c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x2ea>
 800275c:	4b64      	ldr	r3, [pc, #400]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4a63      	ldr	r2, [pc, #396]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	; 0x70
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x30c>
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a5e      	ldr	r2, [pc, #376]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
 800277e:	4b5c      	ldr	r3, [pc, #368]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a5b      	ldr	r2, [pc, #364]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800278c:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a57      	ldr	r2, [pc, #348]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	4b55      	ldr	r3, [pc, #340]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a54      	ldr	r2, [pc, #336]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279e:	f023 0304 	bic.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7ff fbb4 	bl	8001f18 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7ff fbb0 	bl	8001f18 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0cb      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RCC_OscConfig+0x334>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d8:	f7ff fb9e 	bl	8001f18 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7ff fb9a 	bl	8001f18 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0b5      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ee      	bne.n	80027e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	4a38      	ldr	r2, [pc, #224]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a1 	beq.w	8002960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b08      	cmp	r3, #8
 8002828:	d05c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d141      	bne.n	80028b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <HAL_RCC_OscConfig+0x478>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff fb6e 	bl	8001f18 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7ff fb6a 	bl	8001f18 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e087      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	491b      	ldr	r1, [pc, #108]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_OscConfig+0x478>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7ff fb43 	bl	8001f18 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7ff fb3f 	bl	8001f18 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e05c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x416>
 80028b4:	e054      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_RCC_OscConfig+0x478>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fb2c 	bl	8001f18 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff fb28 	bl	8001f18 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e045      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x444>
 80028e2:	e03d      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e038      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40007000 	.word	0x40007000
 80028f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x4ec>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d028      	beq.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d121      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d11a      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002934:	4293      	cmp	r3, r2
 8002936:	d111      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	3b01      	subs	r3, #1
 8002946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cc      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d90c      	bls.n	80029ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b65      	ldr	r3, [pc, #404]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	4b53      	ldr	r3, [pc, #332]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a52      	ldr	r2, [pc, #328]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	494d      	ldr	r1, [pc, #308]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d044      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d119      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e067      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4934      	ldr	r1, [pc, #208]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a60:	f7ff fa5a 	bl	8001f18 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7ff fa56 	bl	8001f18 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e04f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d20c      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4916      	ldr	r1, [pc, #88]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	490e      	ldr	r1, [pc, #56]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af6:	f000 f821 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	490a      	ldr	r1, [pc, #40]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f9ba 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08004740 	.word	0x08004740
 8002b34:	20000018 	.word	0x20000018
 8002b38:	20000048 	.word	0x20000048

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b090      	sub	sp, #64	; 0x40
 8002b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
 8002b48:	2300      	movs	r3, #0
 8002b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d00d      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x40>
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	f200 80a1 	bhi.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b6e:	e09b      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b74:	e09b      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b76:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b7a:	e098      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b7c:	4b4f      	ldr	r3, [pc, #316]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b86:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d028      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	2200      	movs	r2, #0
 8002b9a:	623b      	str	r3, [r7, #32]
 8002b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba8:	fb03 f201 	mul.w	r2, r3, r1
 8002bac:	2300      	movs	r3, #0
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a43      	ldr	r2, [pc, #268]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bb6:	fba0 1202 	umull	r1, r2, r0, r2
 8002bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc2:	4413      	add	r3, r2
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	2200      	movs	r2, #0
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	61fa      	str	r2, [r7, #28]
 8002bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bd6:	f7fd fb53 	bl	8000280 <__aeabi_uldivmod>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4613      	mov	r3, r2
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be2:	e053      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be4:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	2200      	movs	r2, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	617a      	str	r2, [r7, #20]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bf6:	f04f 0b00 	mov.w	fp, #0
 8002bfa:	4652      	mov	r2, sl
 8002bfc:	465b      	mov	r3, fp
 8002bfe:	f04f 0000 	mov.w	r0, #0
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	0159      	lsls	r1, r3, #5
 8002c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0c:	0150      	lsls	r0, r2, #5
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	ebb2 080a 	subs.w	r8, r2, sl
 8002c16:	eb63 090b 	sbc.w	r9, r3, fp
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c2e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c32:	eb63 0509 	sbc.w	r5, r3, r9
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	00eb      	lsls	r3, r5, #3
 8002c40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c44:	00e2      	lsls	r2, r4, #3
 8002c46:	4614      	mov	r4, r2
 8002c48:	461d      	mov	r5, r3
 8002c4a:	eb14 030a 	adds.w	r3, r4, sl
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	eb45 030b 	adc.w	r3, r5, fp
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c62:	4629      	mov	r1, r5
 8002c64:	028b      	lsls	r3, r1, #10
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	028a      	lsls	r2, r1, #10
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c76:	2200      	movs	r2, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	60fa      	str	r2, [r7, #12]
 8002c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c80:	f7fd fafe 	bl	8000280 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ca6:	e002      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3740      	adds	r7, #64	; 0x40
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	017d7840 	.word	0x017d7840

08002cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000018 	.word	0x20000018

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08004750 	.word	0x08004750

08002d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d0c:	f7ff ffdc 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0b5b      	lsrs	r3, r3, #13
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08004750 	.word	0x08004750

08002d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07b      	b.n	8002e3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d108      	bne.n	8002d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d52:	d009      	beq.n	8002d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	61da      	str	r2, [r3, #28]
 8002d5a:	e005      	b.n	8002d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fd82 	bl	800088c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	ea42 0103 	orr.w	r1, r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	f003 0104 	and.w	r1, r3, #4
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f003 0210 	and.w	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e042      	b.n	8002eda <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fd57 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2224      	movs	r2, #36	; 0x24
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f82c 	bl	8002ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eaa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b0c0      	sub	sp, #256	; 0x100
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	ea40 0301 	orr.w	r3, r0, r1
 8002f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f3c:	f021 010c 	bic.w	r1, r1, #12
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	6999      	ldr	r1, [r3, #24]
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	ea40 0301 	orr.w	r3, r0, r1
 8002f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b8f      	ldr	r3, [pc, #572]	; (80031b0 <UART_SetConfig+0x2cc>)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d005      	beq.n	8002f84 <UART_SetConfig+0xa0>
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b8d      	ldr	r3, [pc, #564]	; (80031b4 <UART_SetConfig+0x2d0>)
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d104      	bne.n	8002f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff fec0 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8002f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f8c:	e003      	b.n	8002f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f8e:	f7ff fea7 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8002f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa0:	f040 810c 	bne.w	80031bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	eb12 0801 	adds.w	r8, r2, r1
 8002fcc:	4629      	mov	r1, r5
 8002fce:	eb43 0901 	adc.w	r9, r3, r1
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe6:	4690      	mov	r8, r2
 8002fe8:	4699      	mov	r9, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	eb18 0303 	adds.w	r3, r8, r3
 8002ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb49 0303 	adc.w	r3, r9, r3
 8002ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800300e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003012:	460b      	mov	r3, r1
 8003014:	18db      	adds	r3, r3, r3
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
 8003018:	4613      	mov	r3, r2
 800301a:	eb42 0303 	adc.w	r3, r2, r3
 800301e:	657b      	str	r3, [r7, #84]	; 0x54
 8003020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003028:	f7fd f92a 	bl	8000280 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	011c      	lsls	r4, r3, #4
 800303a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	64b9      	str	r1, [r7, #72]	; 0x48
 8003054:	415b      	adcs	r3, r3
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800305c:	4641      	mov	r1, r8
 800305e:	eb12 0a01 	adds.w	sl, r2, r1
 8003062:	4649      	mov	r1, r9
 8003064:	eb43 0b01 	adc.w	fp, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307c:	4692      	mov	sl, r2
 800307e:	469b      	mov	fp, r3
 8003080:	4643      	mov	r3, r8
 8003082:	eb1a 0303 	adds.w	r3, sl, r3
 8003086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800308a:	464b      	mov	r3, r9
 800308c:	eb4b 0303 	adc.w	r3, fp, r3
 8003090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
 80030b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030be:	f7fd f8df 	bl	8000280 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <UART_SetConfig+0x2d4>)
 80030ca:	fba3 2301 	umull	r2, r3, r3, r1
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2264      	movs	r2, #100	; 0x64
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	1acb      	subs	r3, r1, r3
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <UART_SetConfig+0x2d4>)
 80030e0:	fba3 2302 	umull	r2, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030ec:	441c      	add	r4, r3
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	63b9      	str	r1, [r7, #56]	; 0x38
 8003108:	415b      	adcs	r3, r3
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6339      	str	r1, [r7, #48]	; 0x30
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003144:	464b      	mov	r3, r9
 8003146:	460a      	mov	r2, r1
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800315c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003164:	460b      	mov	r3, r1
 8003166:	18db      	adds	r3, r3, r3
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
 800316a:	4613      	mov	r3, r2
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800317a:	f7fd f881 	bl	8000280 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003184:	fba3 1302 	umull	r1, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2164      	movs	r1, #100	; 0x64
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	3332      	adds	r3, #50	; 0x32
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4422      	add	r2, r4
 80031aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ac:	e106      	b.n	80033bc <UART_SetConfig+0x4d8>
 80031ae:	bf00      	nop
 80031b0:	40011000 	.word	0x40011000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	1891      	adds	r1, r2, r2
 80031d4:	6239      	str	r1, [r7, #32]
 80031d6:	415b      	adcs	r3, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
 80031da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031de:	4641      	mov	r1, r8
 80031e0:	1854      	adds	r4, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb43 0501 	adc.w	r5, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	00eb      	lsls	r3, r5, #3
 80031f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f6:	00e2      	lsls	r2, r4, #3
 80031f8:	4614      	mov	r4, r2
 80031fa:	461d      	mov	r5, r3
 80031fc:	4643      	mov	r3, r8
 80031fe:	18e3      	adds	r3, r4, r3
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003204:	464b      	mov	r3, r9
 8003206:	eb45 0303 	adc.w	r3, r5, r3
 800320a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800321a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800322a:	4629      	mov	r1, r5
 800322c:	008b      	lsls	r3, r1, #2
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003234:	4621      	mov	r1, r4
 8003236:	008a      	lsls	r2, r1, #2
 8003238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800323c:	f7fd f820 	bl	8000280 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <UART_SetConfig+0x4e4>)
 8003246:	fba3 2302 	umull	r2, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	011c      	lsls	r4, r3, #4
 800324e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800325c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	61b9      	str	r1, [r7, #24]
 8003268:	415b      	adcs	r3, r3
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003270:	4641      	mov	r1, r8
 8003272:	1851      	adds	r1, r2, r1
 8003274:	6139      	str	r1, [r7, #16]
 8003276:	4649      	mov	r1, r9
 8003278:	414b      	adcs	r3, r1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003288:	4659      	mov	r1, fp
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4651      	mov	r1, sl
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4651      	mov	r1, sl
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4642      	mov	r2, r8
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032a4:	464b      	mov	r3, r9
 80032a6:	460a      	mov	r2, r1
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032c8:	4649      	mov	r1, r9
 80032ca:	008b      	lsls	r3, r1, #2
 80032cc:	4641      	mov	r1, r8
 80032ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d2:	4641      	mov	r1, r8
 80032d4:	008a      	lsls	r2, r1, #2
 80032d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032da:	f7fc ffd1 	bl	8000280 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <UART_SetConfig+0x4e4>)
 80032e6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2264      	movs	r2, #100	; 0x64
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	1acb      	subs	r3, r1, r3
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3332      	adds	r3, #50	; 0x32
 80032f8:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <UART_SetConfig+0x4e4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003304:	441c      	add	r4, r3
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	673b      	str	r3, [r7, #112]	; 0x70
 800330e:	677a      	str	r2, [r7, #116]	; 0x74
 8003310:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	415b      	adcs	r3, r3
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003324:	4641      	mov	r1, r8
 8003326:	1851      	adds	r1, r2, r1
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	4649      	mov	r1, r9
 800332c:	414b      	adcs	r3, r1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800333c:	4659      	mov	r1, fp
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4651      	mov	r1, sl
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4642      	mov	r2, r8
 8003352:	189b      	adds	r3, r3, r2
 8003354:	66bb      	str	r3, [r7, #104]	; 0x68
 8003356:	464b      	mov	r3, r9
 8003358:	460a      	mov	r2, r1
 800335a:	eb42 0303 	adc.w	r3, r2, r3
 800335e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	663b      	str	r3, [r7, #96]	; 0x60
 800336a:	667a      	str	r2, [r7, #100]	; 0x64
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003378:	4649      	mov	r1, r9
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	4641      	mov	r1, r8
 800337e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003382:	4641      	mov	r1, r8
 8003384:	008a      	lsls	r2, r1, #2
 8003386:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800338a:	f7fc ff79 	bl	8000280 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <UART_SetConfig+0x4e4>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	; 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	3332      	adds	r3, #50	; 0x32
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <UART_SetConfig+0x4e4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4422      	add	r2, r4
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033c2:	46bd      	mov	sp, r7
 80033c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c8:	51eb851f 	.word	0x51eb851f

080033cc <std>:
 80033cc:	2300      	movs	r3, #0
 80033ce:	b510      	push	{r4, lr}
 80033d0:	4604      	mov	r4, r0
 80033d2:	e9c0 3300 	strd	r3, r3, [r0]
 80033d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033da:	6083      	str	r3, [r0, #8]
 80033dc:	8181      	strh	r1, [r0, #12]
 80033de:	6643      	str	r3, [r0, #100]	; 0x64
 80033e0:	81c2      	strh	r2, [r0, #14]
 80033e2:	6183      	str	r3, [r0, #24]
 80033e4:	4619      	mov	r1, r3
 80033e6:	2208      	movs	r2, #8
 80033e8:	305c      	adds	r0, #92	; 0x5c
 80033ea:	f000 faad 	bl	8003948 <memset>
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <std+0x58>)
 80033f0:	6263      	str	r3, [r4, #36]	; 0x24
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <std+0x5c>)
 80033f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80033f6:	4b0d      	ldr	r3, [pc, #52]	; (800342c <std+0x60>)
 80033f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <std+0x64>)
 80033fc:	6323      	str	r3, [r4, #48]	; 0x30
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <std+0x68>)
 8003400:	6224      	str	r4, [r4, #32]
 8003402:	429c      	cmp	r4, r3
 8003404:	d006      	beq.n	8003414 <std+0x48>
 8003406:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800340a:	4294      	cmp	r4, r2
 800340c:	d002      	beq.n	8003414 <std+0x48>
 800340e:	33d0      	adds	r3, #208	; 0xd0
 8003410:	429c      	cmp	r4, r3
 8003412:	d105      	bne.n	8003420 <std+0x54>
 8003414:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	f000 bb0c 	b.w	8003a38 <__retarget_lock_init_recursive>
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	08003799 	.word	0x08003799
 8003428:	080037bb 	.word	0x080037bb
 800342c:	080037f3 	.word	0x080037f3
 8003430:	08003817 	.word	0x08003817
 8003434:	20000178 	.word	0x20000178

08003438 <stdio_exit_handler>:
 8003438:	4a02      	ldr	r2, [pc, #8]	; (8003444 <stdio_exit_handler+0xc>)
 800343a:	4903      	ldr	r1, [pc, #12]	; (8003448 <stdio_exit_handler+0x10>)
 800343c:	4803      	ldr	r0, [pc, #12]	; (800344c <stdio_exit_handler+0x14>)
 800343e:	f000 b869 	b.w	8003514 <_fwalk_sglue>
 8003442:	bf00      	nop
 8003444:	20000050 	.word	0x20000050
 8003448:	080042f5 	.word	0x080042f5
 800344c:	2000005c 	.word	0x2000005c

08003450 <cleanup_stdio>:
 8003450:	6841      	ldr	r1, [r0, #4]
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <cleanup_stdio+0x34>)
 8003454:	4299      	cmp	r1, r3
 8003456:	b510      	push	{r4, lr}
 8003458:	4604      	mov	r4, r0
 800345a:	d001      	beq.n	8003460 <cleanup_stdio+0x10>
 800345c:	f000 ff4a 	bl	80042f4 <_fflush_r>
 8003460:	68a1      	ldr	r1, [r4, #8]
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <cleanup_stdio+0x38>)
 8003464:	4299      	cmp	r1, r3
 8003466:	d002      	beq.n	800346e <cleanup_stdio+0x1e>
 8003468:	4620      	mov	r0, r4
 800346a:	f000 ff43 	bl	80042f4 <_fflush_r>
 800346e:	68e1      	ldr	r1, [r4, #12]
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <cleanup_stdio+0x3c>)
 8003472:	4299      	cmp	r1, r3
 8003474:	d004      	beq.n	8003480 <cleanup_stdio+0x30>
 8003476:	4620      	mov	r0, r4
 8003478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800347c:	f000 bf3a 	b.w	80042f4 <_fflush_r>
 8003480:	bd10      	pop	{r4, pc}
 8003482:	bf00      	nop
 8003484:	20000178 	.word	0x20000178
 8003488:	200001e0 	.word	0x200001e0
 800348c:	20000248 	.word	0x20000248

08003490 <global_stdio_init.part.0>:
 8003490:	b510      	push	{r4, lr}
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <global_stdio_init.part.0+0x30>)
 8003494:	4c0b      	ldr	r4, [pc, #44]	; (80034c4 <global_stdio_init.part.0+0x34>)
 8003496:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <global_stdio_init.part.0+0x38>)
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	4620      	mov	r0, r4
 800349c:	2200      	movs	r2, #0
 800349e:	2104      	movs	r1, #4
 80034a0:	f7ff ff94 	bl	80033cc <std>
 80034a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80034a8:	2201      	movs	r2, #1
 80034aa:	2109      	movs	r1, #9
 80034ac:	f7ff ff8e 	bl	80033cc <std>
 80034b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80034b4:	2202      	movs	r2, #2
 80034b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ba:	2112      	movs	r1, #18
 80034bc:	f7ff bf86 	b.w	80033cc <std>
 80034c0:	200002b0 	.word	0x200002b0
 80034c4:	20000178 	.word	0x20000178
 80034c8:	08003439 	.word	0x08003439

080034cc <__sfp_lock_acquire>:
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <__sfp_lock_acquire+0x8>)
 80034ce:	f000 bab4 	b.w	8003a3a <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	200002b9 	.word	0x200002b9

080034d8 <__sfp_lock_release>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__sfp_lock_release+0x8>)
 80034da:	f000 baaf 	b.w	8003a3c <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	200002b9 	.word	0x200002b9

080034e4 <__sinit>:
 80034e4:	b510      	push	{r4, lr}
 80034e6:	4604      	mov	r4, r0
 80034e8:	f7ff fff0 	bl	80034cc <__sfp_lock_acquire>
 80034ec:	6a23      	ldr	r3, [r4, #32]
 80034ee:	b11b      	cbz	r3, 80034f8 <__sinit+0x14>
 80034f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034f4:	f7ff bff0 	b.w	80034d8 <__sfp_lock_release>
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <__sinit+0x28>)
 80034fa:	6223      	str	r3, [r4, #32]
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <__sinit+0x2c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f5      	bne.n	80034f0 <__sinit+0xc>
 8003504:	f7ff ffc4 	bl	8003490 <global_stdio_init.part.0>
 8003508:	e7f2      	b.n	80034f0 <__sinit+0xc>
 800350a:	bf00      	nop
 800350c:	08003451 	.word	0x08003451
 8003510:	200002b0 	.word	0x200002b0

08003514 <_fwalk_sglue>:
 8003514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003518:	4607      	mov	r7, r0
 800351a:	4688      	mov	r8, r1
 800351c:	4614      	mov	r4, r2
 800351e:	2600      	movs	r6, #0
 8003520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003524:	f1b9 0901 	subs.w	r9, r9, #1
 8003528:	d505      	bpl.n	8003536 <_fwalk_sglue+0x22>
 800352a:	6824      	ldr	r4, [r4, #0]
 800352c:	2c00      	cmp	r4, #0
 800352e:	d1f7      	bne.n	8003520 <_fwalk_sglue+0xc>
 8003530:	4630      	mov	r0, r6
 8003532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003536:	89ab      	ldrh	r3, [r5, #12]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d907      	bls.n	800354c <_fwalk_sglue+0x38>
 800353c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003540:	3301      	adds	r3, #1
 8003542:	d003      	beq.n	800354c <_fwalk_sglue+0x38>
 8003544:	4629      	mov	r1, r5
 8003546:	4638      	mov	r0, r7
 8003548:	47c0      	blx	r8
 800354a:	4306      	orrs	r6, r0
 800354c:	3568      	adds	r5, #104	; 0x68
 800354e:	e7e9      	b.n	8003524 <_fwalk_sglue+0x10>

08003550 <iprintf>:
 8003550:	b40f      	push	{r0, r1, r2, r3}
 8003552:	b507      	push	{r0, r1, r2, lr}
 8003554:	4906      	ldr	r1, [pc, #24]	; (8003570 <iprintf+0x20>)
 8003556:	ab04      	add	r3, sp, #16
 8003558:	6808      	ldr	r0, [r1, #0]
 800355a:	f853 2b04 	ldr.w	r2, [r3], #4
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	f000 fb97 	bl	8003c94 <_vfiprintf_r>
 8003566:	b003      	add	sp, #12
 8003568:	f85d eb04 	ldr.w	lr, [sp], #4
 800356c:	b004      	add	sp, #16
 800356e:	4770      	bx	lr
 8003570:	200000a8 	.word	0x200000a8

08003574 <_puts_r>:
 8003574:	6a03      	ldr	r3, [r0, #32]
 8003576:	b570      	push	{r4, r5, r6, lr}
 8003578:	6884      	ldr	r4, [r0, #8]
 800357a:	4605      	mov	r5, r0
 800357c:	460e      	mov	r6, r1
 800357e:	b90b      	cbnz	r3, 8003584 <_puts_r+0x10>
 8003580:	f7ff ffb0 	bl	80034e4 <__sinit>
 8003584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003586:	07db      	lsls	r3, r3, #31
 8003588:	d405      	bmi.n	8003596 <_puts_r+0x22>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	0598      	lsls	r0, r3, #22
 800358e:	d402      	bmi.n	8003596 <_puts_r+0x22>
 8003590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003592:	f000 fa52 	bl	8003a3a <__retarget_lock_acquire_recursive>
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	0719      	lsls	r1, r3, #28
 800359a:	d513      	bpl.n	80035c4 <_puts_r+0x50>
 800359c:	6923      	ldr	r3, [r4, #16]
 800359e:	b18b      	cbz	r3, 80035c4 <_puts_r+0x50>
 80035a0:	3e01      	subs	r6, #1
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035a8:	3b01      	subs	r3, #1
 80035aa:	60a3      	str	r3, [r4, #8]
 80035ac:	b9e9      	cbnz	r1, 80035ea <_puts_r+0x76>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da2e      	bge.n	8003610 <_puts_r+0x9c>
 80035b2:	4622      	mov	r2, r4
 80035b4:	210a      	movs	r1, #10
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 f931 	bl	800381e <__swbuf_r>
 80035bc:	3001      	adds	r0, #1
 80035be:	d007      	beq.n	80035d0 <_puts_r+0x5c>
 80035c0:	250a      	movs	r5, #10
 80035c2:	e007      	b.n	80035d4 <_puts_r+0x60>
 80035c4:	4621      	mov	r1, r4
 80035c6:	4628      	mov	r0, r5
 80035c8:	f000 f966 	bl	8003898 <__swsetup_r>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d0e7      	beq.n	80035a0 <_puts_r+0x2c>
 80035d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80035d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035d6:	07da      	lsls	r2, r3, #31
 80035d8:	d405      	bmi.n	80035e6 <_puts_r+0x72>
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	059b      	lsls	r3, r3, #22
 80035de:	d402      	bmi.n	80035e6 <_puts_r+0x72>
 80035e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e2:	f000 fa2b 	bl	8003a3c <__retarget_lock_release_recursive>
 80035e6:	4628      	mov	r0, r5
 80035e8:	bd70      	pop	{r4, r5, r6, pc}
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da04      	bge.n	80035f8 <_puts_r+0x84>
 80035ee:	69a2      	ldr	r2, [r4, #24]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	dc06      	bgt.n	8003602 <_puts_r+0x8e>
 80035f4:	290a      	cmp	r1, #10
 80035f6:	d004      	beq.n	8003602 <_puts_r+0x8e>
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	6022      	str	r2, [r4, #0]
 80035fe:	7019      	strb	r1, [r3, #0]
 8003600:	e7cf      	b.n	80035a2 <_puts_r+0x2e>
 8003602:	4622      	mov	r2, r4
 8003604:	4628      	mov	r0, r5
 8003606:	f000 f90a 	bl	800381e <__swbuf_r>
 800360a:	3001      	adds	r0, #1
 800360c:	d1c9      	bne.n	80035a2 <_puts_r+0x2e>
 800360e:	e7df      	b.n	80035d0 <_puts_r+0x5c>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	250a      	movs	r5, #10
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	6022      	str	r2, [r4, #0]
 8003618:	701d      	strb	r5, [r3, #0]
 800361a:	e7db      	b.n	80035d4 <_puts_r+0x60>

0800361c <puts>:
 800361c:	4b02      	ldr	r3, [pc, #8]	; (8003628 <puts+0xc>)
 800361e:	4601      	mov	r1, r0
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	f7ff bfa7 	b.w	8003574 <_puts_r>
 8003626:	bf00      	nop
 8003628:	200000a8 	.word	0x200000a8

0800362c <setbuf>:
 800362c:	fab1 f281 	clz	r2, r1
 8003630:	0952      	lsrs	r2, r2, #5
 8003632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003636:	0052      	lsls	r2, r2, #1
 8003638:	f000 b800 	b.w	800363c <setvbuf>

0800363c <setvbuf>:
 800363c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003640:	461d      	mov	r5, r3
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <setvbuf+0x158>)
 8003644:	681f      	ldr	r7, [r3, #0]
 8003646:	4604      	mov	r4, r0
 8003648:	460e      	mov	r6, r1
 800364a:	4690      	mov	r8, r2
 800364c:	b127      	cbz	r7, 8003658 <setvbuf+0x1c>
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	b913      	cbnz	r3, 8003658 <setvbuf+0x1c>
 8003652:	4638      	mov	r0, r7
 8003654:	f7ff ff46 	bl	80034e4 <__sinit>
 8003658:	f1b8 0f02 	cmp.w	r8, #2
 800365c:	d006      	beq.n	800366c <setvbuf+0x30>
 800365e:	f1b8 0f01 	cmp.w	r8, #1
 8003662:	f200 8094 	bhi.w	800378e <setvbuf+0x152>
 8003666:	2d00      	cmp	r5, #0
 8003668:	f2c0 8091 	blt.w	800378e <setvbuf+0x152>
 800366c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800366e:	07da      	lsls	r2, r3, #31
 8003670:	d405      	bmi.n	800367e <setvbuf+0x42>
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	059b      	lsls	r3, r3, #22
 8003676:	d402      	bmi.n	800367e <setvbuf+0x42>
 8003678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800367a:	f000 f9de 	bl	8003a3a <__retarget_lock_acquire_recursive>
 800367e:	4621      	mov	r1, r4
 8003680:	4638      	mov	r0, r7
 8003682:	f000 fe37 	bl	80042f4 <_fflush_r>
 8003686:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003688:	b141      	cbz	r1, 800369c <setvbuf+0x60>
 800368a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800368e:	4299      	cmp	r1, r3
 8003690:	d002      	beq.n	8003698 <setvbuf+0x5c>
 8003692:	4638      	mov	r0, r7
 8003694:	f000 f9d4 	bl	8003a40 <_free_r>
 8003698:	2300      	movs	r3, #0
 800369a:	6363      	str	r3, [r4, #52]	; 0x34
 800369c:	2300      	movs	r3, #0
 800369e:	61a3      	str	r3, [r4, #24]
 80036a0:	6063      	str	r3, [r4, #4]
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	0618      	lsls	r0, r3, #24
 80036a6:	d503      	bpl.n	80036b0 <setvbuf+0x74>
 80036a8:	6921      	ldr	r1, [r4, #16]
 80036aa:	4638      	mov	r0, r7
 80036ac:	f000 f9c8 	bl	8003a40 <_free_r>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	f1b8 0f02 	cmp.w	r8, #2
 80036be:	81a3      	strh	r3, [r4, #12]
 80036c0:	d05f      	beq.n	8003782 <setvbuf+0x146>
 80036c2:	ab01      	add	r3, sp, #4
 80036c4:	466a      	mov	r2, sp
 80036c6:	4621      	mov	r1, r4
 80036c8:	4638      	mov	r0, r7
 80036ca:	f000 fe3b 	bl	8004344 <__swhatbuf_r>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	4318      	orrs	r0, r3
 80036d2:	81a0      	strh	r0, [r4, #12]
 80036d4:	bb2d      	cbnz	r5, 8003722 <setvbuf+0xe6>
 80036d6:	9d00      	ldr	r5, [sp, #0]
 80036d8:	4628      	mov	r0, r5
 80036da:	f000 f9fd 	bl	8003ad8 <malloc>
 80036de:	4606      	mov	r6, r0
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d150      	bne.n	8003786 <setvbuf+0x14a>
 80036e4:	f8dd 9000 	ldr.w	r9, [sp]
 80036e8:	45a9      	cmp	r9, r5
 80036ea:	d13e      	bne.n	800376a <setvbuf+0x12e>
 80036ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80036f0:	2200      	movs	r2, #0
 80036f2:	60a2      	str	r2, [r4, #8]
 80036f4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80036f8:	6022      	str	r2, [r4, #0]
 80036fa:	6122      	str	r2, [r4, #16]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003702:	6162      	str	r2, [r4, #20]
 8003704:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	07d1      	lsls	r1, r2, #31
 800370c:	81a3      	strh	r3, [r4, #12]
 800370e:	d404      	bmi.n	800371a <setvbuf+0xde>
 8003710:	059b      	lsls	r3, r3, #22
 8003712:	d402      	bmi.n	800371a <setvbuf+0xde>
 8003714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003716:	f000 f991 	bl	8003a3c <__retarget_lock_release_recursive>
 800371a:	4628      	mov	r0, r5
 800371c:	b003      	add	sp, #12
 800371e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003722:	2e00      	cmp	r6, #0
 8003724:	d0d8      	beq.n	80036d8 <setvbuf+0x9c>
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	b913      	cbnz	r3, 8003730 <setvbuf+0xf4>
 800372a:	4638      	mov	r0, r7
 800372c:	f7ff feda 	bl	80034e4 <__sinit>
 8003730:	f1b8 0f01 	cmp.w	r8, #1
 8003734:	bf08      	it	eq
 8003736:	89a3      	ldrheq	r3, [r4, #12]
 8003738:	6026      	str	r6, [r4, #0]
 800373a:	bf04      	itt	eq
 800373c:	f043 0301 	orreq.w	r3, r3, #1
 8003740:	81a3      	strheq	r3, [r4, #12]
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f013 0208 	ands.w	r2, r3, #8
 8003748:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800374c:	d01d      	beq.n	800378a <setvbuf+0x14e>
 800374e:	07da      	lsls	r2, r3, #31
 8003750:	bf41      	itttt	mi
 8003752:	2200      	movmi	r2, #0
 8003754:	426d      	negmi	r5, r5
 8003756:	60a2      	strmi	r2, [r4, #8]
 8003758:	61a5      	strmi	r5, [r4, #24]
 800375a:	bf58      	it	pl
 800375c:	60a5      	strpl	r5, [r4, #8]
 800375e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003760:	f015 0501 	ands.w	r5, r5, #1
 8003764:	d0d4      	beq.n	8003710 <setvbuf+0xd4>
 8003766:	2500      	movs	r5, #0
 8003768:	e7d7      	b.n	800371a <setvbuf+0xde>
 800376a:	4648      	mov	r0, r9
 800376c:	f000 f9b4 	bl	8003ad8 <malloc>
 8003770:	4606      	mov	r6, r0
 8003772:	2800      	cmp	r0, #0
 8003774:	d0ba      	beq.n	80036ec <setvbuf+0xb0>
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800377c:	81a3      	strh	r3, [r4, #12]
 800377e:	464d      	mov	r5, r9
 8003780:	e7d1      	b.n	8003726 <setvbuf+0xea>
 8003782:	2500      	movs	r5, #0
 8003784:	e7b4      	b.n	80036f0 <setvbuf+0xb4>
 8003786:	46a9      	mov	r9, r5
 8003788:	e7f5      	b.n	8003776 <setvbuf+0x13a>
 800378a:	60a2      	str	r2, [r4, #8]
 800378c:	e7e7      	b.n	800375e <setvbuf+0x122>
 800378e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003792:	e7c2      	b.n	800371a <setvbuf+0xde>
 8003794:	200000a8 	.word	0x200000a8

08003798 <__sread>:
 8003798:	b510      	push	{r4, lr}
 800379a:	460c      	mov	r4, r1
 800379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a0:	f000 f8fc 	bl	800399c <_read_r>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	bfab      	itete	ge
 80037a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037aa:	89a3      	ldrhlt	r3, [r4, #12]
 80037ac:	181b      	addge	r3, r3, r0
 80037ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037b2:	bfac      	ite	ge
 80037b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80037b6:	81a3      	strhlt	r3, [r4, #12]
 80037b8:	bd10      	pop	{r4, pc}

080037ba <__swrite>:
 80037ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037be:	461f      	mov	r7, r3
 80037c0:	898b      	ldrh	r3, [r1, #12]
 80037c2:	05db      	lsls	r3, r3, #23
 80037c4:	4605      	mov	r5, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	4616      	mov	r6, r2
 80037ca:	d505      	bpl.n	80037d8 <__swrite+0x1e>
 80037cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d0:	2302      	movs	r3, #2
 80037d2:	2200      	movs	r2, #0
 80037d4:	f000 f8d0 	bl	8003978 <_lseek_r>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e2:	81a3      	strh	r3, [r4, #12]
 80037e4:	4632      	mov	r2, r6
 80037e6:	463b      	mov	r3, r7
 80037e8:	4628      	mov	r0, r5
 80037ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ee:	f000 b8e7 	b.w	80039c0 <_write_r>

080037f2 <__sseek>:
 80037f2:	b510      	push	{r4, lr}
 80037f4:	460c      	mov	r4, r1
 80037f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037fa:	f000 f8bd 	bl	8003978 <_lseek_r>
 80037fe:	1c43      	adds	r3, r0, #1
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	bf15      	itete	ne
 8003804:	6560      	strne	r0, [r4, #84]	; 0x54
 8003806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800380a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800380e:	81a3      	strheq	r3, [r4, #12]
 8003810:	bf18      	it	ne
 8003812:	81a3      	strhne	r3, [r4, #12]
 8003814:	bd10      	pop	{r4, pc}

08003816 <__sclose>:
 8003816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800381a:	f000 b89d 	b.w	8003958 <_close_r>

0800381e <__swbuf_r>:
 800381e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003820:	460e      	mov	r6, r1
 8003822:	4614      	mov	r4, r2
 8003824:	4605      	mov	r5, r0
 8003826:	b118      	cbz	r0, 8003830 <__swbuf_r+0x12>
 8003828:	6a03      	ldr	r3, [r0, #32]
 800382a:	b90b      	cbnz	r3, 8003830 <__swbuf_r+0x12>
 800382c:	f7ff fe5a 	bl	80034e4 <__sinit>
 8003830:	69a3      	ldr	r3, [r4, #24]
 8003832:	60a3      	str	r3, [r4, #8]
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	071a      	lsls	r2, r3, #28
 8003838:	d525      	bpl.n	8003886 <__swbuf_r+0x68>
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	b31b      	cbz	r3, 8003886 <__swbuf_r+0x68>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	6922      	ldr	r2, [r4, #16]
 8003842:	1a98      	subs	r0, r3, r2
 8003844:	6963      	ldr	r3, [r4, #20]
 8003846:	b2f6      	uxtb	r6, r6
 8003848:	4283      	cmp	r3, r0
 800384a:	4637      	mov	r7, r6
 800384c:	dc04      	bgt.n	8003858 <__swbuf_r+0x3a>
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f000 fd4f 	bl	80042f4 <_fflush_r>
 8003856:	b9e0      	cbnz	r0, 8003892 <__swbuf_r+0x74>
 8003858:	68a3      	ldr	r3, [r4, #8]
 800385a:	3b01      	subs	r3, #1
 800385c:	60a3      	str	r3, [r4, #8]
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	6022      	str	r2, [r4, #0]
 8003864:	701e      	strb	r6, [r3, #0]
 8003866:	6962      	ldr	r2, [r4, #20]
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	429a      	cmp	r2, r3
 800386c:	d004      	beq.n	8003878 <__swbuf_r+0x5a>
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	07db      	lsls	r3, r3, #31
 8003872:	d506      	bpl.n	8003882 <__swbuf_r+0x64>
 8003874:	2e0a      	cmp	r6, #10
 8003876:	d104      	bne.n	8003882 <__swbuf_r+0x64>
 8003878:	4621      	mov	r1, r4
 800387a:	4628      	mov	r0, r5
 800387c:	f000 fd3a 	bl	80042f4 <_fflush_r>
 8003880:	b938      	cbnz	r0, 8003892 <__swbuf_r+0x74>
 8003882:	4638      	mov	r0, r7
 8003884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003886:	4621      	mov	r1, r4
 8003888:	4628      	mov	r0, r5
 800388a:	f000 f805 	bl	8003898 <__swsetup_r>
 800388e:	2800      	cmp	r0, #0
 8003890:	d0d5      	beq.n	800383e <__swbuf_r+0x20>
 8003892:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003896:	e7f4      	b.n	8003882 <__swbuf_r+0x64>

08003898 <__swsetup_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <__swsetup_r+0xac>)
 800389c:	4605      	mov	r5, r0
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	460c      	mov	r4, r1
 80038a2:	b118      	cbz	r0, 80038ac <__swsetup_r+0x14>
 80038a4:	6a03      	ldr	r3, [r0, #32]
 80038a6:	b90b      	cbnz	r3, 80038ac <__swsetup_r+0x14>
 80038a8:	f7ff fe1c 	bl	80034e4 <__sinit>
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038b2:	0718      	lsls	r0, r3, #28
 80038b4:	d422      	bmi.n	80038fc <__swsetup_r+0x64>
 80038b6:	06d9      	lsls	r1, r3, #27
 80038b8:	d407      	bmi.n	80038ca <__swsetup_r+0x32>
 80038ba:	2309      	movs	r3, #9
 80038bc:	602b      	str	r3, [r5, #0]
 80038be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c8:	e034      	b.n	8003934 <__swsetup_r+0x9c>
 80038ca:	0758      	lsls	r0, r3, #29
 80038cc:	d512      	bpl.n	80038f4 <__swsetup_r+0x5c>
 80038ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038d0:	b141      	cbz	r1, 80038e4 <__swsetup_r+0x4c>
 80038d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038d6:	4299      	cmp	r1, r3
 80038d8:	d002      	beq.n	80038e0 <__swsetup_r+0x48>
 80038da:	4628      	mov	r0, r5
 80038dc:	f000 f8b0 	bl	8003a40 <_free_r>
 80038e0:	2300      	movs	r3, #0
 80038e2:	6363      	str	r3, [r4, #52]	; 0x34
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038ea:	81a3      	strh	r3, [r4, #12]
 80038ec:	2300      	movs	r3, #0
 80038ee:	6063      	str	r3, [r4, #4]
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	f043 0308 	orr.w	r3, r3, #8
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	6923      	ldr	r3, [r4, #16]
 80038fe:	b94b      	cbnz	r3, 8003914 <__swsetup_r+0x7c>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390a:	d003      	beq.n	8003914 <__swsetup_r+0x7c>
 800390c:	4621      	mov	r1, r4
 800390e:	4628      	mov	r0, r5
 8003910:	f000 fd3e 	bl	8004390 <__smakebuf_r>
 8003914:	89a0      	ldrh	r0, [r4, #12]
 8003916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800391a:	f010 0301 	ands.w	r3, r0, #1
 800391e:	d00a      	beq.n	8003936 <__swsetup_r+0x9e>
 8003920:	2300      	movs	r3, #0
 8003922:	60a3      	str	r3, [r4, #8]
 8003924:	6963      	ldr	r3, [r4, #20]
 8003926:	425b      	negs	r3, r3
 8003928:	61a3      	str	r3, [r4, #24]
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	b943      	cbnz	r3, 8003940 <__swsetup_r+0xa8>
 800392e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003932:	d1c4      	bne.n	80038be <__swsetup_r+0x26>
 8003934:	bd38      	pop	{r3, r4, r5, pc}
 8003936:	0781      	lsls	r1, r0, #30
 8003938:	bf58      	it	pl
 800393a:	6963      	ldrpl	r3, [r4, #20]
 800393c:	60a3      	str	r3, [r4, #8]
 800393e:	e7f4      	b.n	800392a <__swsetup_r+0x92>
 8003940:	2000      	movs	r0, #0
 8003942:	e7f7      	b.n	8003934 <__swsetup_r+0x9c>
 8003944:	200000a8 	.word	0x200000a8

08003948 <memset>:
 8003948:	4402      	add	r2, r0
 800394a:	4603      	mov	r3, r0
 800394c:	4293      	cmp	r3, r2
 800394e:	d100      	bne.n	8003952 <memset+0xa>
 8003950:	4770      	bx	lr
 8003952:	f803 1b01 	strb.w	r1, [r3], #1
 8003956:	e7f9      	b.n	800394c <memset+0x4>

08003958 <_close_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4d06      	ldr	r5, [pc, #24]	; (8003974 <_close_r+0x1c>)
 800395c:	2300      	movs	r3, #0
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	f7fd f885 	bl	8000a72 <_close>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_close_r+0x1a>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_close_r+0x1a>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	200002b4 	.word	0x200002b4

08003978 <_lseek_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4d07      	ldr	r5, [pc, #28]	; (8003998 <_lseek_r+0x20>)
 800397c:	4604      	mov	r4, r0
 800397e:	4608      	mov	r0, r1
 8003980:	4611      	mov	r1, r2
 8003982:	2200      	movs	r2, #0
 8003984:	602a      	str	r2, [r5, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f7fd f89a 	bl	8000ac0 <_lseek>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_lseek_r+0x1e>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_lseek_r+0x1e>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	200002b4 	.word	0x200002b4

0800399c <_read_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d07      	ldr	r5, [pc, #28]	; (80039bc <_read_r+0x20>)
 80039a0:	4604      	mov	r4, r0
 80039a2:	4608      	mov	r0, r1
 80039a4:	4611      	mov	r1, r2
 80039a6:	2200      	movs	r2, #0
 80039a8:	602a      	str	r2, [r5, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f7fd f828 	bl	8000a00 <_read>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_read_r+0x1e>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_read_r+0x1e>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	200002b4 	.word	0x200002b4

080039c0 <_write_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d07      	ldr	r5, [pc, #28]	; (80039e0 <_write_r+0x20>)
 80039c4:	4604      	mov	r4, r0
 80039c6:	4608      	mov	r0, r1
 80039c8:	4611      	mov	r1, r2
 80039ca:	2200      	movs	r2, #0
 80039cc:	602a      	str	r2, [r5, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f7fd f833 	bl	8000a3a <_write>
 80039d4:	1c43      	adds	r3, r0, #1
 80039d6:	d102      	bne.n	80039de <_write_r+0x1e>
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	b103      	cbz	r3, 80039de <_write_r+0x1e>
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	200002b4 	.word	0x200002b4

080039e4 <__errno>:
 80039e4:	4b01      	ldr	r3, [pc, #4]	; (80039ec <__errno+0x8>)
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	200000a8 	.word	0x200000a8

080039f0 <__libc_init_array>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4d0d      	ldr	r5, [pc, #52]	; (8003a28 <__libc_init_array+0x38>)
 80039f4:	4c0d      	ldr	r4, [pc, #52]	; (8003a2c <__libc_init_array+0x3c>)
 80039f6:	1b64      	subs	r4, r4, r5
 80039f8:	10a4      	asrs	r4, r4, #2
 80039fa:	2600      	movs	r6, #0
 80039fc:	42a6      	cmp	r6, r4
 80039fe:	d109      	bne.n	8003a14 <__libc_init_array+0x24>
 8003a00:	4d0b      	ldr	r5, [pc, #44]	; (8003a30 <__libc_init_array+0x40>)
 8003a02:	4c0c      	ldr	r4, [pc, #48]	; (8003a34 <__libc_init_array+0x44>)
 8003a04:	f000 fd32 	bl	800446c <_init>
 8003a08:	1b64      	subs	r4, r4, r5
 8003a0a:	10a4      	asrs	r4, r4, #2
 8003a0c:	2600      	movs	r6, #0
 8003a0e:	42a6      	cmp	r6, r4
 8003a10:	d105      	bne.n	8003a1e <__libc_init_array+0x2e>
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a18:	4798      	blx	r3
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	e7ee      	b.n	80039fc <__libc_init_array+0xc>
 8003a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a22:	4798      	blx	r3
 8003a24:	3601      	adds	r6, #1
 8003a26:	e7f2      	b.n	8003a0e <__libc_init_array+0x1e>
 8003a28:	08004794 	.word	0x08004794
 8003a2c:	08004794 	.word	0x08004794
 8003a30:	08004794 	.word	0x08004794
 8003a34:	08004798 	.word	0x08004798

08003a38 <__retarget_lock_init_recursive>:
 8003a38:	4770      	bx	lr

08003a3a <__retarget_lock_acquire_recursive>:
 8003a3a:	4770      	bx	lr

08003a3c <__retarget_lock_release_recursive>:
 8003a3c:	4770      	bx	lr
	...

08003a40 <_free_r>:
 8003a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a42:	2900      	cmp	r1, #0
 8003a44:	d044      	beq.n	8003ad0 <_free_r+0x90>
 8003a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a4a:	9001      	str	r0, [sp, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8003a52:	bfb8      	it	lt
 8003a54:	18e4      	addlt	r4, r4, r3
 8003a56:	f000 f8e7 	bl	8003c28 <__malloc_lock>
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <_free_r+0x94>)
 8003a5c:	9801      	ldr	r0, [sp, #4]
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	b933      	cbnz	r3, 8003a70 <_free_r+0x30>
 8003a62:	6063      	str	r3, [r4, #4]
 8003a64:	6014      	str	r4, [r2, #0]
 8003a66:	b003      	add	sp, #12
 8003a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a6c:	f000 b8e2 	b.w	8003c34 <__malloc_unlock>
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	d908      	bls.n	8003a86 <_free_r+0x46>
 8003a74:	6825      	ldr	r5, [r4, #0]
 8003a76:	1961      	adds	r1, r4, r5
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	bf01      	itttt	eq
 8003a7c:	6819      	ldreq	r1, [r3, #0]
 8003a7e:	685b      	ldreq	r3, [r3, #4]
 8003a80:	1949      	addeq	r1, r1, r5
 8003a82:	6021      	streq	r1, [r4, #0]
 8003a84:	e7ed      	b.n	8003a62 <_free_r+0x22>
 8003a86:	461a      	mov	r2, r3
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	b10b      	cbz	r3, 8003a90 <_free_r+0x50>
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d9fa      	bls.n	8003a86 <_free_r+0x46>
 8003a90:	6811      	ldr	r1, [r2, #0]
 8003a92:	1855      	adds	r5, r2, r1
 8003a94:	42a5      	cmp	r5, r4
 8003a96:	d10b      	bne.n	8003ab0 <_free_r+0x70>
 8003a98:	6824      	ldr	r4, [r4, #0]
 8003a9a:	4421      	add	r1, r4
 8003a9c:	1854      	adds	r4, r2, r1
 8003a9e:	42a3      	cmp	r3, r4
 8003aa0:	6011      	str	r1, [r2, #0]
 8003aa2:	d1e0      	bne.n	8003a66 <_free_r+0x26>
 8003aa4:	681c      	ldr	r4, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	6053      	str	r3, [r2, #4]
 8003aaa:	440c      	add	r4, r1
 8003aac:	6014      	str	r4, [r2, #0]
 8003aae:	e7da      	b.n	8003a66 <_free_r+0x26>
 8003ab0:	d902      	bls.n	8003ab8 <_free_r+0x78>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	6003      	str	r3, [r0, #0]
 8003ab6:	e7d6      	b.n	8003a66 <_free_r+0x26>
 8003ab8:	6825      	ldr	r5, [r4, #0]
 8003aba:	1961      	adds	r1, r4, r5
 8003abc:	428b      	cmp	r3, r1
 8003abe:	bf04      	itt	eq
 8003ac0:	6819      	ldreq	r1, [r3, #0]
 8003ac2:	685b      	ldreq	r3, [r3, #4]
 8003ac4:	6063      	str	r3, [r4, #4]
 8003ac6:	bf04      	itt	eq
 8003ac8:	1949      	addeq	r1, r1, r5
 8003aca:	6021      	streq	r1, [r4, #0]
 8003acc:	6054      	str	r4, [r2, #4]
 8003ace:	e7ca      	b.n	8003a66 <_free_r+0x26>
 8003ad0:	b003      	add	sp, #12
 8003ad2:	bd30      	pop	{r4, r5, pc}
 8003ad4:	200002bc 	.word	0x200002bc

08003ad8 <malloc>:
 8003ad8:	4b02      	ldr	r3, [pc, #8]	; (8003ae4 <malloc+0xc>)
 8003ada:	4601      	mov	r1, r0
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	f000 b823 	b.w	8003b28 <_malloc_r>
 8003ae2:	bf00      	nop
 8003ae4:	200000a8 	.word	0x200000a8

08003ae8 <sbrk_aligned>:
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	4e0e      	ldr	r6, [pc, #56]	; (8003b24 <sbrk_aligned+0x3c>)
 8003aec:	460c      	mov	r4, r1
 8003aee:	6831      	ldr	r1, [r6, #0]
 8003af0:	4605      	mov	r5, r0
 8003af2:	b911      	cbnz	r1, 8003afa <sbrk_aligned+0x12>
 8003af4:	f000 fcaa 	bl	800444c <_sbrk_r>
 8003af8:	6030      	str	r0, [r6, #0]
 8003afa:	4621      	mov	r1, r4
 8003afc:	4628      	mov	r0, r5
 8003afe:	f000 fca5 	bl	800444c <_sbrk_r>
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	d00a      	beq.n	8003b1c <sbrk_aligned+0x34>
 8003b06:	1cc4      	adds	r4, r0, #3
 8003b08:	f024 0403 	bic.w	r4, r4, #3
 8003b0c:	42a0      	cmp	r0, r4
 8003b0e:	d007      	beq.n	8003b20 <sbrk_aligned+0x38>
 8003b10:	1a21      	subs	r1, r4, r0
 8003b12:	4628      	mov	r0, r5
 8003b14:	f000 fc9a 	bl	800444c <_sbrk_r>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d101      	bne.n	8003b20 <sbrk_aligned+0x38>
 8003b1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003b20:	4620      	mov	r0, r4
 8003b22:	bd70      	pop	{r4, r5, r6, pc}
 8003b24:	200002c0 	.word	0x200002c0

08003b28 <_malloc_r>:
 8003b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b2c:	1ccd      	adds	r5, r1, #3
 8003b2e:	f025 0503 	bic.w	r5, r5, #3
 8003b32:	3508      	adds	r5, #8
 8003b34:	2d0c      	cmp	r5, #12
 8003b36:	bf38      	it	cc
 8003b38:	250c      	movcc	r5, #12
 8003b3a:	2d00      	cmp	r5, #0
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	db01      	blt.n	8003b44 <_malloc_r+0x1c>
 8003b40:	42a9      	cmp	r1, r5
 8003b42:	d905      	bls.n	8003b50 <_malloc_r+0x28>
 8003b44:	230c      	movs	r3, #12
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	2600      	movs	r6, #0
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c24 <_malloc_r+0xfc>
 8003b54:	f000 f868 	bl	8003c28 <__malloc_lock>
 8003b58:	f8d8 3000 	ldr.w	r3, [r8]
 8003b5c:	461c      	mov	r4, r3
 8003b5e:	bb5c      	cbnz	r4, 8003bb8 <_malloc_r+0x90>
 8003b60:	4629      	mov	r1, r5
 8003b62:	4638      	mov	r0, r7
 8003b64:	f7ff ffc0 	bl	8003ae8 <sbrk_aligned>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	d155      	bne.n	8003c1a <_malloc_r+0xf2>
 8003b6e:	f8d8 4000 	ldr.w	r4, [r8]
 8003b72:	4626      	mov	r6, r4
 8003b74:	2e00      	cmp	r6, #0
 8003b76:	d145      	bne.n	8003c04 <_malloc_r+0xdc>
 8003b78:	2c00      	cmp	r4, #0
 8003b7a:	d048      	beq.n	8003c0e <_malloc_r+0xe6>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	4631      	mov	r1, r6
 8003b80:	4638      	mov	r0, r7
 8003b82:	eb04 0903 	add.w	r9, r4, r3
 8003b86:	f000 fc61 	bl	800444c <_sbrk_r>
 8003b8a:	4581      	cmp	r9, r0
 8003b8c:	d13f      	bne.n	8003c0e <_malloc_r+0xe6>
 8003b8e:	6821      	ldr	r1, [r4, #0]
 8003b90:	1a6d      	subs	r5, r5, r1
 8003b92:	4629      	mov	r1, r5
 8003b94:	4638      	mov	r0, r7
 8003b96:	f7ff ffa7 	bl	8003ae8 <sbrk_aligned>
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d037      	beq.n	8003c0e <_malloc_r+0xe6>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	442b      	add	r3, r5
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d038      	beq.n	8003c1e <_malloc_r+0xf6>
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	42a2      	cmp	r2, r4
 8003bb0:	d12b      	bne.n	8003c0a <_malloc_r+0xe2>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	e00f      	b.n	8003bd8 <_malloc_r+0xb0>
 8003bb8:	6822      	ldr	r2, [r4, #0]
 8003bba:	1b52      	subs	r2, r2, r5
 8003bbc:	d41f      	bmi.n	8003bfe <_malloc_r+0xd6>
 8003bbe:	2a0b      	cmp	r2, #11
 8003bc0:	d917      	bls.n	8003bf2 <_malloc_r+0xca>
 8003bc2:	1961      	adds	r1, r4, r5
 8003bc4:	42a3      	cmp	r3, r4
 8003bc6:	6025      	str	r5, [r4, #0]
 8003bc8:	bf18      	it	ne
 8003bca:	6059      	strne	r1, [r3, #4]
 8003bcc:	6863      	ldr	r3, [r4, #4]
 8003bce:	bf08      	it	eq
 8003bd0:	f8c8 1000 	streq.w	r1, [r8]
 8003bd4:	5162      	str	r2, [r4, r5]
 8003bd6:	604b      	str	r3, [r1, #4]
 8003bd8:	4638      	mov	r0, r7
 8003bda:	f104 060b 	add.w	r6, r4, #11
 8003bde:	f000 f829 	bl	8003c34 <__malloc_unlock>
 8003be2:	f026 0607 	bic.w	r6, r6, #7
 8003be6:	1d23      	adds	r3, r4, #4
 8003be8:	1af2      	subs	r2, r6, r3
 8003bea:	d0ae      	beq.n	8003b4a <_malloc_r+0x22>
 8003bec:	1b9b      	subs	r3, r3, r6
 8003bee:	50a3      	str	r3, [r4, r2]
 8003bf0:	e7ab      	b.n	8003b4a <_malloc_r+0x22>
 8003bf2:	42a3      	cmp	r3, r4
 8003bf4:	6862      	ldr	r2, [r4, #4]
 8003bf6:	d1dd      	bne.n	8003bb4 <_malloc_r+0x8c>
 8003bf8:	f8c8 2000 	str.w	r2, [r8]
 8003bfc:	e7ec      	b.n	8003bd8 <_malloc_r+0xb0>
 8003bfe:	4623      	mov	r3, r4
 8003c00:	6864      	ldr	r4, [r4, #4]
 8003c02:	e7ac      	b.n	8003b5e <_malloc_r+0x36>
 8003c04:	4634      	mov	r4, r6
 8003c06:	6876      	ldr	r6, [r6, #4]
 8003c08:	e7b4      	b.n	8003b74 <_malloc_r+0x4c>
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	e7cc      	b.n	8003ba8 <_malloc_r+0x80>
 8003c0e:	230c      	movs	r3, #12
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4638      	mov	r0, r7
 8003c14:	f000 f80e 	bl	8003c34 <__malloc_unlock>
 8003c18:	e797      	b.n	8003b4a <_malloc_r+0x22>
 8003c1a:	6025      	str	r5, [r4, #0]
 8003c1c:	e7dc      	b.n	8003bd8 <_malloc_r+0xb0>
 8003c1e:	605b      	str	r3, [r3, #4]
 8003c20:	deff      	udf	#255	; 0xff
 8003c22:	bf00      	nop
 8003c24:	200002bc 	.word	0x200002bc

08003c28 <__malloc_lock>:
 8003c28:	4801      	ldr	r0, [pc, #4]	; (8003c30 <__malloc_lock+0x8>)
 8003c2a:	f7ff bf06 	b.w	8003a3a <__retarget_lock_acquire_recursive>
 8003c2e:	bf00      	nop
 8003c30:	200002b8 	.word	0x200002b8

08003c34 <__malloc_unlock>:
 8003c34:	4801      	ldr	r0, [pc, #4]	; (8003c3c <__malloc_unlock+0x8>)
 8003c36:	f7ff bf01 	b.w	8003a3c <__retarget_lock_release_recursive>
 8003c3a:	bf00      	nop
 8003c3c:	200002b8 	.word	0x200002b8

08003c40 <__sfputc_r>:
 8003c40:	6893      	ldr	r3, [r2, #8]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	b410      	push	{r4}
 8003c48:	6093      	str	r3, [r2, #8]
 8003c4a:	da08      	bge.n	8003c5e <__sfputc_r+0x1e>
 8003c4c:	6994      	ldr	r4, [r2, #24]
 8003c4e:	42a3      	cmp	r3, r4
 8003c50:	db01      	blt.n	8003c56 <__sfputc_r+0x16>
 8003c52:	290a      	cmp	r1, #10
 8003c54:	d103      	bne.n	8003c5e <__sfputc_r+0x1e>
 8003c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c5a:	f7ff bde0 	b.w	800381e <__swbuf_r>
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	1c58      	adds	r0, r3, #1
 8003c62:	6010      	str	r0, [r2, #0]
 8003c64:	7019      	strb	r1, [r3, #0]
 8003c66:	4608      	mov	r0, r1
 8003c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <__sfputs_r>:
 8003c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c70:	4606      	mov	r6, r0
 8003c72:	460f      	mov	r7, r1
 8003c74:	4614      	mov	r4, r2
 8003c76:	18d5      	adds	r5, r2, r3
 8003c78:	42ac      	cmp	r4, r5
 8003c7a:	d101      	bne.n	8003c80 <__sfputs_r+0x12>
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	e007      	b.n	8003c90 <__sfputs_r+0x22>
 8003c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c84:	463a      	mov	r2, r7
 8003c86:	4630      	mov	r0, r6
 8003c88:	f7ff ffda 	bl	8003c40 <__sfputc_r>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d1f3      	bne.n	8003c78 <__sfputs_r+0xa>
 8003c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c94 <_vfiprintf_r>:
 8003c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c98:	460d      	mov	r5, r1
 8003c9a:	b09d      	sub	sp, #116	; 0x74
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	4698      	mov	r8, r3
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	b118      	cbz	r0, 8003cac <_vfiprintf_r+0x18>
 8003ca4:	6a03      	ldr	r3, [r0, #32]
 8003ca6:	b90b      	cbnz	r3, 8003cac <_vfiprintf_r+0x18>
 8003ca8:	f7ff fc1c 	bl	80034e4 <__sinit>
 8003cac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cae:	07d9      	lsls	r1, r3, #31
 8003cb0:	d405      	bmi.n	8003cbe <_vfiprintf_r+0x2a>
 8003cb2:	89ab      	ldrh	r3, [r5, #12]
 8003cb4:	059a      	lsls	r2, r3, #22
 8003cb6:	d402      	bmi.n	8003cbe <_vfiprintf_r+0x2a>
 8003cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cba:	f7ff febe 	bl	8003a3a <__retarget_lock_acquire_recursive>
 8003cbe:	89ab      	ldrh	r3, [r5, #12]
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	d501      	bpl.n	8003cc8 <_vfiprintf_r+0x34>
 8003cc4:	692b      	ldr	r3, [r5, #16]
 8003cc6:	b99b      	cbnz	r3, 8003cf0 <_vfiprintf_r+0x5c>
 8003cc8:	4629      	mov	r1, r5
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f7ff fde4 	bl	8003898 <__swsetup_r>
 8003cd0:	b170      	cbz	r0, 8003cf0 <_vfiprintf_r+0x5c>
 8003cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cd4:	07dc      	lsls	r4, r3, #31
 8003cd6:	d504      	bpl.n	8003ce2 <_vfiprintf_r+0x4e>
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cdc:	b01d      	add	sp, #116	; 0x74
 8003cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce2:	89ab      	ldrh	r3, [r5, #12]
 8003ce4:	0598      	lsls	r0, r3, #22
 8003ce6:	d4f7      	bmi.n	8003cd8 <_vfiprintf_r+0x44>
 8003ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cea:	f7ff fea7 	bl	8003a3c <__retarget_lock_release_recursive>
 8003cee:	e7f3      	b.n	8003cd8 <_vfiprintf_r+0x44>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cfe:	2330      	movs	r3, #48	; 0x30
 8003d00:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003eb4 <_vfiprintf_r+0x220>
 8003d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d08:	f04f 0901 	mov.w	r9, #1
 8003d0c:	4623      	mov	r3, r4
 8003d0e:	469a      	mov	sl, r3
 8003d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d14:	b10a      	cbz	r2, 8003d1a <_vfiprintf_r+0x86>
 8003d16:	2a25      	cmp	r2, #37	; 0x25
 8003d18:	d1f9      	bne.n	8003d0e <_vfiprintf_r+0x7a>
 8003d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8003d1e:	d00b      	beq.n	8003d38 <_vfiprintf_r+0xa4>
 8003d20:	465b      	mov	r3, fp
 8003d22:	4622      	mov	r2, r4
 8003d24:	4629      	mov	r1, r5
 8003d26:	4630      	mov	r0, r6
 8003d28:	f7ff ffa1 	bl	8003c6e <__sfputs_r>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	f000 80a9 	beq.w	8003e84 <_vfiprintf_r+0x1f0>
 8003d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d34:	445a      	add	r2, fp
 8003d36:	9209      	str	r2, [sp, #36]	; 0x24
 8003d38:	f89a 3000 	ldrb.w	r3, [sl]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a1 	beq.w	8003e84 <_vfiprintf_r+0x1f0>
 8003d42:	2300      	movs	r3, #0
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d4c:	f10a 0a01 	add.w	sl, sl, #1
 8003d50:	9304      	str	r3, [sp, #16]
 8003d52:	9307      	str	r3, [sp, #28]
 8003d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d58:	931a      	str	r3, [sp, #104]	; 0x68
 8003d5a:	4654      	mov	r4, sl
 8003d5c:	2205      	movs	r2, #5
 8003d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d62:	4854      	ldr	r0, [pc, #336]	; (8003eb4 <_vfiprintf_r+0x220>)
 8003d64:	f7fc fa3c 	bl	80001e0 <memchr>
 8003d68:	9a04      	ldr	r2, [sp, #16]
 8003d6a:	b9d8      	cbnz	r0, 8003da4 <_vfiprintf_r+0x110>
 8003d6c:	06d1      	lsls	r1, r2, #27
 8003d6e:	bf44      	itt	mi
 8003d70:	2320      	movmi	r3, #32
 8003d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d76:	0713      	lsls	r3, r2, #28
 8003d78:	bf44      	itt	mi
 8003d7a:	232b      	movmi	r3, #43	; 0x2b
 8003d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d80:	f89a 3000 	ldrb.w	r3, [sl]
 8003d84:	2b2a      	cmp	r3, #42	; 0x2a
 8003d86:	d015      	beq.n	8003db4 <_vfiprintf_r+0x120>
 8003d88:	9a07      	ldr	r2, [sp, #28]
 8003d8a:	4654      	mov	r4, sl
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	f04f 0c0a 	mov.w	ip, #10
 8003d92:	4621      	mov	r1, r4
 8003d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d98:	3b30      	subs	r3, #48	; 0x30
 8003d9a:	2b09      	cmp	r3, #9
 8003d9c:	d94d      	bls.n	8003e3a <_vfiprintf_r+0x1a6>
 8003d9e:	b1b0      	cbz	r0, 8003dce <_vfiprintf_r+0x13a>
 8003da0:	9207      	str	r2, [sp, #28]
 8003da2:	e014      	b.n	8003dce <_vfiprintf_r+0x13a>
 8003da4:	eba0 0308 	sub.w	r3, r0, r8
 8003da8:	fa09 f303 	lsl.w	r3, r9, r3
 8003dac:	4313      	orrs	r3, r2
 8003dae:	9304      	str	r3, [sp, #16]
 8003db0:	46a2      	mov	sl, r4
 8003db2:	e7d2      	b.n	8003d5a <_vfiprintf_r+0xc6>
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	1d19      	adds	r1, r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	9103      	str	r1, [sp, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bfbb      	ittet	lt
 8003dc0:	425b      	neglt	r3, r3
 8003dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8003dc6:	9307      	strge	r3, [sp, #28]
 8003dc8:	9307      	strlt	r3, [sp, #28]
 8003dca:	bfb8      	it	lt
 8003dcc:	9204      	strlt	r2, [sp, #16]
 8003dce:	7823      	ldrb	r3, [r4, #0]
 8003dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8003dd2:	d10c      	bne.n	8003dee <_vfiprintf_r+0x15a>
 8003dd4:	7863      	ldrb	r3, [r4, #1]
 8003dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd8:	d134      	bne.n	8003e44 <_vfiprintf_r+0x1b0>
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	9203      	str	r2, [sp, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfb8      	it	lt
 8003de6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003dea:	3402      	adds	r4, #2
 8003dec:	9305      	str	r3, [sp, #20]
 8003dee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003ec4 <_vfiprintf_r+0x230>
 8003df2:	7821      	ldrb	r1, [r4, #0]
 8003df4:	2203      	movs	r2, #3
 8003df6:	4650      	mov	r0, sl
 8003df8:	f7fc f9f2 	bl	80001e0 <memchr>
 8003dfc:	b138      	cbz	r0, 8003e0e <_vfiprintf_r+0x17a>
 8003dfe:	9b04      	ldr	r3, [sp, #16]
 8003e00:	eba0 000a 	sub.w	r0, r0, sl
 8003e04:	2240      	movs	r2, #64	; 0x40
 8003e06:	4082      	lsls	r2, r0
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	3401      	adds	r4, #1
 8003e0c:	9304      	str	r3, [sp, #16]
 8003e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e12:	4829      	ldr	r0, [pc, #164]	; (8003eb8 <_vfiprintf_r+0x224>)
 8003e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e18:	2206      	movs	r2, #6
 8003e1a:	f7fc f9e1 	bl	80001e0 <memchr>
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	d03f      	beq.n	8003ea2 <_vfiprintf_r+0x20e>
 8003e22:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <_vfiprintf_r+0x228>)
 8003e24:	bb1b      	cbnz	r3, 8003e6e <_vfiprintf_r+0x1da>
 8003e26:	9b03      	ldr	r3, [sp, #12]
 8003e28:	3307      	adds	r3, #7
 8003e2a:	f023 0307 	bic.w	r3, r3, #7
 8003e2e:	3308      	adds	r3, #8
 8003e30:	9303      	str	r3, [sp, #12]
 8003e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e34:	443b      	add	r3, r7
 8003e36:	9309      	str	r3, [sp, #36]	; 0x24
 8003e38:	e768      	b.n	8003d0c <_vfiprintf_r+0x78>
 8003e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e3e:	460c      	mov	r4, r1
 8003e40:	2001      	movs	r0, #1
 8003e42:	e7a6      	b.n	8003d92 <_vfiprintf_r+0xfe>
 8003e44:	2300      	movs	r3, #0
 8003e46:	3401      	adds	r4, #1
 8003e48:	9305      	str	r3, [sp, #20]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	f04f 0c0a 	mov.w	ip, #10
 8003e50:	4620      	mov	r0, r4
 8003e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e56:	3a30      	subs	r2, #48	; 0x30
 8003e58:	2a09      	cmp	r2, #9
 8003e5a:	d903      	bls.n	8003e64 <_vfiprintf_r+0x1d0>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0c6      	beq.n	8003dee <_vfiprintf_r+0x15a>
 8003e60:	9105      	str	r1, [sp, #20]
 8003e62:	e7c4      	b.n	8003dee <_vfiprintf_r+0x15a>
 8003e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e68:	4604      	mov	r4, r0
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e7f0      	b.n	8003e50 <_vfiprintf_r+0x1bc>
 8003e6e:	ab03      	add	r3, sp, #12
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	462a      	mov	r2, r5
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <_vfiprintf_r+0x22c>)
 8003e76:	a904      	add	r1, sp, #16
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f3af 8000 	nop.w
 8003e7e:	4607      	mov	r7, r0
 8003e80:	1c78      	adds	r0, r7, #1
 8003e82:	d1d6      	bne.n	8003e32 <_vfiprintf_r+0x19e>
 8003e84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e86:	07d9      	lsls	r1, r3, #31
 8003e88:	d405      	bmi.n	8003e96 <_vfiprintf_r+0x202>
 8003e8a:	89ab      	ldrh	r3, [r5, #12]
 8003e8c:	059a      	lsls	r2, r3, #22
 8003e8e:	d402      	bmi.n	8003e96 <_vfiprintf_r+0x202>
 8003e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e92:	f7ff fdd3 	bl	8003a3c <__retarget_lock_release_recursive>
 8003e96:	89ab      	ldrh	r3, [r5, #12]
 8003e98:	065b      	lsls	r3, r3, #25
 8003e9a:	f53f af1d 	bmi.w	8003cd8 <_vfiprintf_r+0x44>
 8003e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ea0:	e71c      	b.n	8003cdc <_vfiprintf_r+0x48>
 8003ea2:	ab03      	add	r3, sp, #12
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	462a      	mov	r2, r5
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <_vfiprintf_r+0x22c>)
 8003eaa:	a904      	add	r1, sp, #16
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 f879 	bl	8003fa4 <_printf_i>
 8003eb2:	e7e4      	b.n	8003e7e <_vfiprintf_r+0x1ea>
 8003eb4:	08004758 	.word	0x08004758
 8003eb8:	08004762 	.word	0x08004762
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	08003c6f 	.word	0x08003c6f
 8003ec4:	0800475e 	.word	0x0800475e

08003ec8 <_printf_common>:
 8003ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ecc:	4616      	mov	r6, r2
 8003ece:	4699      	mov	r9, r3
 8003ed0:	688a      	ldr	r2, [r1, #8]
 8003ed2:	690b      	ldr	r3, [r1, #16]
 8003ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bfb8      	it	lt
 8003edc:	4613      	movlt	r3, r2
 8003ede:	6033      	str	r3, [r6, #0]
 8003ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	b10a      	cbz	r2, 8003eee <_printf_common+0x26>
 8003eea:	3301      	adds	r3, #1
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	0699      	lsls	r1, r3, #26
 8003ef2:	bf42      	ittt	mi
 8003ef4:	6833      	ldrmi	r3, [r6, #0]
 8003ef6:	3302      	addmi	r3, #2
 8003ef8:	6033      	strmi	r3, [r6, #0]
 8003efa:	6825      	ldr	r5, [r4, #0]
 8003efc:	f015 0506 	ands.w	r5, r5, #6
 8003f00:	d106      	bne.n	8003f10 <_printf_common+0x48>
 8003f02:	f104 0a19 	add.w	sl, r4, #25
 8003f06:	68e3      	ldr	r3, [r4, #12]
 8003f08:	6832      	ldr	r2, [r6, #0]
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	42ab      	cmp	r3, r5
 8003f0e:	dc26      	bgt.n	8003f5e <_printf_common+0x96>
 8003f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f14:	1e13      	subs	r3, r2, #0
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	bf18      	it	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	0692      	lsls	r2, r2, #26
 8003f1e:	d42b      	bmi.n	8003f78 <_printf_common+0xb0>
 8003f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f24:	4649      	mov	r1, r9
 8003f26:	4638      	mov	r0, r7
 8003f28:	47c0      	blx	r8
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d01e      	beq.n	8003f6c <_printf_common+0xa4>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	6922      	ldr	r2, [r4, #16]
 8003f32:	f003 0306 	and.w	r3, r3, #6
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	bf02      	ittt	eq
 8003f3a:	68e5      	ldreq	r5, [r4, #12]
 8003f3c:	6833      	ldreq	r3, [r6, #0]
 8003f3e:	1aed      	subeq	r5, r5, r3
 8003f40:	68a3      	ldr	r3, [r4, #8]
 8003f42:	bf0c      	ite	eq
 8003f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f48:	2500      	movne	r5, #0
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	bfc4      	itt	gt
 8003f4e:	1a9b      	subgt	r3, r3, r2
 8003f50:	18ed      	addgt	r5, r5, r3
 8003f52:	2600      	movs	r6, #0
 8003f54:	341a      	adds	r4, #26
 8003f56:	42b5      	cmp	r5, r6
 8003f58:	d11a      	bne.n	8003f90 <_printf_common+0xc8>
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	e008      	b.n	8003f70 <_printf_common+0xa8>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4652      	mov	r2, sl
 8003f62:	4649      	mov	r1, r9
 8003f64:	4638      	mov	r0, r7
 8003f66:	47c0      	blx	r8
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d103      	bne.n	8003f74 <_printf_common+0xac>
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	3501      	adds	r5, #1
 8003f76:	e7c6      	b.n	8003f06 <_printf_common+0x3e>
 8003f78:	18e1      	adds	r1, r4, r3
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	2030      	movs	r0, #48	; 0x30
 8003f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f82:	4422      	add	r2, r4
 8003f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	e7c7      	b.n	8003f20 <_printf_common+0x58>
 8003f90:	2301      	movs	r3, #1
 8003f92:	4622      	mov	r2, r4
 8003f94:	4649      	mov	r1, r9
 8003f96:	4638      	mov	r0, r7
 8003f98:	47c0      	blx	r8
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d0e6      	beq.n	8003f6c <_printf_common+0xa4>
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7d9      	b.n	8003f56 <_printf_common+0x8e>
	...

08003fa4 <_printf_i>:
 8003fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	7e0f      	ldrb	r7, [r1, #24]
 8003faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fac:	2f78      	cmp	r7, #120	; 0x78
 8003fae:	4691      	mov	r9, r2
 8003fb0:	4680      	mov	r8, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	469a      	mov	sl, r3
 8003fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fba:	d807      	bhi.n	8003fcc <_printf_i+0x28>
 8003fbc:	2f62      	cmp	r7, #98	; 0x62
 8003fbe:	d80a      	bhi.n	8003fd6 <_printf_i+0x32>
 8003fc0:	2f00      	cmp	r7, #0
 8003fc2:	f000 80d4 	beq.w	800416e <_printf_i+0x1ca>
 8003fc6:	2f58      	cmp	r7, #88	; 0x58
 8003fc8:	f000 80c0 	beq.w	800414c <_printf_i+0x1a8>
 8003fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fd4:	e03a      	b.n	800404c <_printf_i+0xa8>
 8003fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fda:	2b15      	cmp	r3, #21
 8003fdc:	d8f6      	bhi.n	8003fcc <_printf_i+0x28>
 8003fde:	a101      	add	r1, pc, #4	; (adr r1, 8003fe4 <_printf_i+0x40>)
 8003fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fe4:	0800403d 	.word	0x0800403d
 8003fe8:	08004051 	.word	0x08004051
 8003fec:	08003fcd 	.word	0x08003fcd
 8003ff0:	08003fcd 	.word	0x08003fcd
 8003ff4:	08003fcd 	.word	0x08003fcd
 8003ff8:	08003fcd 	.word	0x08003fcd
 8003ffc:	08004051 	.word	0x08004051
 8004000:	08003fcd 	.word	0x08003fcd
 8004004:	08003fcd 	.word	0x08003fcd
 8004008:	08003fcd 	.word	0x08003fcd
 800400c:	08003fcd 	.word	0x08003fcd
 8004010:	08004155 	.word	0x08004155
 8004014:	0800407d 	.word	0x0800407d
 8004018:	0800410f 	.word	0x0800410f
 800401c:	08003fcd 	.word	0x08003fcd
 8004020:	08003fcd 	.word	0x08003fcd
 8004024:	08004177 	.word	0x08004177
 8004028:	08003fcd 	.word	0x08003fcd
 800402c:	0800407d 	.word	0x0800407d
 8004030:	08003fcd 	.word	0x08003fcd
 8004034:	08003fcd 	.word	0x08003fcd
 8004038:	08004117 	.word	0x08004117
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	1d1a      	adds	r2, r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	602a      	str	r2, [r5, #0]
 8004044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800404c:	2301      	movs	r3, #1
 800404e:	e09f      	b.n	8004190 <_printf_i+0x1ec>
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	682b      	ldr	r3, [r5, #0]
 8004054:	0607      	lsls	r7, r0, #24
 8004056:	f103 0104 	add.w	r1, r3, #4
 800405a:	6029      	str	r1, [r5, #0]
 800405c:	d501      	bpl.n	8004062 <_printf_i+0xbe>
 800405e:	681e      	ldr	r6, [r3, #0]
 8004060:	e003      	b.n	800406a <_printf_i+0xc6>
 8004062:	0646      	lsls	r6, r0, #25
 8004064:	d5fb      	bpl.n	800405e <_printf_i+0xba>
 8004066:	f9b3 6000 	ldrsh.w	r6, [r3]
 800406a:	2e00      	cmp	r6, #0
 800406c:	da03      	bge.n	8004076 <_printf_i+0xd2>
 800406e:	232d      	movs	r3, #45	; 0x2d
 8004070:	4276      	negs	r6, r6
 8004072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004076:	485a      	ldr	r0, [pc, #360]	; (80041e0 <_printf_i+0x23c>)
 8004078:	230a      	movs	r3, #10
 800407a:	e012      	b.n	80040a2 <_printf_i+0xfe>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	1d19      	adds	r1, r3, #4
 8004082:	6029      	str	r1, [r5, #0]
 8004084:	0605      	lsls	r5, r0, #24
 8004086:	d501      	bpl.n	800408c <_printf_i+0xe8>
 8004088:	681e      	ldr	r6, [r3, #0]
 800408a:	e002      	b.n	8004092 <_printf_i+0xee>
 800408c:	0641      	lsls	r1, r0, #25
 800408e:	d5fb      	bpl.n	8004088 <_printf_i+0xe4>
 8004090:	881e      	ldrh	r6, [r3, #0]
 8004092:	4853      	ldr	r0, [pc, #332]	; (80041e0 <_printf_i+0x23c>)
 8004094:	2f6f      	cmp	r7, #111	; 0x6f
 8004096:	bf0c      	ite	eq
 8004098:	2308      	moveq	r3, #8
 800409a:	230a      	movne	r3, #10
 800409c:	2100      	movs	r1, #0
 800409e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040a2:	6865      	ldr	r5, [r4, #4]
 80040a4:	60a5      	str	r5, [r4, #8]
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	bfa2      	ittt	ge
 80040aa:	6821      	ldrge	r1, [r4, #0]
 80040ac:	f021 0104 	bicge.w	r1, r1, #4
 80040b0:	6021      	strge	r1, [r4, #0]
 80040b2:	b90e      	cbnz	r6, 80040b8 <_printf_i+0x114>
 80040b4:	2d00      	cmp	r5, #0
 80040b6:	d04b      	beq.n	8004150 <_printf_i+0x1ac>
 80040b8:	4615      	mov	r5, r2
 80040ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80040be:	fb03 6711 	mls	r7, r3, r1, r6
 80040c2:	5dc7      	ldrb	r7, [r0, r7]
 80040c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040c8:	4637      	mov	r7, r6
 80040ca:	42bb      	cmp	r3, r7
 80040cc:	460e      	mov	r6, r1
 80040ce:	d9f4      	bls.n	80040ba <_printf_i+0x116>
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d10b      	bne.n	80040ec <_printf_i+0x148>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	07de      	lsls	r6, r3, #31
 80040d8:	d508      	bpl.n	80040ec <_printf_i+0x148>
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	6861      	ldr	r1, [r4, #4]
 80040de:	4299      	cmp	r1, r3
 80040e0:	bfde      	ittt	le
 80040e2:	2330      	movle	r3, #48	; 0x30
 80040e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040ec:	1b52      	subs	r2, r2, r5
 80040ee:	6122      	str	r2, [r4, #16]
 80040f0:	f8cd a000 	str.w	sl, [sp]
 80040f4:	464b      	mov	r3, r9
 80040f6:	aa03      	add	r2, sp, #12
 80040f8:	4621      	mov	r1, r4
 80040fa:	4640      	mov	r0, r8
 80040fc:	f7ff fee4 	bl	8003ec8 <_printf_common>
 8004100:	3001      	adds	r0, #1
 8004102:	d14a      	bne.n	800419a <_printf_i+0x1f6>
 8004104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004108:	b004      	add	sp, #16
 800410a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	f043 0320 	orr.w	r3, r3, #32
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	4833      	ldr	r0, [pc, #204]	; (80041e4 <_printf_i+0x240>)
 8004118:	2778      	movs	r7, #120	; 0x78
 800411a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	6829      	ldr	r1, [r5, #0]
 8004122:	061f      	lsls	r7, r3, #24
 8004124:	f851 6b04 	ldr.w	r6, [r1], #4
 8004128:	d402      	bmi.n	8004130 <_printf_i+0x18c>
 800412a:	065f      	lsls	r7, r3, #25
 800412c:	bf48      	it	mi
 800412e:	b2b6      	uxthmi	r6, r6
 8004130:	07df      	lsls	r7, r3, #31
 8004132:	bf48      	it	mi
 8004134:	f043 0320 	orrmi.w	r3, r3, #32
 8004138:	6029      	str	r1, [r5, #0]
 800413a:	bf48      	it	mi
 800413c:	6023      	strmi	r3, [r4, #0]
 800413e:	b91e      	cbnz	r6, 8004148 <_printf_i+0x1a4>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	f023 0320 	bic.w	r3, r3, #32
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	2310      	movs	r3, #16
 800414a:	e7a7      	b.n	800409c <_printf_i+0xf8>
 800414c:	4824      	ldr	r0, [pc, #144]	; (80041e0 <_printf_i+0x23c>)
 800414e:	e7e4      	b.n	800411a <_printf_i+0x176>
 8004150:	4615      	mov	r5, r2
 8004152:	e7bd      	b.n	80040d0 <_printf_i+0x12c>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	6826      	ldr	r6, [r4, #0]
 8004158:	6961      	ldr	r1, [r4, #20]
 800415a:	1d18      	adds	r0, r3, #4
 800415c:	6028      	str	r0, [r5, #0]
 800415e:	0635      	lsls	r5, r6, #24
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	d501      	bpl.n	8004168 <_printf_i+0x1c4>
 8004164:	6019      	str	r1, [r3, #0]
 8004166:	e002      	b.n	800416e <_printf_i+0x1ca>
 8004168:	0670      	lsls	r0, r6, #25
 800416a:	d5fb      	bpl.n	8004164 <_printf_i+0x1c0>
 800416c:	8019      	strh	r1, [r3, #0]
 800416e:	2300      	movs	r3, #0
 8004170:	6123      	str	r3, [r4, #16]
 8004172:	4615      	mov	r5, r2
 8004174:	e7bc      	b.n	80040f0 <_printf_i+0x14c>
 8004176:	682b      	ldr	r3, [r5, #0]
 8004178:	1d1a      	adds	r2, r3, #4
 800417a:	602a      	str	r2, [r5, #0]
 800417c:	681d      	ldr	r5, [r3, #0]
 800417e:	6862      	ldr	r2, [r4, #4]
 8004180:	2100      	movs	r1, #0
 8004182:	4628      	mov	r0, r5
 8004184:	f7fc f82c 	bl	80001e0 <memchr>
 8004188:	b108      	cbz	r0, 800418e <_printf_i+0x1ea>
 800418a:	1b40      	subs	r0, r0, r5
 800418c:	6060      	str	r0, [r4, #4]
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	6123      	str	r3, [r4, #16]
 8004192:	2300      	movs	r3, #0
 8004194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004198:	e7aa      	b.n	80040f0 <_printf_i+0x14c>
 800419a:	6923      	ldr	r3, [r4, #16]
 800419c:	462a      	mov	r2, r5
 800419e:	4649      	mov	r1, r9
 80041a0:	4640      	mov	r0, r8
 80041a2:	47d0      	blx	sl
 80041a4:	3001      	adds	r0, #1
 80041a6:	d0ad      	beq.n	8004104 <_printf_i+0x160>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	079b      	lsls	r3, r3, #30
 80041ac:	d413      	bmi.n	80041d6 <_printf_i+0x232>
 80041ae:	68e0      	ldr	r0, [r4, #12]
 80041b0:	9b03      	ldr	r3, [sp, #12]
 80041b2:	4298      	cmp	r0, r3
 80041b4:	bfb8      	it	lt
 80041b6:	4618      	movlt	r0, r3
 80041b8:	e7a6      	b.n	8004108 <_printf_i+0x164>
 80041ba:	2301      	movs	r3, #1
 80041bc:	4632      	mov	r2, r6
 80041be:	4649      	mov	r1, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	47d0      	blx	sl
 80041c4:	3001      	adds	r0, #1
 80041c6:	d09d      	beq.n	8004104 <_printf_i+0x160>
 80041c8:	3501      	adds	r5, #1
 80041ca:	68e3      	ldr	r3, [r4, #12]
 80041cc:	9903      	ldr	r1, [sp, #12]
 80041ce:	1a5b      	subs	r3, r3, r1
 80041d0:	42ab      	cmp	r3, r5
 80041d2:	dcf2      	bgt.n	80041ba <_printf_i+0x216>
 80041d4:	e7eb      	b.n	80041ae <_printf_i+0x20a>
 80041d6:	2500      	movs	r5, #0
 80041d8:	f104 0619 	add.w	r6, r4, #25
 80041dc:	e7f5      	b.n	80041ca <_printf_i+0x226>
 80041de:	bf00      	nop
 80041e0:	08004769 	.word	0x08004769
 80041e4:	0800477a 	.word	0x0800477a

080041e8 <__sflush_r>:
 80041e8:	898a      	ldrh	r2, [r1, #12]
 80041ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ee:	4605      	mov	r5, r0
 80041f0:	0710      	lsls	r0, r2, #28
 80041f2:	460c      	mov	r4, r1
 80041f4:	d458      	bmi.n	80042a8 <__sflush_r+0xc0>
 80041f6:	684b      	ldr	r3, [r1, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	dc05      	bgt.n	8004208 <__sflush_r+0x20>
 80041fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	dc02      	bgt.n	8004208 <__sflush_r+0x20>
 8004202:	2000      	movs	r0, #0
 8004204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800420a:	2e00      	cmp	r6, #0
 800420c:	d0f9      	beq.n	8004202 <__sflush_r+0x1a>
 800420e:	2300      	movs	r3, #0
 8004210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004214:	682f      	ldr	r7, [r5, #0]
 8004216:	6a21      	ldr	r1, [r4, #32]
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	d032      	beq.n	8004282 <__sflush_r+0x9a>
 800421c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800421e:	89a3      	ldrh	r3, [r4, #12]
 8004220:	075a      	lsls	r2, r3, #29
 8004222:	d505      	bpl.n	8004230 <__sflush_r+0x48>
 8004224:	6863      	ldr	r3, [r4, #4]
 8004226:	1ac0      	subs	r0, r0, r3
 8004228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800422a:	b10b      	cbz	r3, 8004230 <__sflush_r+0x48>
 800422c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800422e:	1ac0      	subs	r0, r0, r3
 8004230:	2300      	movs	r3, #0
 8004232:	4602      	mov	r2, r0
 8004234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004236:	6a21      	ldr	r1, [r4, #32]
 8004238:	4628      	mov	r0, r5
 800423a:	47b0      	blx	r6
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	89a3      	ldrh	r3, [r4, #12]
 8004240:	d106      	bne.n	8004250 <__sflush_r+0x68>
 8004242:	6829      	ldr	r1, [r5, #0]
 8004244:	291d      	cmp	r1, #29
 8004246:	d82b      	bhi.n	80042a0 <__sflush_r+0xb8>
 8004248:	4a29      	ldr	r2, [pc, #164]	; (80042f0 <__sflush_r+0x108>)
 800424a:	410a      	asrs	r2, r1
 800424c:	07d6      	lsls	r6, r2, #31
 800424e:	d427      	bmi.n	80042a0 <__sflush_r+0xb8>
 8004250:	2200      	movs	r2, #0
 8004252:	6062      	str	r2, [r4, #4]
 8004254:	04d9      	lsls	r1, r3, #19
 8004256:	6922      	ldr	r2, [r4, #16]
 8004258:	6022      	str	r2, [r4, #0]
 800425a:	d504      	bpl.n	8004266 <__sflush_r+0x7e>
 800425c:	1c42      	adds	r2, r0, #1
 800425e:	d101      	bne.n	8004264 <__sflush_r+0x7c>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	b903      	cbnz	r3, 8004266 <__sflush_r+0x7e>
 8004264:	6560      	str	r0, [r4, #84]	; 0x54
 8004266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004268:	602f      	str	r7, [r5, #0]
 800426a:	2900      	cmp	r1, #0
 800426c:	d0c9      	beq.n	8004202 <__sflush_r+0x1a>
 800426e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004272:	4299      	cmp	r1, r3
 8004274:	d002      	beq.n	800427c <__sflush_r+0x94>
 8004276:	4628      	mov	r0, r5
 8004278:	f7ff fbe2 	bl	8003a40 <_free_r>
 800427c:	2000      	movs	r0, #0
 800427e:	6360      	str	r0, [r4, #52]	; 0x34
 8004280:	e7c0      	b.n	8004204 <__sflush_r+0x1c>
 8004282:	2301      	movs	r3, #1
 8004284:	4628      	mov	r0, r5
 8004286:	47b0      	blx	r6
 8004288:	1c41      	adds	r1, r0, #1
 800428a:	d1c8      	bne.n	800421e <__sflush_r+0x36>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0c5      	beq.n	800421e <__sflush_r+0x36>
 8004292:	2b1d      	cmp	r3, #29
 8004294:	d001      	beq.n	800429a <__sflush_r+0xb2>
 8004296:	2b16      	cmp	r3, #22
 8004298:	d101      	bne.n	800429e <__sflush_r+0xb6>
 800429a:	602f      	str	r7, [r5, #0]
 800429c:	e7b1      	b.n	8004202 <__sflush_r+0x1a>
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	e7ad      	b.n	8004204 <__sflush_r+0x1c>
 80042a8:	690f      	ldr	r7, [r1, #16]
 80042aa:	2f00      	cmp	r7, #0
 80042ac:	d0a9      	beq.n	8004202 <__sflush_r+0x1a>
 80042ae:	0793      	lsls	r3, r2, #30
 80042b0:	680e      	ldr	r6, [r1, #0]
 80042b2:	bf08      	it	eq
 80042b4:	694b      	ldreq	r3, [r1, #20]
 80042b6:	600f      	str	r7, [r1, #0]
 80042b8:	bf18      	it	ne
 80042ba:	2300      	movne	r3, #0
 80042bc:	eba6 0807 	sub.w	r8, r6, r7
 80042c0:	608b      	str	r3, [r1, #8]
 80042c2:	f1b8 0f00 	cmp.w	r8, #0
 80042c6:	dd9c      	ble.n	8004202 <__sflush_r+0x1a>
 80042c8:	6a21      	ldr	r1, [r4, #32]
 80042ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042cc:	4643      	mov	r3, r8
 80042ce:	463a      	mov	r2, r7
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b0      	blx	r6
 80042d4:	2800      	cmp	r0, #0
 80042d6:	dc06      	bgt.n	80042e6 <__sflush_r+0xfe>
 80042d8:	89a3      	ldrh	r3, [r4, #12]
 80042da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042de:	81a3      	strh	r3, [r4, #12]
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e4:	e78e      	b.n	8004204 <__sflush_r+0x1c>
 80042e6:	4407      	add	r7, r0
 80042e8:	eba8 0800 	sub.w	r8, r8, r0
 80042ec:	e7e9      	b.n	80042c2 <__sflush_r+0xda>
 80042ee:	bf00      	nop
 80042f0:	dfbffffe 	.word	0xdfbffffe

080042f4 <_fflush_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	690b      	ldr	r3, [r1, #16]
 80042f8:	4605      	mov	r5, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	b913      	cbnz	r3, 8004304 <_fflush_r+0x10>
 80042fe:	2500      	movs	r5, #0
 8004300:	4628      	mov	r0, r5
 8004302:	bd38      	pop	{r3, r4, r5, pc}
 8004304:	b118      	cbz	r0, 800430e <_fflush_r+0x1a>
 8004306:	6a03      	ldr	r3, [r0, #32]
 8004308:	b90b      	cbnz	r3, 800430e <_fflush_r+0x1a>
 800430a:	f7ff f8eb 	bl	80034e4 <__sinit>
 800430e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f3      	beq.n	80042fe <_fflush_r+0xa>
 8004316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004318:	07d0      	lsls	r0, r2, #31
 800431a:	d404      	bmi.n	8004326 <_fflush_r+0x32>
 800431c:	0599      	lsls	r1, r3, #22
 800431e:	d402      	bmi.n	8004326 <_fflush_r+0x32>
 8004320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004322:	f7ff fb8a 	bl	8003a3a <__retarget_lock_acquire_recursive>
 8004326:	4628      	mov	r0, r5
 8004328:	4621      	mov	r1, r4
 800432a:	f7ff ff5d 	bl	80041e8 <__sflush_r>
 800432e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004330:	07da      	lsls	r2, r3, #31
 8004332:	4605      	mov	r5, r0
 8004334:	d4e4      	bmi.n	8004300 <_fflush_r+0xc>
 8004336:	89a3      	ldrh	r3, [r4, #12]
 8004338:	059b      	lsls	r3, r3, #22
 800433a:	d4e1      	bmi.n	8004300 <_fflush_r+0xc>
 800433c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800433e:	f7ff fb7d 	bl	8003a3c <__retarget_lock_release_recursive>
 8004342:	e7dd      	b.n	8004300 <_fflush_r+0xc>

08004344 <__swhatbuf_r>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	460c      	mov	r4, r1
 8004348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434c:	2900      	cmp	r1, #0
 800434e:	b096      	sub	sp, #88	; 0x58
 8004350:	4615      	mov	r5, r2
 8004352:	461e      	mov	r6, r3
 8004354:	da0d      	bge.n	8004372 <__swhatbuf_r+0x2e>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	f013 0f80 	tst.w	r3, #128	; 0x80
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	bf0c      	ite	eq
 8004362:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004366:	2340      	movne	r3, #64	; 0x40
 8004368:	2000      	movs	r0, #0
 800436a:	6031      	str	r1, [r6, #0]
 800436c:	602b      	str	r3, [r5, #0]
 800436e:	b016      	add	sp, #88	; 0x58
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	466a      	mov	r2, sp
 8004374:	f000 f848 	bl	8004408 <_fstat_r>
 8004378:	2800      	cmp	r0, #0
 800437a:	dbec      	blt.n	8004356 <__swhatbuf_r+0x12>
 800437c:	9901      	ldr	r1, [sp, #4]
 800437e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004382:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004386:	4259      	negs	r1, r3
 8004388:	4159      	adcs	r1, r3
 800438a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438e:	e7eb      	b.n	8004368 <__swhatbuf_r+0x24>

08004390 <__smakebuf_r>:
 8004390:	898b      	ldrh	r3, [r1, #12]
 8004392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004394:	079d      	lsls	r5, r3, #30
 8004396:	4606      	mov	r6, r0
 8004398:	460c      	mov	r4, r1
 800439a:	d507      	bpl.n	80043ac <__smakebuf_r+0x1c>
 800439c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	6123      	str	r3, [r4, #16]
 80043a4:	2301      	movs	r3, #1
 80043a6:	6163      	str	r3, [r4, #20]
 80043a8:	b002      	add	sp, #8
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	ab01      	add	r3, sp, #4
 80043ae:	466a      	mov	r2, sp
 80043b0:	f7ff ffc8 	bl	8004344 <__swhatbuf_r>
 80043b4:	9900      	ldr	r1, [sp, #0]
 80043b6:	4605      	mov	r5, r0
 80043b8:	4630      	mov	r0, r6
 80043ba:	f7ff fbb5 	bl	8003b28 <_malloc_r>
 80043be:	b948      	cbnz	r0, 80043d4 <__smakebuf_r+0x44>
 80043c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043c4:	059a      	lsls	r2, r3, #22
 80043c6:	d4ef      	bmi.n	80043a8 <__smakebuf_r+0x18>
 80043c8:	f023 0303 	bic.w	r3, r3, #3
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	e7e3      	b.n	800439c <__smakebuf_r+0xc>
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	6020      	str	r0, [r4, #0]
 80043d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	9b00      	ldr	r3, [sp, #0]
 80043e0:	6163      	str	r3, [r4, #20]
 80043e2:	9b01      	ldr	r3, [sp, #4]
 80043e4:	6120      	str	r0, [r4, #16]
 80043e6:	b15b      	cbz	r3, 8004400 <__smakebuf_r+0x70>
 80043e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ec:	4630      	mov	r0, r6
 80043ee:	f000 f81d 	bl	800442c <_isatty_r>
 80043f2:	b128      	cbz	r0, 8004400 <__smakebuf_r+0x70>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	431d      	orrs	r5, r3
 8004404:	81a5      	strh	r5, [r4, #12]
 8004406:	e7cf      	b.n	80043a8 <__smakebuf_r+0x18>

08004408 <_fstat_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d07      	ldr	r5, [pc, #28]	; (8004428 <_fstat_r+0x20>)
 800440c:	2300      	movs	r3, #0
 800440e:	4604      	mov	r4, r0
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	602b      	str	r3, [r5, #0]
 8004416:	f7fc fb38 	bl	8000a8a <_fstat>
 800441a:	1c43      	adds	r3, r0, #1
 800441c:	d102      	bne.n	8004424 <_fstat_r+0x1c>
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	b103      	cbz	r3, 8004424 <_fstat_r+0x1c>
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	bd38      	pop	{r3, r4, r5, pc}
 8004426:	bf00      	nop
 8004428:	200002b4 	.word	0x200002b4

0800442c <_isatty_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4d06      	ldr	r5, [pc, #24]	; (8004448 <_isatty_r+0x1c>)
 8004430:	2300      	movs	r3, #0
 8004432:	4604      	mov	r4, r0
 8004434:	4608      	mov	r0, r1
 8004436:	602b      	str	r3, [r5, #0]
 8004438:	f7fc fb37 	bl	8000aaa <_isatty>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_isatty_r+0x1a>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_isatty_r+0x1a>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	200002b4 	.word	0x200002b4

0800444c <_sbrk_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4d06      	ldr	r5, [pc, #24]	; (8004468 <_sbrk_r+0x1c>)
 8004450:	2300      	movs	r3, #0
 8004452:	4604      	mov	r4, r0
 8004454:	4608      	mov	r0, r1
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	f7fc fb40 	bl	8000adc <_sbrk>
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d102      	bne.n	8004466 <_sbrk_r+0x1a>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	b103      	cbz	r3, 8004466 <_sbrk_r+0x1a>
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	bd38      	pop	{r3, r4, r5, pc}
 8004468:	200002b4 	.word	0x200002b4

0800446c <_init>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	bf00      	nop
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr

08004478 <_fini>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	bf00      	nop
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr
