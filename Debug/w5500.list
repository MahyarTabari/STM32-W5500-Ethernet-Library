
w5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006994  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f4c  08006f4c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f54  08006f54  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08006f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200000cc  08007028  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08007028  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d8b1  00000000  00000000  0002013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280c  00000000  00000000  0002d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00030200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000991  00000000  00000000  00030e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179f9  00000000  00000000  00031811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea58  00000000  00000000  0004920a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cda3  00000000  00000000  00057c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a14  00000000  00000000  000e4a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e841c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000cc 	.word	0x200000cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b1c 	.word	0x08006b1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d0 	.word	0x200000d0
 80001dc:	08006b1c 	.word	0x08006b1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f003 ffbb 	bl	80044fc <HAL_Init>

  // don't buffer the output of printf
  setbuf(stdout, NULL);
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0x64>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fba4 	bl	8005cdc <setbuf>

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f852 	bl	800063c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f918 	bl	80007cc <MX_GPIO_Init>
  MX_SPI1_Init();
 800059c:	f000 f8ae 	bl	80006fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f8ea 	bl	8000778 <MX_USART1_UART_Init>

  // initialize w5500
  w5500_init();
 80005a4:	f003 f97e 	bl	80038a4 <w5500_init>

//  // static host configuration
//  static_host_configuration(net_info.mac, net_info.ip, net_info.sn, net_info.gw, net_info.dns);

  // dynamic host configuration
  dynamic_host_configuration(net_info.mac);
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <main+0x68>)
 80005aa:	f002 fec1 	bl	8003330 <dynamic_host_configuration>

  check_cable_presence();
 80005ae:	f002 ff8f 	bl	80034d0 <check_cable_presence>

  check_phy_status();
 80005b2:	f002 ffc3 	bl	800353c <check_phy_status>

  print_current_host_configuration();
 80005b6:	f003 f861 	bl	800367c <print_current_host_configuration>

  /* Infinite loop */
  while (1)
  {
	  // test printf
	  for (int i = 0; i < 100; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	e00a      	b.n	80005d6 <main+0x5a>
	  {
		  printf("%i: Hello World!\r\n", i);
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	4809      	ldr	r0, [pc, #36]	; (80005e8 <main+0x6c>)
 80005c4:	f005 fb1c 	bl	8005c00 <iprintf>
		  HAL_Delay(1500);
 80005c8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005cc:	f004 f808 	bl	80045e0 <HAL_Delay>
	  for (int i = 0; i < 100; i++)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b63      	cmp	r3, #99	; 0x63
 80005da:	ddf1      	ble.n	80005c0 <main+0x44>
 80005dc:	e7ed      	b.n	80005ba <main+0x3e>
 80005de:	bf00      	nop
 80005e0:	200000c8 	.word	0x200000c8
 80005e4:	20000000 	.word	0x20000000
 80005e8:	08006b34 	.word	0x08006b34

080005ec <write_data_uart1>:
/**
  * @brief send 1 byte of data to uart1
  * @retval None
  */
void write_data_uart1(const char data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	// busy wait until transmit buffer becomes empty
	while((huart1.Instance->SR & UART_FLAG_TXE) != UART_FLAG_TXE);
 80005f6:	bf00      	nop
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <write_data_uart1+0x30>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	2b80      	cmp	r3, #128	; 0x80
 8000604:	d1f8      	bne.n	80005f8 <write_data_uart1+0xc>

	huart1.Instance->DR = data;
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <write_data_uart1+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	605a      	str	r2, [r3, #4]

}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000140 	.word	0x20000140

08000620 <__io_putchar>:

// overwrite __io_putchar function to redirect printf to UART1
int __io_putchar(int ch)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	write_data_uart1(ch);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffdd 	bl	80005ec <write_data_uart1>

	return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fcd4 	bl	8005ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <SystemClock_Config+0xb8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SystemClock_Config+0xb8>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <SystemClock_Config+0xb8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <SystemClock_Config+0xbc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <SystemClock_Config+0xbc>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <SystemClock_Config+0xbc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fa3d 	bl	8004b30 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006bc:	f000 f8b8 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fca0 	bl	8005020 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006e6:	f000 f8a3 	bl	8000830 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_SPI1_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_SPI1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_SPI1_Init+0x74>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_SPI1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_SPI1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_SPI1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_SPI1_Init+0x74>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_SPI1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_SPI1_Init+0x74>)
 8000748:	2207      	movs	r2, #7
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <MX_SPI1_Init+0x74>)
 800074e:	f004 fe47 	bl	80053e0 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f86a 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <MX_SPI1_Init+0x74>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b03      	ldr	r3, [pc, #12]	; (8000770 <MX_SPI1_Init+0x74>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800076a:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000e8 	.word	0x200000e8
 8000774:	40013000 	.word	0x40013000

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART1_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007b0:	f004 fe9f 	bl	80054f2 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f839 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000140 	.word	0x20000140
 80007c8:	40011000 	.word	0x40011000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_GPIO_Init+0x5c>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_GPIO_Init+0x5c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_GPIO_Init+0x5c>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|SCS_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2103      	movs	r1, #3
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <MX_GPIO_Init+0x60>)
 8000802:	f004 f97b 	bl	8004afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RESET_Pin SCS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|SCS_Pin;
 8000806:	2303      	movs	r3, #3
 8000808:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0x60>)
 800081c:	f003 ffea 	bl	80047f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_SPI_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_SPI_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008e6:	23e0      	movs	r3, #224	; 0xe0
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f6:	2305      	movs	r3, #5
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_SPI_MspInit+0x8c>)
 8000902:	f003 ff77 	bl	80047f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40013000 	.word	0x40013000
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12c      	bne.n	8000998 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000988:	2307      	movs	r3, #7
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 8000994:	f003 ff2e 	bl	80047f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

    static uint16_t ticks = 0;
    ticks++;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <SysTick_Handler+0x2c>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <SysTick_Handler+0x2c>)
 8000a02:	801a      	strh	r2, [r3, #0]
    if(ticks == 1000) {
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SysTick_Handler+0x2c>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a0c:	d104      	bne.n	8000a18 <SysTick_Handler+0x24>
        DHCP_time_handler();
 8000a0e:	f001 ff41 	bl	8002894 <DHCP_time_handler>
        ticks = 0;
 8000a12:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <SysTick_Handler+0x2c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	801a      	strh	r2, [r3, #0]
    }



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f003 fdc2 	bl	80045a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000188 	.word	0x20000188

08000a24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	e00a      	b.n	8000a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a36:	f3af 8000 	nop.w
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	60ba      	str	r2, [r7, #8]
 8000a42:	b2ca      	uxtb	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf0      	blt.n	8000a36 <_read+0x12>
  }

  return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e009      	b.n	8000a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	60ba      	str	r2, [r7, #8]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fdd1 	bl	8000620 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf1      	blt.n	8000a70 <_write+0x12>
  }
  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_close>:

int _close(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_isatty>:

int _isatty(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f005 fab0 	bl	8006094 <__errno>
 8000b34:	4603      	mov	r3, r0
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20010000 	.word	0x20010000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	2000018c 	.word	0x2000018c
 8000b68:	20000340 	.word	0x20000340

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <WIZCHIP_READ+0x24>
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d114      	bne.n	8000bde <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000bb6:	6a1b      	ldr	r3, [r3, #32]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	0c12      	lsrs	r2, r2, #16
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000bc4:	6a1b      	ldr	r3, [r3, #32]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	0a12      	lsrs	r2, r2, #8
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	4610      	mov	r0, r2
 8000bce:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4798      	blx	r3
 8000bdc:	e011      	b.n	8000c02 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0c1b      	lsrs	r3, r3, #16
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	f107 020c 	add.w	r2, r7, #12
 8000bfc:	2103      	movs	r1, #3
 8000bfe:	4610      	mov	r0, r2
 8000c00:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4798      	blx	r3
 8000c08:	4603      	mov	r3, r0
 8000c0a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <WIZCHIP_READ+0x94>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	4798      	blx	r3
   return ret;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000003c 	.word	0x2000003c

08000c28 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d119      	bne.n	8000c84 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	0c12      	lsrs	r2, r2, #16
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	0a12      	lsrs	r2, r2, #8
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	4610      	mov	r0, r2
 8000c6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	4610      	mov	r0, r2
 8000c76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000c7a:	6a1b      	ldr	r3, [r3, #32]
 8000c7c:	78fa      	ldrb	r2, [r7, #3]
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4798      	blx	r3
 8000c82:	e013      	b.n	8000cac <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca2:	f107 020c 	add.w	r2, r7, #12
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4610      	mov	r0, r2
 8000caa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000cb2:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <WIZCHIP_WRITE+0x98>)
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	4798      	blx	r3
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000003c 	.word	0x2000003c

08000cc4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <WIZCHIP_READ_BUF+0x2a>
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d126      	bne.n	8000d3c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	0c12      	lsrs	r2, r2, #16
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	0a12      	lsrs	r2, r2, #8
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	4610      	mov	r0, r2
 8000d08:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	4610      	mov	r0, r2
 8000d14:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	82fb      	strh	r3, [r7, #22]
 8000d1a:	e00a      	b.n	8000d32 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	8afa      	ldrh	r2, [r7, #22]
 8000d22:	68b9      	ldr	r1, [r7, #8]
 8000d24:	188c      	adds	r4, r1, r2
 8000d26:	4798      	blx	r3
 8000d28:	4603      	mov	r3, r0
 8000d2a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000d2c:	8afb      	ldrh	r3, [r7, #22]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	82fb      	strh	r3, [r7, #22]
 8000d32:	8afa      	ldrh	r2, [r7, #22]
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d3f0      	bcc.n	8000d1c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d3a:	e017      	b.n	8000d6c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	0a1b      	lsrs	r3, r3, #8
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d56:	f107 0210 	add.w	r2, r7, #16
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	88fa      	ldrh	r2, [r7, #6]
 8000d66:	4611      	mov	r1, r2
 8000d68:	68b8      	ldr	r0, [r7, #8]
 8000d6a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d72:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <WIZCHIP_READ_BUF+0xbc>)
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	4798      	blx	r3
}
 8000d78:	bf00      	nop
 8000d7a:	371c      	adds	r7, #28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	2000003c 	.word	0x2000003c

08000d84 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d126      	bne.n	8000dfc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	0c12      	lsrs	r2, r2, #16
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	4610      	mov	r0, r2
 8000dba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	0a12      	lsrs	r2, r2, #8
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	4610      	mov	r0, r2
 8000dd4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	82fb      	strh	r3, [r7, #22]
 8000dda:	e00a      	b.n	8000df2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	8afa      	ldrh	r2, [r7, #22]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	440a      	add	r2, r1
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	4610      	mov	r0, r2
 8000dea:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000dec:	8afb      	ldrh	r3, [r7, #22]
 8000dee:	3301      	adds	r3, #1
 8000df0:	82fb      	strh	r3, [r7, #22]
 8000df2:	8afa      	ldrh	r2, [r7, #22]
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d3f0      	bcc.n	8000ddc <WIZCHIP_WRITE_BUF+0x58>
 8000dfa:	e017      	b.n	8000e2c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	0c1b      	lsrs	r3, r3, #16
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f107 0210 	add.w	r2, r7, #16
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	88fa      	ldrh	r2, [r7, #6]
 8000e26:	4611      	mov	r1, r2
 8000e28:	68b8      	ldr	r0, [r7, #8]
 8000e2a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000e32:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	4798      	blx	r3
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	2000003c 	.word	0x2000003c

08000e44 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	81fb      	strh	r3, [r7, #14]
 8000e52:	2300      	movs	r3, #0
 8000e54:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe94 	bl	8000b90 <WIZCHIP_READ>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000e6c:	89bb      	ldrh	r3, [r7, #12]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b29c      	uxth	r4, r3
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	3301      	adds	r3, #1
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fe86 	bl	8000b90 <WIZCHIP_READ>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4423      	add	r3, r4
 8000e8a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000e8c:	89bb      	ldrh	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d01a      	beq.n	8000ec8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	3301      	adds	r3, #1
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fe76 	bl	8000b90 <WIZCHIP_READ>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000ea8:	89fb      	ldrh	r3, [r7, #14]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	b29c      	uxth	r4, r3
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fe68 	bl	8000b90 <WIZCHIP_READ>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4423      	add	r3, r4
 8000ec6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000ec8:	89fa      	ldrh	r2, [r7, #14]
 8000eca:	89bb      	ldrh	r3, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d1c2      	bne.n	8000e56 <getSn_TX_FSR+0x12>
   return val;
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd90      	pop	{r4, r7, pc}

08000eda <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000eda:	b590      	push	{r4, r7, lr}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	81fb      	strh	r3, [r7, #14]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe49 	bl	8000b90 <WIZCHIP_READ>
 8000efe:	4603      	mov	r3, r0
 8000f00:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000f02:	89bb      	ldrh	r3, [r7, #12]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b29c      	uxth	r4, r3
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fe3b 	bl	8000b90 <WIZCHIP_READ>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4423      	add	r3, r4
 8000f20:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000f22:	89bb      	ldrh	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d01a      	beq.n	8000f5e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fe2b 	bl	8000b90 <WIZCHIP_READ>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b29c      	uxth	r4, r3
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	3301      	adds	r3, #1
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fe1d 	bl	8000b90 <WIZCHIP_READ>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	4423      	add	r3, r4
 8000f5c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000f5e:	89fa      	ldrh	r2, [r7, #14]
 8000f60:	89bb      	ldrh	r3, [r7, #12]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d1c2      	bne.n	8000eec <getSn_RX_RSR+0x12>
   return val;
 8000f66:	89fb      	ldrh	r3, [r7, #14]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d048      	beq.n	8001020 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	3301      	adds	r3, #1
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fdf8 	bl	8000b90 <WIZCHIP_READ>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b29c      	uxth	r4, r3
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	3301      	adds	r3, #1
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fdeb 	bl	8000b90 <WIZCHIP_READ>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4423      	add	r3, r4
 8000fc0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	3202      	adds	r2, #2
 8000fcc:	00d2      	lsls	r2, r2, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000fd2:	88bb      	ldrh	r3, [r7, #4]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	68b8      	ldr	r0, [r7, #8]
 8000fda:	f7ff fed3 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8000fde:	89fa      	ldrh	r2, [r7, #14]
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	3301      	adds	r3, #1
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4610      	mov	r0, r2
 8001000:	f7ff fe12 	bl	8000c28 <WIZCHIP_WRITE>
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3301      	adds	r3, #1
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001010:	461a      	mov	r2, r3
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4619      	mov	r1, r3
 8001018:	4610      	mov	r0, r2
 800101a:	f7ff fe05 	bl	8000c28 <WIZCHIP_WRITE>
 800101e:	e000      	b.n	8001022 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001020:	bf00      	nop
}
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	4613      	mov	r3, r2
 8001036:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d048      	beq.n	80010d8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	3301      	adds	r3, #1
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fd9c 	bl	8000b90 <WIZCHIP_READ>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b29c      	uxth	r4, r3
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	3301      	adds	r3, #1
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fd8f 	bl	8000b90 <WIZCHIP_READ>
 8001072:	4603      	mov	r3, r0
 8001074:	b29b      	uxth	r3, r3
 8001076:	4423      	add	r3, r4
 8001078:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	3203      	adds	r2, #3
 8001084:	00d2      	lsls	r2, r2, #3
 8001086:	4413      	add	r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	461a      	mov	r2, r3
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f7ff fe17 	bl	8000cc4 <WIZCHIP_READ_BUF>
   ptr += len;
 8001096:	89fa      	ldrh	r2, [r7, #14]
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	3301      	adds	r3, #1
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80010aa:	461a      	mov	r2, r3
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f7ff fdb6 	bl	8000c28 <WIZCHIP_WRITE>
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	3301      	adds	r3, #1
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80010c8:	461a      	mov	r2, r3
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	4610      	mov	r0, r2
 80010d2:	f7ff fda9 	bl	8000c28 <WIZCHIP_WRITE>
 80010d6:	e000      	b.n	80010da <wiz_recv_data+0xb2>
   if(len == 0) return;
 80010d8:	bf00      	nop
}
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd90      	pop	{r4, r7, pc}

080010e0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	3301      	adds	r3, #1
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fd45 	bl	8000b90 <WIZCHIP_READ>
 8001106:	4603      	mov	r3, r0
 8001108:	b29b      	uxth	r3, r3
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b29c      	uxth	r4, r3
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	3301      	adds	r3, #1
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fd38 	bl	8000b90 <WIZCHIP_READ>
 8001120:	4603      	mov	r3, r0
 8001122:	b29b      	uxth	r3, r3
 8001124:	4423      	add	r3, r4
 8001126:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8001128:	89fa      	ldrh	r2, [r7, #14]
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	3301      	adds	r3, #1
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800113c:	461a      	mov	r2, r3
 800113e:	89fb      	ldrh	r3, [r7, #14]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	b29b      	uxth	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	4610      	mov	r0, r2
 800114a:	f7ff fd6d 	bl	8000c28 <WIZCHIP_WRITE>
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	3301      	adds	r3, #1
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800115a:	461a      	mov	r2, r3
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4619      	mov	r1, r3
 8001162:	4610      	mov	r0, r2
 8001164:	f7ff fd60 	bl	8000c28 <WIZCHIP_WRITE>
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}

08001170 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8001174:	2204      	movs	r2, #4
 8001176:	4909      	ldr	r1, [pc, #36]	; (800119c <default_ip_assign+0x2c>)
 8001178:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800117c:	f7ff fe02 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001180:	2204      	movs	r2, #4
 8001182:	4907      	ldr	r1, [pc, #28]	; (80011a0 <default_ip_assign+0x30>)
 8001184:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001188:	f7ff fdfc 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 800118c:	2204      	movs	r2, #4
 800118e:	4905      	ldr	r1, [pc, #20]	; (80011a4 <default_ip_assign+0x34>)
 8001190:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001194:	f7ff fdf6 	bl	8000d84 <WIZCHIP_WRITE_BUF>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001a0 	.word	0x200001a0
 80011a0:	200001a8 	.word	0x200001a8
 80011a4:	200001a4 	.word	0x200001a4

080011a8 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fd3a 	bl	8000c28 <WIZCHIP_WRITE>
   getMR(); // for delay
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fceb 	bl	8000b90 <WIZCHIP_READ>
   default_ip_assign();
 80011ba:	f7ff ffd9 	bl	8001170 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80011be:	2206      	movs	r2, #6
 80011c0:	4903      	ldr	r1, [pc, #12]	; (80011d0 <default_ip_update+0x28>)
 80011c2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80011c6:	f7ff fddd 	bl	8000d84 <WIZCHIP_WRITE_BUF>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001c0 	.word	0x200001c0

080011d4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fd24 	bl	8000c28 <WIZCHIP_WRITE>
	getMR(); // for delay
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fcd5 	bl	8000b90 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80011e6:	2206      	movs	r2, #6
 80011e8:	4903      	ldr	r1, [pc, #12]	; (80011f8 <default_ip_conflict+0x24>)
 80011ea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80011ee:	f7ff fdc9 	bl	8000d84 <WIZCHIP_WRITE_BUF>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001c0 	.word	0x200001c0

080011fc <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <reg_dhcp_cbfunc+0x50>)
 800120a:	4a11      	ldr	r2, [pc, #68]	; (8001250 <reg_dhcp_cbfunc+0x54>)
 800120c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <reg_dhcp_cbfunc+0x58>)
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <reg_dhcp_cbfunc+0x5c>)
 8001212:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <reg_dhcp_cbfunc+0x60>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <reg_dhcp_cbfunc+0x64>)
 8001218:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <reg_dhcp_cbfunc+0x2a>
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <reg_dhcp_cbfunc+0x50>)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <reg_dhcp_cbfunc+0x36>
 800122c:	4a09      	ldr	r2, [pc, #36]	; (8001254 <reg_dhcp_cbfunc+0x58>)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <reg_dhcp_cbfunc+0x42>
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <reg_dhcp_cbfunc+0x60>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2000002c 	.word	0x2000002c
 8001250:	08001171 	.word	0x08001171
 8001254:	20000030 	.word	0x20000030
 8001258:	080011a9 	.word	0x080011a9
 800125c:	20000034 	.word	0x20000034
 8001260:	080011d5 	.word	0x080011d5

08001264 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800126a:	463b      	mov	r3, r7
 800126c:	2206      	movs	r2, #6
 800126e:	4619      	mov	r1, r3
 8001270:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001274:	f7ff fd26 	bl	8000cc4 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001278:	4b72      	ldr	r3, [pc, #456]	; (8001444 <makeDHCPMSG+0x1e0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001280:	4b70      	ldr	r3, [pc, #448]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2201      	movs	r2, #1
 8001286:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001288:	4b6e      	ldr	r3, [pc, #440]	; (8001444 <makeDHCPMSG+0x1e0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2206      	movs	r2, #6
 800128e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001290:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001298:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <makeDHCPMSG+0x1e0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3304      	adds	r3, #4
 800129e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80012a0:	4b69      	ldr	r3, [pc, #420]	; (8001448 <makeDHCPMSG+0x1e4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0e1b      	lsrs	r3, r3, #24
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <makeDHCPMSG+0x1e4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	0c1a      	lsrs	r2, r3, #16
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <makeDHCPMSG+0x1e4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	0a1a      	lsrs	r2, r3, #8
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3302      	adds	r3, #2
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80012c8:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <makeDHCPMSG+0x1e4>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3303      	adds	r3, #3
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80012d4:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <makeDHCPMSG+0x1e0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80012dc:	4b59      	ldr	r3, [pc, #356]	; (8001444 <makeDHCPMSG+0x1e0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	330a      	adds	r3, #10
 80012e2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3301      	adds	r3, #1
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <makeDHCPMSG+0x1e0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80012fa:	4b52      	ldr	r3, [pc, #328]	; (8001444 <makeDHCPMSG+0x1e0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001302:	4b50      	ldr	r3, [pc, #320]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800130a:	4b4e      	ldr	r3, [pc, #312]	; (8001444 <makeDHCPMSG+0x1e0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2200      	movs	r2, #0
 8001310:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800131a:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <makeDHCPMSG+0x1e0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001322:	4b48      	ldr	r3, [pc, #288]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800132a:	4b46      	ldr	r3, [pc, #280]	; (8001444 <makeDHCPMSG+0x1e0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2200      	movs	r2, #0
 8001338:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800133a:	4b42      	ldr	r3, [pc, #264]	; (8001444 <makeDHCPMSG+0x1e0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800134a:	4b3e      	ldr	r3, [pc, #248]	; (8001444 <makeDHCPMSG+0x1e0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2200      	movs	r2, #0
 8001350:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001352:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <makeDHCPMSG+0x1e0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <makeDHCPMSG+0x1e0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a35      	ldr	r2, [pc, #212]	; (800144c <makeDHCPMSG+0x1e8>)
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800137c:	4b31      	ldr	r3, [pc, #196]	; (8001444 <makeDHCPMSG+0x1e0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a32      	ldr	r2, [pc, #200]	; (800144c <makeDHCPMSG+0x1e8>)
 8001382:	7852      	ldrb	r2, [r2, #1]
 8001384:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a30      	ldr	r2, [pc, #192]	; (800144c <makeDHCPMSG+0x1e8>)
 800138c:	7892      	ldrb	r2, [r2, #2]
 800138e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2d      	ldr	r2, [pc, #180]	; (800144c <makeDHCPMSG+0x1e8>)
 8001396:	78d2      	ldrb	r2, [r2, #3]
 8001398:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <makeDHCPMSG+0x1e0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a2b      	ldr	r2, [pc, #172]	; (800144c <makeDHCPMSG+0x1e8>)
 80013a0:	7912      	ldrb	r2, [r2, #4]
 80013a2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <makeDHCPMSG+0x1e0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a28      	ldr	r2, [pc, #160]	; (800144c <makeDHCPMSG+0x1e8>)
 80013ac:	7952      	ldrb	r2, [r2, #5]
 80013ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80013b2:	2306      	movs	r3, #6
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	e008      	b.n	80013ca <makeDHCPMSG+0x166>
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <makeDHCPMSG+0x1e0>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	4413      	add	r3, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	771a      	strb	r2, [r3, #28]
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3301      	adds	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d9f3      	bls.n	80013b8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e009      	b.n	80013ea <makeDHCPMSG+0x186>
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <makeDHCPMSG+0x1e0>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	4413      	add	r3, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	3301      	adds	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b3f      	cmp	r3, #63	; 0x3f
 80013ee:	d9f2      	bls.n	80013d6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e009      	b.n	800140a <makeDHCPMSG+0x1a6>
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <makeDHCPMSG+0x1e0>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	4413      	add	r3, r2
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	3301      	adds	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	2b00      	cmp	r3, #0
 8001410:	daf1      	bge.n	80013f6 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2263      	movs	r2, #99	; 0x63
 8001418:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <makeDHCPMSG+0x1e0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2282      	movs	r2, #130	; 0x82
 8001422:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2253      	movs	r2, #83	; 0x53
 800142c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <makeDHCPMSG+0x1e0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2263      	movs	r2, #99	; 0x63
 8001436:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001bc 	.word	0x200001bc
 8001448:	200001b8 	.word	0x200001b8
 800144c:	200001c0 	.word	0x200001c0

08001450 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800145a:	f7ff ff03 	bl	8001264 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 800145e:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <send_DHCP_DISCOVER+0x168>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8001464:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <send_DHCP_DISCOVER+0x168>)
 8001466:	2200      	movs	r2, #0
 8001468:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800146a:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <send_DHCP_DISCOVER+0x168>)
 800146c:	2200      	movs	r2, #0
 800146e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001470:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <send_DHCP_DISCOVER+0x168>)
 8001472:	2200      	movs	r2, #0
 8001474:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <send_DHCP_DISCOVER+0x16c>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 800147c:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <send_DHCP_DISCOVER+0x16c>)
 800147e:	2200      	movs	r2, #0
 8001480:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8001482:	4b4e      	ldr	r3, [pc, #312]	; (80015bc <send_DHCP_DISCOVER+0x16c>)
 8001484:	2200      	movs	r2, #0
 8001486:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8001488:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <send_DHCP_DISCOVER+0x16c>)
 800148a:	2200      	movs	r2, #0
 800148c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800148e:	2304      	movs	r3, #4
 8001490:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001492:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	1c59      	adds	r1, r3, #1
 800149a:	80b9      	strh	r1, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	2235      	movs	r2, #53	; 0x35
 80014a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80014a4:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	1c59      	adds	r1, r3, #1
 80014ac:	80b9      	strh	r1, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80014b6:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	1c59      	adds	r1, r3, #1
 80014be:	80b9      	strh	r1, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	1c59      	adds	r1, r3, #1
 80014d0:	80b9      	strh	r1, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	223d      	movs	r2, #61	; 0x3d
 80014d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	1c59      	adds	r1, r3, #1
 80014e2:	80b9      	strh	r1, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	2207      	movs	r2, #7
 80014e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	1c59      	adds	r1, r3, #1
 80014f4:	80b9      	strh	r1, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	88bb      	ldrh	r3, [r7, #4]
 8001504:	1c59      	adds	r1, r3, #1
 8001506:	80b9      	strh	r1, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <send_DHCP_DISCOVER+0x174>)
 800150c:	7819      	ldrb	r1, [r3, #0]
 800150e:	1813      	adds	r3, r2, r0
 8001510:	460a      	mov	r2, r1
 8001512:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	1c59      	adds	r1, r3, #1
 800151e:	80b9      	strh	r1, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <send_DHCP_DISCOVER+0x174>)
 8001524:	7859      	ldrb	r1, [r3, #1]
 8001526:	1813      	adds	r3, r2, r0
 8001528:	460a      	mov	r2, r1
 800152a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	88bb      	ldrh	r3, [r7, #4]
 8001534:	1c59      	adds	r1, r3, #1
 8001536:	80b9      	strh	r1, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <send_DHCP_DISCOVER+0x174>)
 800153c:	7899      	ldrb	r1, [r3, #2]
 800153e:	1813      	adds	r3, r2, r0
 8001540:	460a      	mov	r2, r1
 8001542:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	88bb      	ldrh	r3, [r7, #4]
 800154c:	1c59      	adds	r1, r3, #1
 800154e:	80b9      	strh	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <send_DHCP_DISCOVER+0x174>)
 8001554:	78d9      	ldrb	r1, [r3, #3]
 8001556:	1813      	adds	r3, r2, r0
 8001558:	460a      	mov	r2, r1
 800155a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	1c59      	adds	r1, r3, #1
 8001566:	80b9      	strh	r1, [r7, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <send_DHCP_DISCOVER+0x174>)
 800156c:	7919      	ldrb	r1, [r3, #4]
 800156e:	1813      	adds	r3, r2, r0
 8001570:	460a      	mov	r2, r1
 8001572:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	1c59      	adds	r1, r3, #1
 800157e:	80b9      	strh	r1, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <send_DHCP_DISCOVER+0x174>)
 8001584:	7959      	ldrb	r1, [r3, #5]
 8001586:	1813      	adds	r3, r2, r0
 8001588:	460a      	mov	r2, r1
 800158a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	88bb      	ldrh	r3, [r7, #4]
 8001594:	1c59      	adds	r1, r3, #1
 8001596:	80b9      	strh	r1, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	220c      	movs	r2, #12
 800159c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <send_DHCP_DISCOVER+0x170>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	1c59      	adds	r1, r3, #1
 80015a8:	80b9      	strh	r1, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	e017      	b.n	80015e8 <send_DHCP_DISCOVER+0x198>
 80015b8:	20000194 	.word	0x20000194
 80015bc:	20000198 	.word	0x20000198
 80015c0:	200001bc 	.word	0x200001bc
 80015c4:	200001c0 	.word	0x200001c0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80015c8:	88f9      	ldrh	r1, [r7, #6]
 80015ca:	4b80      	ldr	r3, [pc, #512]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	1c58      	adds	r0, r3, #1
 80015d2:	80b8      	strh	r0, [r7, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	4b7e      	ldr	r3, [pc, #504]	; (80017d0 <send_DHCP_DISCOVER+0x380>)
 80015d8:	5c59      	ldrb	r1, [r3, r1]
 80015da:	1813      	adds	r3, r2, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	3301      	adds	r3, #1
 80015e6:	80fb      	strh	r3, [r7, #6]
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	4a79      	ldr	r2, [pc, #484]	; (80017d0 <send_DHCP_DISCOVER+0x380>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ea      	bne.n	80015c8 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4);
 80015f2:	4b78      	ldr	r3, [pc, #480]	; (80017d4 <send_DHCP_DISCOVER+0x384>)
 80015f4:	78db      	ldrb	r3, [r3, #3]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b74      	ldr	r3, [pc, #464]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 80015fc:	681c      	ldr	r4, [r3, #0]
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	1c59      	adds	r1, r3, #1
 8001602:	80b9      	strh	r1, [r7, #4]
 8001604:	461d      	mov	r5, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f001 f9d2 	bl	80029b0 <NibbleToHex>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	1963      	adds	r3, r4, r5
 8001612:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001616:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <send_DHCP_DISCOVER+0x384>)
 8001618:	78da      	ldrb	r2, [r3, #3]
 800161a:	4b6c      	ldr	r3, [pc, #432]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 800161c:	681c      	ldr	r4, [r3, #0]
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	1c59      	adds	r1, r3, #1
 8001622:	80b9      	strh	r1, [r7, #4]
 8001624:	461d      	mov	r5, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f001 f9c2 	bl	80029b0 <NibbleToHex>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	1963      	adds	r3, r4, r5
 8001632:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4);
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <send_DHCP_DISCOVER+0x384>)
 8001638:	791b      	ldrb	r3, [r3, #4]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 8001640:	681c      	ldr	r4, [r3, #0]
 8001642:	88bb      	ldrh	r3, [r7, #4]
 8001644:	1c59      	adds	r1, r3, #1
 8001646:	80b9      	strh	r1, [r7, #4]
 8001648:	461d      	mov	r5, r3
 800164a:	4610      	mov	r0, r2
 800164c:	f001 f9b0 	bl	80029b0 <NibbleToHex>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	1963      	adds	r3, r4, r5
 8001656:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800165a:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <send_DHCP_DISCOVER+0x384>)
 800165c:	791a      	ldrb	r2, [r3, #4]
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 8001660:	681c      	ldr	r4, [r3, #0]
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	1c59      	adds	r1, r3, #1
 8001666:	80b9      	strh	r1, [r7, #4]
 8001668:	461d      	mov	r5, r3
 800166a:	4610      	mov	r0, r2
 800166c:	f001 f9a0 	bl	80029b0 <NibbleToHex>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	1963      	adds	r3, r4, r5
 8001676:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4);
 800167a:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <send_DHCP_DISCOVER+0x384>)
 800167c:	795b      	ldrb	r3, [r3, #5]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b52      	ldr	r3, [pc, #328]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 8001684:	681c      	ldr	r4, [r3, #0]
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	1c59      	adds	r1, r3, #1
 800168a:	80b9      	strh	r1, [r7, #4]
 800168c:	461d      	mov	r5, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f001 f98e 	bl	80029b0 <NibbleToHex>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	1963      	adds	r3, r4, r5
 800169a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800169e:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <send_DHCP_DISCOVER+0x384>)
 80016a0:	795a      	ldrb	r2, [r3, #5]
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 80016a4:	681c      	ldr	r4, [r3, #0]
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	1c59      	adds	r1, r3, #1
 80016aa:	80b9      	strh	r1, [r7, #4]
 80016ac:	461d      	mov	r5, r3
 80016ae:	4610      	mov	r0, r2
 80016b0:	f001 f97e 	bl	80029b0 <NibbleToHex>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	1963      	adds	r3, r4, r5
 80016ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	b2d9      	uxtb	r1, r3
 80016c2:	4b42      	ldr	r3, [pc, #264]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	88b8      	ldrh	r0, [r7, #4]
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	3307      	adds	r3, #7
 80016cc:	1ac3      	subs	r3, r0, r3
 80016ce:	3106      	adds	r1, #6
 80016d0:	b2c9      	uxtb	r1, r1
 80016d2:	4413      	add	r3, r2
 80016d4:	460a      	mov	r2, r1
 80016d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	88bb      	ldrh	r3, [r7, #4]
 80016e0:	1c59      	adds	r1, r3, #1
 80016e2:	80b9      	strh	r1, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	2237      	movs	r2, #55	; 0x37
 80016e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80016ec:	4b37      	ldr	r3, [pc, #220]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	88bb      	ldrh	r3, [r7, #4]
 80016f2:	1c59      	adds	r1, r3, #1
 80016f4:	80b9      	strh	r1, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	2206      	movs	r2, #6
 80016fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	1c59      	adds	r1, r3, #1
 8001706:	80b9      	strh	r1, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	2201      	movs	r2, #1
 800170c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	1c59      	adds	r1, r3, #1
 8001718:	80b9      	strh	r1, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	2203      	movs	r2, #3
 800171e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	88bb      	ldrh	r3, [r7, #4]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	80b9      	strh	r1, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	2206      	movs	r2, #6
 8001730:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	88bb      	ldrh	r3, [r7, #4]
 800173a:	1c59      	adds	r1, r3, #1
 800173c:	80b9      	strh	r1, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	220f      	movs	r2, #15
 8001742:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	88bb      	ldrh	r3, [r7, #4]
 800174c:	1c59      	adds	r1, r3, #1
 800174e:	80b9      	strh	r1, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	223a      	movs	r2, #58	; 0x3a
 8001754:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	88bb      	ldrh	r3, [r7, #4]
 800175e:	1c59      	adds	r1, r3, #1
 8001760:	80b9      	strh	r1, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	223b      	movs	r2, #59	; 0x3b
 8001766:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	1c59      	adds	r1, r3, #1
 8001772:	80b9      	strh	r1, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	22ff      	movs	r2, #255	; 0xff
 8001778:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800177c:	88bb      	ldrh	r3, [r7, #4]
 800177e:	80fb      	strh	r3, [r7, #6]
 8001780:	e009      	b.n	8001796 <send_DHCP_DISCOVER+0x346>
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	4413      	add	r3, r2
 800178a:	2200      	movs	r2, #0
 800178c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	3301      	adds	r3, #1
 8001794:	80fb      	strh	r3, [r7, #6]
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800179c:	d3f1      	bcc.n	8001782 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 800179e:	23ff      	movs	r3, #255	; 0xff
 80017a0:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80017a2:	23ff      	movs	r3, #255	; 0xff
 80017a4:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80017a6:	23ff      	movs	r3, #255	; 0xff
 80017a8:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80017aa:	23ff      	movs	r3, #255	; 0xff
 80017ac:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <send_DHCP_DISCOVER+0x388>)
 80017b0:	7818      	ldrb	r0, [r3, #0]
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <send_DHCP_DISCOVER+0x37c>)
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	463b      	mov	r3, r7
 80017b8:	2243      	movs	r2, #67	; 0x43
 80017ba:	9200      	str	r2, [sp, #0]
 80017bc:	f44f 7209 	mov.w	r2, #548	; 0x224
 80017c0:	f001 fa92 	bl	8002ce8 <sendto>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdb0      	pop	{r4, r5, r7, pc}
 80017cc:	200001bc 	.word	0x200001bc
 80017d0:	20000024 	.word	0x20000024
 80017d4:	200001c0 	.word	0x200001c0
 80017d8:	20000190 	.word	0x20000190

080017dc <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80017e6:	f7ff fd3d 	bl	8001264 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <send_DHCP_REQUEST+0x7c>)
 80017ec:	f993 3000 	ldrsb.w	r3, [r3]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d004      	beq.n	80017fe <send_DHCP_REQUEST+0x22>
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <send_DHCP_REQUEST+0x7c>)
 80017f6:	f993 3000 	ldrsb.w	r3, [r3]
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d134      	bne.n	8001868 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <send_DHCP_REQUEST+0x80>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	330a      	adds	r3, #10
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <send_DHCP_REQUEST+0x80>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	330a      	adds	r3, #10
 800180e:	3301      	adds	r3, #1
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <send_DHCP_REQUEST+0x80>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a11      	ldr	r2, [pc, #68]	; (8001860 <send_DHCP_REQUEST+0x84>)
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <send_DHCP_REQUEST+0x80>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <send_DHCP_REQUEST+0x84>)
 8001824:	7852      	ldrb	r2, [r2, #1]
 8001826:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <send_DHCP_REQUEST+0x80>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <send_DHCP_REQUEST+0x84>)
 800182e:	7892      	ldrb	r2, [r2, #2]
 8001830:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <send_DHCP_REQUEST+0x80>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <send_DHCP_REQUEST+0x84>)
 8001838:	78d2      	ldrb	r2, [r2, #3]
 800183a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <send_DHCP_REQUEST+0x88>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <send_DHCP_REQUEST+0x88>)
 8001844:	785b      	ldrb	r3, [r3, #1]
 8001846:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <send_DHCP_REQUEST+0x88>)
 800184a:	789b      	ldrb	r3, [r3, #2]
 800184c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <send_DHCP_REQUEST+0x88>)
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	e010      	b.n	8001878 <send_DHCP_REQUEST+0x9c>
 8001856:	bf00      	nop
 8001858:	200001b0 	.word	0x200001b0
 800185c:	200001bc 	.word	0x200001bc
 8001860:	200001a0 	.word	0x200001a0
 8001864:	20000194 	.word	0x20000194
   }
   else
   {
   	ip[0] = 255;
 8001868:	23ff      	movs	r3, #255	; 0xff
 800186a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800186c:	23ff      	movs	r3, #255	; 0xff
 800186e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001870:	23ff      	movs	r3, #255	; 0xff
 8001872:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001874:	23ff      	movs	r3, #255	; 0xff
 8001876:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001878:	2304      	movs	r3, #4
 800187a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800187c:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	897b      	ldrh	r3, [r7, #10]
 8001882:	1c59      	adds	r1, r3, #1
 8001884:	8179      	strh	r1, [r7, #10]
 8001886:	4413      	add	r3, r2
 8001888:	2235      	movs	r2, #53	; 0x35
 800188a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800188e:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	897b      	ldrh	r3, [r7, #10]
 8001894:	1c59      	adds	r1, r3, #1
 8001896:	8179      	strh	r1, [r7, #10]
 8001898:	4413      	add	r3, r2
 800189a:	2201      	movs	r2, #1
 800189c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80018a0:	4b84      	ldr	r3, [pc, #528]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	897b      	ldrh	r3, [r7, #10]
 80018a6:	1c59      	adds	r1, r3, #1
 80018a8:	8179      	strh	r1, [r7, #10]
 80018aa:	4413      	add	r3, r2
 80018ac:	2203      	movs	r2, #3
 80018ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80018b2:	4b80      	ldr	r3, [pc, #512]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	897b      	ldrh	r3, [r7, #10]
 80018b8:	1c59      	adds	r1, r3, #1
 80018ba:	8179      	strh	r1, [r7, #10]
 80018bc:	4413      	add	r3, r2
 80018be:	223d      	movs	r2, #61	; 0x3d
 80018c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80018c4:	4b7b      	ldr	r3, [pc, #492]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	897b      	ldrh	r3, [r7, #10]
 80018ca:	1c59      	adds	r1, r3, #1
 80018cc:	8179      	strh	r1, [r7, #10]
 80018ce:	4413      	add	r3, r2
 80018d0:	2207      	movs	r2, #7
 80018d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80018d6:	4b77      	ldr	r3, [pc, #476]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	897b      	ldrh	r3, [r7, #10]
 80018dc:	1c59      	adds	r1, r3, #1
 80018de:	8179      	strh	r1, [r7, #10]
 80018e0:	4413      	add	r3, r2
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80018e8:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	897b      	ldrh	r3, [r7, #10]
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	8179      	strh	r1, [r7, #10]
 80018f2:	4618      	mov	r0, r3
 80018f4:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <send_DHCP_REQUEST+0x2dc>)
 80018f6:	7819      	ldrb	r1, [r3, #0]
 80018f8:	1813      	adds	r3, r2, r0
 80018fa:	460a      	mov	r2, r1
 80018fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001900:	4b6c      	ldr	r3, [pc, #432]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	897b      	ldrh	r3, [r7, #10]
 8001906:	1c59      	adds	r1, r3, #1
 8001908:	8179      	strh	r1, [r7, #10]
 800190a:	4618      	mov	r0, r3
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <send_DHCP_REQUEST+0x2dc>)
 800190e:	7859      	ldrb	r1, [r3, #1]
 8001910:	1813      	adds	r3, r2, r0
 8001912:	460a      	mov	r2, r1
 8001914:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001918:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	897b      	ldrh	r3, [r7, #10]
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	8179      	strh	r1, [r7, #10]
 8001922:	4618      	mov	r0, r3
 8001924:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <send_DHCP_REQUEST+0x2dc>)
 8001926:	7899      	ldrb	r1, [r3, #2]
 8001928:	1813      	adds	r3, r2, r0
 800192a:	460a      	mov	r2, r1
 800192c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001930:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	897b      	ldrh	r3, [r7, #10]
 8001936:	1c59      	adds	r1, r3, #1
 8001938:	8179      	strh	r1, [r7, #10]
 800193a:	4618      	mov	r0, r3
 800193c:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <send_DHCP_REQUEST+0x2dc>)
 800193e:	78d9      	ldrb	r1, [r3, #3]
 8001940:	1813      	adds	r3, r2, r0
 8001942:	460a      	mov	r2, r1
 8001944:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001948:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	897b      	ldrh	r3, [r7, #10]
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	8179      	strh	r1, [r7, #10]
 8001952:	4618      	mov	r0, r3
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <send_DHCP_REQUEST+0x2dc>)
 8001956:	7919      	ldrb	r1, [r3, #4]
 8001958:	1813      	adds	r3, r2, r0
 800195a:	460a      	mov	r2, r1
 800195c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001960:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	897b      	ldrh	r3, [r7, #10]
 8001966:	1c59      	adds	r1, r3, #1
 8001968:	8179      	strh	r1, [r7, #10]
 800196a:	4618      	mov	r0, r3
 800196c:	4b52      	ldr	r3, [pc, #328]	; (8001ab8 <send_DHCP_REQUEST+0x2dc>)
 800196e:	7959      	ldrb	r1, [r3, #5]
 8001970:	1813      	adds	r3, r2, r0
 8001972:	460a      	mov	r2, r1
 8001974:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2bff      	cmp	r3, #255	; 0xff
 800197c:	f040 8084 	bne.w	8001a88 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001980:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	897b      	ldrh	r3, [r7, #10]
 8001986:	1c59      	adds	r1, r3, #1
 8001988:	8179      	strh	r1, [r7, #10]
 800198a:	4413      	add	r3, r2
 800198c:	2232      	movs	r2, #50	; 0x32
 800198e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	897b      	ldrh	r3, [r7, #10]
 8001998:	1c59      	adds	r1, r3, #1
 800199a:	8179      	strh	r1, [r7, #10]
 800199c:	4413      	add	r3, r2
 800199e:	2204      	movs	r2, #4
 80019a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80019a4:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	897b      	ldrh	r3, [r7, #10]
 80019aa:	1c59      	adds	r1, r3, #1
 80019ac:	8179      	strh	r1, [r7, #10]
 80019ae:	4618      	mov	r0, r3
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <send_DHCP_REQUEST+0x2e0>)
 80019b2:	7819      	ldrb	r1, [r3, #0]
 80019b4:	1813      	adds	r3, r2, r0
 80019b6:	460a      	mov	r2, r1
 80019b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80019bc:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	897b      	ldrh	r3, [r7, #10]
 80019c2:	1c59      	adds	r1, r3, #1
 80019c4:	8179      	strh	r1, [r7, #10]
 80019c6:	4618      	mov	r0, r3
 80019c8:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <send_DHCP_REQUEST+0x2e0>)
 80019ca:	7859      	ldrb	r1, [r3, #1]
 80019cc:	1813      	adds	r3, r2, r0
 80019ce:	460a      	mov	r2, r1
 80019d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80019d4:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	897b      	ldrh	r3, [r7, #10]
 80019da:	1c59      	adds	r1, r3, #1
 80019dc:	8179      	strh	r1, [r7, #10]
 80019de:	4618      	mov	r0, r3
 80019e0:	4b36      	ldr	r3, [pc, #216]	; (8001abc <send_DHCP_REQUEST+0x2e0>)
 80019e2:	7899      	ldrb	r1, [r3, #2]
 80019e4:	1813      	adds	r3, r2, r0
 80019e6:	460a      	mov	r2, r1
 80019e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80019ec:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	897b      	ldrh	r3, [r7, #10]
 80019f2:	1c59      	adds	r1, r3, #1
 80019f4:	8179      	strh	r1, [r7, #10]
 80019f6:	4618      	mov	r0, r3
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <send_DHCP_REQUEST+0x2e0>)
 80019fa:	78d9      	ldrb	r1, [r3, #3]
 80019fc:	1813      	adds	r3, r2, r0
 80019fe:	460a      	mov	r2, r1
 8001a00:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	897b      	ldrh	r3, [r7, #10]
 8001a0a:	1c59      	adds	r1, r3, #1
 8001a0c:	8179      	strh	r1, [r7, #10]
 8001a0e:	4413      	add	r3, r2
 8001a10:	2236      	movs	r2, #54	; 0x36
 8001a12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001a16:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	897b      	ldrh	r3, [r7, #10]
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	8179      	strh	r1, [r7, #10]
 8001a20:	4413      	add	r3, r2
 8001a22:	2204      	movs	r2, #4
 8001a24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	897b      	ldrh	r3, [r7, #10]
 8001a2e:	1c59      	adds	r1, r3, #1
 8001a30:	8179      	strh	r1, [r7, #10]
 8001a32:	4618      	mov	r0, r3
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <send_DHCP_REQUEST+0x2e4>)
 8001a36:	7819      	ldrb	r1, [r3, #0]
 8001a38:	1813      	adds	r3, r2, r0
 8001a3a:	460a      	mov	r2, r1
 8001a3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	897b      	ldrh	r3, [r7, #10]
 8001a46:	1c59      	adds	r1, r3, #1
 8001a48:	8179      	strh	r1, [r7, #10]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <send_DHCP_REQUEST+0x2e4>)
 8001a4e:	7859      	ldrb	r1, [r3, #1]
 8001a50:	1813      	adds	r3, r2, r0
 8001a52:	460a      	mov	r2, r1
 8001a54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	897b      	ldrh	r3, [r7, #10]
 8001a5e:	1c59      	adds	r1, r3, #1
 8001a60:	8179      	strh	r1, [r7, #10]
 8001a62:	4618      	mov	r0, r3
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <send_DHCP_REQUEST+0x2e4>)
 8001a66:	7899      	ldrb	r1, [r3, #2]
 8001a68:	1813      	adds	r3, r2, r0
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	897b      	ldrh	r3, [r7, #10]
 8001a76:	1c59      	adds	r1, r3, #1
 8001a78:	8179      	strh	r1, [r7, #10]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <send_DHCP_REQUEST+0x2e4>)
 8001a7e:	78d9      	ldrb	r1, [r3, #3]
 8001a80:	1813      	adds	r3, r2, r0
 8001a82:	460a      	mov	r2, r1
 8001a84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	897b      	ldrh	r3, [r7, #10]
 8001a8e:	1c59      	adds	r1, r3, #1
 8001a90:	8179      	strh	r1, [r7, #10]
 8001a92:	4413      	add	r3, r2
 8001a94:	220c      	movs	r2, #12
 8001a96:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <send_DHCP_REQUEST+0x2d8>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	897b      	ldrh	r3, [r7, #10]
 8001aa0:	1c59      	adds	r1, r3, #1
 8001aa2:	8179      	strh	r1, [r7, #10]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e019      	b.n	8001ae6 <send_DHCP_REQUEST+0x30a>
 8001ab2:	bf00      	nop
 8001ab4:	200001bc 	.word	0x200001bc
 8001ab8:	200001c0 	.word	0x200001c0
 8001abc:	200001a0 	.word	0x200001a0
 8001ac0:	20000194 	.word	0x20000194
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001ac4:	4b86      	ldr	r3, [pc, #536]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	897b      	ldrh	r3, [r7, #10]
 8001aca:	1c59      	adds	r1, r3, #1
 8001acc:	8179      	strh	r1, [r7, #10]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4984      	ldr	r1, [pc, #528]	; (8001ce4 <send_DHCP_REQUEST+0x508>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	440b      	add	r3, r1
 8001ad6:	7819      	ldrb	r1, [r3, #0]
 8001ad8:	1813      	adds	r3, r2, r0
 8001ada:	460a      	mov	r2, r1
 8001adc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4a7f      	ldr	r2, [pc, #508]	; (8001ce4 <send_DHCP_REQUEST+0x508>)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e8      	bne.n	8001ac4 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001af2:	4b7d      	ldr	r3, [pc, #500]	; (8001ce8 <send_DHCP_REQUEST+0x50c>)
 8001af4:	78db      	ldrb	r3, [r3, #3]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001afc:	681c      	ldr	r4, [r3, #0]
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	1c59      	adds	r1, r3, #1
 8001b02:	8179      	strh	r1, [r7, #10]
 8001b04:	461d      	mov	r5, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f000 ff52 	bl	80029b0 <NibbleToHex>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	1963      	adds	r3, r4, r5
 8001b12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001b16:	4b74      	ldr	r3, [pc, #464]	; (8001ce8 <send_DHCP_REQUEST+0x50c>)
 8001b18:	78da      	ldrb	r2, [r3, #3]
 8001b1a:	4b71      	ldr	r3, [pc, #452]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001b1c:	681c      	ldr	r4, [r3, #0]
 8001b1e:	897b      	ldrh	r3, [r7, #10]
 8001b20:	1c59      	adds	r1, r3, #1
 8001b22:	8179      	strh	r1, [r7, #10]
 8001b24:	461d      	mov	r5, r3
 8001b26:	4610      	mov	r0, r2
 8001b28:	f000 ff42 	bl	80029b0 <NibbleToHex>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	1963      	adds	r3, r4, r5
 8001b32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001b36:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <send_DHCP_REQUEST+0x50c>)
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b68      	ldr	r3, [pc, #416]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001b40:	681c      	ldr	r4, [r3, #0]
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	1c59      	adds	r1, r3, #1
 8001b46:	8179      	strh	r1, [r7, #10]
 8001b48:	461d      	mov	r5, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f000 ff30 	bl	80029b0 <NibbleToHex>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	1963      	adds	r3, r4, r5
 8001b56:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <send_DHCP_REQUEST+0x50c>)
 8001b5c:	791a      	ldrb	r2, [r3, #4]
 8001b5e:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001b60:	681c      	ldr	r4, [r3, #0]
 8001b62:	897b      	ldrh	r3, [r7, #10]
 8001b64:	1c59      	adds	r1, r3, #1
 8001b66:	8179      	strh	r1, [r7, #10]
 8001b68:	461d      	mov	r5, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f000 ff20 	bl	80029b0 <NibbleToHex>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	1963      	adds	r3, r4, r5
 8001b76:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001b7a:	4b5b      	ldr	r3, [pc, #364]	; (8001ce8 <send_DHCP_REQUEST+0x50c>)
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001b84:	681c      	ldr	r4, [r3, #0]
 8001b86:	897b      	ldrh	r3, [r7, #10]
 8001b88:	1c59      	adds	r1, r3, #1
 8001b8a:	8179      	strh	r1, [r7, #10]
 8001b8c:	461d      	mov	r5, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f000 ff0e 	bl	80029b0 <NibbleToHex>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	1963      	adds	r3, r4, r5
 8001b9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001b9e:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <send_DHCP_REQUEST+0x50c>)
 8001ba0:	795a      	ldrb	r2, [r3, #5]
 8001ba2:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001ba4:	681c      	ldr	r4, [r3, #0]
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	1c59      	adds	r1, r3, #1
 8001baa:	8179      	strh	r1, [r7, #10]
 8001bac:	461d      	mov	r5, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f000 fefe 	bl	80029b0 <NibbleToHex>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	1963      	adds	r3, r4, r5
 8001bba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	8978      	ldrh	r0, [r7, #10]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3307      	adds	r3, #7
 8001bcc:	1ac3      	subs	r3, r0, r3
 8001bce:	3106      	adds	r1, #6
 8001bd0:	b2c9      	uxtb	r1, r1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	897b      	ldrh	r3, [r7, #10]
 8001be0:	1c59      	adds	r1, r3, #1
 8001be2:	8179      	strh	r1, [r7, #10]
 8001be4:	4413      	add	r3, r2
 8001be6:	2237      	movs	r2, #55	; 0x37
 8001be8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001bec:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	897b      	ldrh	r3, [r7, #10]
 8001bf2:	1c59      	adds	r1, r3, #1
 8001bf4:	8179      	strh	r1, [r7, #10]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	1c59      	adds	r1, r3, #1
 8001c06:	8179      	strh	r1, [r7, #10]
 8001c08:	4413      	add	r3, r2
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001c10:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	8179      	strh	r1, [r7, #10]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	897b      	ldrh	r3, [r7, #10]
 8001c28:	1c59      	adds	r1, r3, #1
 8001c2a:	8179      	strh	r1, [r7, #10]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2206      	movs	r2, #6
 8001c30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	897b      	ldrh	r3, [r7, #10]
 8001c3a:	1c59      	adds	r1, r3, #1
 8001c3c:	8179      	strh	r1, [r7, #10]
 8001c3e:	4413      	add	r3, r2
 8001c40:	220f      	movs	r2, #15
 8001c42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	897b      	ldrh	r3, [r7, #10]
 8001c4c:	1c59      	adds	r1, r3, #1
 8001c4e:	8179      	strh	r1, [r7, #10]
 8001c50:	4413      	add	r3, r2
 8001c52:	223a      	movs	r2, #58	; 0x3a
 8001c54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	8179      	strh	r1, [r7, #10]
 8001c62:	4413      	add	r3, r2
 8001c64:	223b      	movs	r2, #59	; 0x3b
 8001c66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	897b      	ldrh	r3, [r7, #10]
 8001c70:	1c59      	adds	r1, r3, #1
 8001c72:	8179      	strh	r1, [r7, #10]
 8001c74:	4413      	add	r3, r2
 8001c76:	221f      	movs	r2, #31
 8001c78:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	897b      	ldrh	r3, [r7, #10]
 8001c82:	1c59      	adds	r1, r3, #1
 8001c84:	8179      	strh	r1, [r7, #10]
 8001c86:	4413      	add	r3, r2
 8001c88:	2221      	movs	r2, #33	; 0x21
 8001c8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	897b      	ldrh	r3, [r7, #10]
 8001c94:	1c59      	adds	r1, r3, #1
 8001c96:	8179      	strh	r1, [r7, #10]
 8001c98:	4413      	add	r3, r2
 8001c9a:	22ff      	movs	r2, #255	; 0xff
 8001c9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e009      	b.n	8001cba <send_DHCP_REQUEST+0x4de>
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	33ec      	adds	r3, #236	; 0xec
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001cc0:	dbf1      	blt.n	8001ca6 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <send_DHCP_REQUEST+0x510>)
 8001cc4:	7818      	ldrb	r0, [r3, #0]
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <send_DHCP_REQUEST+0x504>)
 8001cc8:	6819      	ldr	r1, [r3, #0]
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2243      	movs	r2, #67	; 0x43
 8001cce:	9200      	str	r2, [sp, #0]
 8001cd0:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001cd4:	f001 f808 	bl	8002ce8 <sendto>

}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce0:	200001bc 	.word	0x200001bc
 8001ce4:	20000024 	.word	0x20000024
 8001ce8:	200001c0 	.word	0x200001c0
 8001cec:	20000190 	.word	0x20000190

08001cf0 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001cfa:	f7ff fab3 	bl	8001264 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001cfe:	2304      	movs	r3, #4
 8001d00:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001d02:	4b9f      	ldr	r3, [pc, #636]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	330a      	adds	r3, #10
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001d0c:	4b9c      	ldr	r3, [pc, #624]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	330a      	adds	r3, #10
 8001d12:	3301      	adds	r3, #1
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001d18:	4b99      	ldr	r3, [pc, #612]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	1c59      	adds	r1, r3, #1
 8001d20:	8179      	strh	r1, [r7, #10]
 8001d22:	4413      	add	r3, r2
 8001d24:	2235      	movs	r2, #53	; 0x35
 8001d26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001d2a:	4b95      	ldr	r3, [pc, #596]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	8179      	strh	r1, [r7, #10]
 8001d34:	4413      	add	r3, r2
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001d3c:	4b90      	ldr	r3, [pc, #576]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	1c59      	adds	r1, r3, #1
 8001d44:	8179      	strh	r1, [r7, #10]
 8001d46:	4413      	add	r3, r2
 8001d48:	2204      	movs	r2, #4
 8001d4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001d4e:	4b8c      	ldr	r3, [pc, #560]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	1c59      	adds	r1, r3, #1
 8001d56:	8179      	strh	r1, [r7, #10]
 8001d58:	4413      	add	r3, r2
 8001d5a:	223d      	movs	r2, #61	; 0x3d
 8001d5c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001d60:	4b87      	ldr	r3, [pc, #540]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	897b      	ldrh	r3, [r7, #10]
 8001d66:	1c59      	adds	r1, r3, #1
 8001d68:	8179      	strh	r1, [r7, #10]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001d72:	4b83      	ldr	r3, [pc, #524]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	897b      	ldrh	r3, [r7, #10]
 8001d78:	1c59      	adds	r1, r3, #1
 8001d7a:	8179      	strh	r1, [r7, #10]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001d84:	4b7e      	ldr	r3, [pc, #504]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	1c59      	adds	r1, r3, #1
 8001d8c:	8179      	strh	r1, [r7, #10]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4b7c      	ldr	r3, [pc, #496]	; (8001f84 <send_DHCP_DECLINE+0x294>)
 8001d92:	7819      	ldrb	r1, [r3, #0]
 8001d94:	1813      	adds	r3, r2, r0
 8001d96:	460a      	mov	r2, r1
 8001d98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001d9c:	4b78      	ldr	r3, [pc, #480]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	897b      	ldrh	r3, [r7, #10]
 8001da2:	1c59      	adds	r1, r3, #1
 8001da4:	8179      	strh	r1, [r7, #10]
 8001da6:	4618      	mov	r0, r3
 8001da8:	4b76      	ldr	r3, [pc, #472]	; (8001f84 <send_DHCP_DECLINE+0x294>)
 8001daa:	7859      	ldrb	r1, [r3, #1]
 8001dac:	1813      	adds	r3, r2, r0
 8001dae:	460a      	mov	r2, r1
 8001db0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001db4:	4b72      	ldr	r3, [pc, #456]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	897b      	ldrh	r3, [r7, #10]
 8001dba:	1c59      	adds	r1, r3, #1
 8001dbc:	8179      	strh	r1, [r7, #10]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <send_DHCP_DECLINE+0x294>)
 8001dc2:	7899      	ldrb	r1, [r3, #2]
 8001dc4:	1813      	adds	r3, r2, r0
 8001dc6:	460a      	mov	r2, r1
 8001dc8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001dcc:	4b6c      	ldr	r3, [pc, #432]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	897b      	ldrh	r3, [r7, #10]
 8001dd2:	1c59      	adds	r1, r3, #1
 8001dd4:	8179      	strh	r1, [r7, #10]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <send_DHCP_DECLINE+0x294>)
 8001dda:	78d9      	ldrb	r1, [r3, #3]
 8001ddc:	1813      	adds	r3, r2, r0
 8001dde:	460a      	mov	r2, r1
 8001de0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001de4:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	897b      	ldrh	r3, [r7, #10]
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	8179      	strh	r1, [r7, #10]
 8001dee:	4618      	mov	r0, r3
 8001df0:	4b64      	ldr	r3, [pc, #400]	; (8001f84 <send_DHCP_DECLINE+0x294>)
 8001df2:	7919      	ldrb	r1, [r3, #4]
 8001df4:	1813      	adds	r3, r2, r0
 8001df6:	460a      	mov	r2, r1
 8001df8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001dfc:	4b60      	ldr	r3, [pc, #384]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	8179      	strh	r1, [r7, #10]
 8001e06:	4618      	mov	r0, r3
 8001e08:	4b5e      	ldr	r3, [pc, #376]	; (8001f84 <send_DHCP_DECLINE+0x294>)
 8001e0a:	7959      	ldrb	r1, [r3, #5]
 8001e0c:	1813      	adds	r3, r2, r0
 8001e0e:	460a      	mov	r2, r1
 8001e10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001e14:	4b5a      	ldr	r3, [pc, #360]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	897b      	ldrh	r3, [r7, #10]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	8179      	strh	r1, [r7, #10]
 8001e1e:	4413      	add	r3, r2
 8001e20:	2232      	movs	r2, #50	; 0x32
 8001e22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001e26:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	897b      	ldrh	r3, [r7, #10]
 8001e2c:	1c59      	adds	r1, r3, #1
 8001e2e:	8179      	strh	r1, [r7, #10]
 8001e30:	4413      	add	r3, r2
 8001e32:	2204      	movs	r2, #4
 8001e34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001e38:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	897b      	ldrh	r3, [r7, #10]
 8001e3e:	1c59      	adds	r1, r3, #1
 8001e40:	8179      	strh	r1, [r7, #10]
 8001e42:	4618      	mov	r0, r3
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <send_DHCP_DECLINE+0x298>)
 8001e46:	7819      	ldrb	r1, [r3, #0]
 8001e48:	1813      	adds	r3, r2, r0
 8001e4a:	460a      	mov	r2, r1
 8001e4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001e50:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	897b      	ldrh	r3, [r7, #10]
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	8179      	strh	r1, [r7, #10]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <send_DHCP_DECLINE+0x298>)
 8001e5e:	7859      	ldrb	r1, [r3, #1]
 8001e60:	1813      	adds	r3, r2, r0
 8001e62:	460a      	mov	r2, r1
 8001e64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001e68:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	897b      	ldrh	r3, [r7, #10]
 8001e6e:	1c59      	adds	r1, r3, #1
 8001e70:	8179      	strh	r1, [r7, #10]
 8001e72:	4618      	mov	r0, r3
 8001e74:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <send_DHCP_DECLINE+0x298>)
 8001e76:	7899      	ldrb	r1, [r3, #2]
 8001e78:	1813      	adds	r3, r2, r0
 8001e7a:	460a      	mov	r2, r1
 8001e7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	897b      	ldrh	r3, [r7, #10]
 8001e86:	1c59      	adds	r1, r3, #1
 8001e88:	8179      	strh	r1, [r7, #10]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <send_DHCP_DECLINE+0x298>)
 8001e8e:	78d9      	ldrb	r1, [r3, #3]
 8001e90:	1813      	adds	r3, r2, r0
 8001e92:	460a      	mov	r2, r1
 8001e94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001e98:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	897b      	ldrh	r3, [r7, #10]
 8001e9e:	1c59      	adds	r1, r3, #1
 8001ea0:	8179      	strh	r1, [r7, #10]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2236      	movs	r2, #54	; 0x36
 8001ea6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001eaa:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	897b      	ldrh	r3, [r7, #10]
 8001eb0:	1c59      	adds	r1, r3, #1
 8001eb2:	8179      	strh	r1, [r7, #10]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001ebc:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	897b      	ldrh	r3, [r7, #10]
 8001ec2:	1c59      	adds	r1, r3, #1
 8001ec4:	8179      	strh	r1, [r7, #10]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <send_DHCP_DECLINE+0x29c>)
 8001eca:	7819      	ldrb	r1, [r3, #0]
 8001ecc:	1813      	adds	r3, r2, r0
 8001ece:	460a      	mov	r2, r1
 8001ed0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	897b      	ldrh	r3, [r7, #10]
 8001eda:	1c59      	adds	r1, r3, #1
 8001edc:	8179      	strh	r1, [r7, #10]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <send_DHCP_DECLINE+0x29c>)
 8001ee2:	7859      	ldrb	r1, [r3, #1]
 8001ee4:	1813      	adds	r3, r2, r0
 8001ee6:	460a      	mov	r2, r1
 8001ee8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	897b      	ldrh	r3, [r7, #10]
 8001ef2:	1c59      	adds	r1, r3, #1
 8001ef4:	8179      	strh	r1, [r7, #10]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <send_DHCP_DECLINE+0x29c>)
 8001efa:	7899      	ldrb	r1, [r3, #2]
 8001efc:	1813      	adds	r3, r2, r0
 8001efe:	460a      	mov	r2, r1
 8001f00:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	897b      	ldrh	r3, [r7, #10]
 8001f0a:	1c59      	adds	r1, r3, #1
 8001f0c:	8179      	strh	r1, [r7, #10]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <send_DHCP_DECLINE+0x29c>)
 8001f12:	78d9      	ldrb	r1, [r3, #3]
 8001f14:	1813      	adds	r3, r2, r0
 8001f16:	460a      	mov	r2, r1
 8001f18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	897b      	ldrh	r3, [r7, #10]
 8001f22:	1c59      	adds	r1, r3, #1
 8001f24:	8179      	strh	r1, [r7, #10]
 8001f26:	4413      	add	r3, r2
 8001f28:	22ff      	movs	r2, #255	; 0xff
 8001f2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001f2e:	897b      	ldrh	r3, [r7, #10]
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	e009      	b.n	8001f48 <send_DHCP_DECLINE+0x258>
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	33ec      	adds	r3, #236	; 0xec
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3301      	adds	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001f4e:	dbf1      	blt.n	8001f34 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001f50:	23ff      	movs	r3, #255	; 0xff
 8001f52:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001f54:	23ff      	movs	r3, #255	; 0xff
 8001f56:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001f58:	23ff      	movs	r3, #255	; 0xff
 8001f5a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001f5c:	23ff      	movs	r3, #255	; 0xff
 8001f5e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <send_DHCP_DECLINE+0x2a0>)
 8001f62:	7818      	ldrb	r0, [r3, #0]
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <send_DHCP_DECLINE+0x290>)
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	2243      	movs	r2, #67	; 0x43
 8001f6c:	9200      	str	r2, [sp, #0]
 8001f6e:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001f72:	f000 feb9 	bl	8002ce8 <sendto>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200001bc 	.word	0x200001bc
 8001f84:	200001c0 	.word	0x200001c0
 8001f88:	200001a0 	.word	0x200001a0
 8001f8c:	20000194 	.word	0x20000194
 8001f90:	20000190 	.word	0x20000190

08001f94 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001f9e:	4ba1      	ldr	r3, [pc, #644]	; (8002224 <parseDHCPMSG+0x290>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe ff99 	bl	8000eda <getSn_RX_RSR>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	823b      	strh	r3, [r7, #16]
 8001fac:	8a3b      	ldrh	r3, [r7, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d011      	beq.n	8001fd6 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001fb2:	4b9c      	ldr	r3, [pc, #624]	; (8002224 <parseDHCPMSG+0x290>)
 8001fb4:	7818      	ldrb	r0, [r3, #0]
 8001fb6:	4b9c      	ldr	r3, [pc, #624]	; (8002228 <parseDHCPMSG+0x294>)
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	1d3c      	adds	r4, r7, #4
 8001fbc:	8a3a      	ldrh	r2, [r7, #16]
 8001fbe:	1cbb      	adds	r3, r7, #2
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	f000 ffc6 	bl	8002f54 <recvfrom>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	2b43      	cmp	r3, #67	; 0x43
 8001fd0:	f040 81ed 	bne.w	80023ae <parseDHCPMSG+0x41a>
 8001fd4:	e001      	b.n	8001fda <parseDHCPMSG+0x46>
   else return 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e1eb      	b.n	80023b2 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001fda:	4b93      	ldr	r3, [pc, #588]	; (8002228 <parseDHCPMSG+0x294>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	7f1a      	ldrb	r2, [r3, #28]
 8001fe0:	4b92      	ldr	r3, [pc, #584]	; (800222c <parseDHCPMSG+0x298>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d124      	bne.n	8002032 <parseDHCPMSG+0x9e>
 8001fe8:	4b8f      	ldr	r3, [pc, #572]	; (8002228 <parseDHCPMSG+0x294>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	7f5a      	ldrb	r2, [r3, #29]
 8001fee:	4b8f      	ldr	r3, [pc, #572]	; (800222c <parseDHCPMSG+0x298>)
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d11d      	bne.n	8002032 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001ff6:	4b8c      	ldr	r3, [pc, #560]	; (8002228 <parseDHCPMSG+0x294>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	7f9a      	ldrb	r2, [r3, #30]
 8001ffc:	4b8b      	ldr	r3, [pc, #556]	; (800222c <parseDHCPMSG+0x298>)
 8001ffe:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d116      	bne.n	8002032 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002004:	4b88      	ldr	r3, [pc, #544]	; (8002228 <parseDHCPMSG+0x294>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	7fda      	ldrb	r2, [r3, #31]
 800200a:	4b88      	ldr	r3, [pc, #544]	; (800222c <parseDHCPMSG+0x298>)
 800200c:	78db      	ldrb	r3, [r3, #3]
 800200e:	429a      	cmp	r2, r3
 8002010:	d10f      	bne.n	8002032 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002012:	4b85      	ldr	r3, [pc, #532]	; (8002228 <parseDHCPMSG+0x294>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f893 2020 	ldrb.w	r2, [r3, #32]
 800201a:	4b84      	ldr	r3, [pc, #528]	; (800222c <parseDHCPMSG+0x298>)
 800201c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d107      	bne.n	8002032 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002022:	4b81      	ldr	r3, [pc, #516]	; (8002228 <parseDHCPMSG+0x294>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800202a:	4b80      	ldr	r3, [pc, #512]	; (800222c <parseDHCPMSG+0x298>)
 800202c:	795b      	ldrb	r3, [r3, #5]
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8002032:	2300      	movs	r3, #0
 8002034:	e1bd      	b.n	80023b2 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8002036:	4b7e      	ldr	r3, [pc, #504]	; (8002230 <parseDHCPMSG+0x29c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10b      	bne.n	8002056 <parseDHCPMSG+0xc2>
 800203e:	4b7c      	ldr	r3, [pc, #496]	; (8002230 <parseDHCPMSG+0x29c>)
 8002040:	785b      	ldrb	r3, [r3, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d107      	bne.n	8002056 <parseDHCPMSG+0xc2>
 8002046:	4b7a      	ldr	r3, [pc, #488]	; (8002230 <parseDHCPMSG+0x29c>)
 8002048:	789b      	ldrb	r3, [r3, #2]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <parseDHCPMSG+0xc2>
 800204e:	4b78      	ldr	r3, [pc, #480]	; (8002230 <parseDHCPMSG+0x29c>)
 8002050:	78db      	ldrb	r3, [r3, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d029      	beq.n	80020aa <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002056:	793a      	ldrb	r2, [r7, #4]
 8002058:	4b75      	ldr	r3, [pc, #468]	; (8002230 <parseDHCPMSG+0x29c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d10e      	bne.n	800207e <parseDHCPMSG+0xea>
 8002060:	797a      	ldrb	r2, [r7, #5]
 8002062:	4b73      	ldr	r3, [pc, #460]	; (8002230 <parseDHCPMSG+0x29c>)
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	429a      	cmp	r2, r3
 8002068:	d109      	bne.n	800207e <parseDHCPMSG+0xea>
 800206a:	79ba      	ldrb	r2, [r7, #6]
 800206c:	4b70      	ldr	r3, [pc, #448]	; (8002230 <parseDHCPMSG+0x29c>)
 800206e:	789b      	ldrb	r3, [r3, #2]
 8002070:	429a      	cmp	r2, r3
 8002072:	d104      	bne.n	800207e <parseDHCPMSG+0xea>
 8002074:	79fa      	ldrb	r2, [r7, #7]
 8002076:	4b6e      	ldr	r3, [pc, #440]	; (8002230 <parseDHCPMSG+0x29c>)
 8002078:	78db      	ldrb	r3, [r3, #3]
 800207a:	429a      	cmp	r2, r3
 800207c:	d015      	beq.n	80020aa <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800207e:	793a      	ldrb	r2, [r7, #4]
 8002080:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <parseDHCPMSG+0x2a0>)
 8002082:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002084:	429a      	cmp	r2, r3
 8002086:	d10e      	bne.n	80020a6 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002088:	797a      	ldrb	r2, [r7, #5]
 800208a:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <parseDHCPMSG+0x2a0>)
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	429a      	cmp	r2, r3
 8002090:	d109      	bne.n	80020a6 <parseDHCPMSG+0x112>
 8002092:	79ba      	ldrb	r2, [r7, #6]
 8002094:	4b67      	ldr	r3, [pc, #412]	; (8002234 <parseDHCPMSG+0x2a0>)
 8002096:	789b      	ldrb	r3, [r3, #2]
 8002098:	429a      	cmp	r2, r3
 800209a:	d104      	bne.n	80020a6 <parseDHCPMSG+0x112>
 800209c:	79fa      	ldrb	r2, [r7, #7]
 800209e:	4b65      	ldr	r3, [pc, #404]	; (8002234 <parseDHCPMSG+0x2a0>)
 80020a0:	78db      	ldrb	r3, [r3, #3]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e183      	b.n	80023b2 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 80020aa:	4b5f      	ldr	r3, [pc, #380]	; (8002228 <parseDHCPMSG+0x294>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	33f0      	adds	r3, #240	; 0xf0
 80020b4:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 80020b6:	8a3b      	ldrh	r3, [r7, #16]
 80020b8:	3bf0      	subs	r3, #240	; 0xf0
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4413      	add	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80020c0:	e170      	b.n	80023a4 <parseDHCPMSG+0x410>

			switch ( *p ) {
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b36      	cmp	r3, #54	; 0x36
 80020c8:	dc76      	bgt.n	80021b8 <parseDHCPMSG+0x224>
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f2c0 815d 	blt.w	800238a <parseDHCPMSG+0x3f6>
 80020d0:	2b36      	cmp	r3, #54	; 0x36
 80020d2:	f200 815a 	bhi.w	800238a <parseDHCPMSG+0x3f6>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <parseDHCPMSG+0x148>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080021c5 	.word	0x080021c5
 80020e0:	080021e5 	.word	0x080021e5
 80020e4:	0800238b 	.word	0x0800238b
 80020e8:	0800223d 	.word	0x0800223d
 80020ec:	0800238b 	.word	0x0800238b
 80020f0:	0800238b 	.word	0x0800238b
 80020f4:	08002289 	.word	0x08002289
 80020f8:	0800238b 	.word	0x0800238b
 80020fc:	0800238b 	.word	0x0800238b
 8002100:	0800238b 	.word	0x0800238b
 8002104:	0800238b 	.word	0x0800238b
 8002108:	0800238b 	.word	0x0800238b
 800210c:	0800238b 	.word	0x0800238b
 8002110:	0800238b 	.word	0x0800238b
 8002114:	0800238b 	.word	0x0800238b
 8002118:	0800238b 	.word	0x0800238b
 800211c:	0800238b 	.word	0x0800238b
 8002120:	0800238b 	.word	0x0800238b
 8002124:	0800238b 	.word	0x0800238b
 8002128:	0800238b 	.word	0x0800238b
 800212c:	0800238b 	.word	0x0800238b
 8002130:	0800238b 	.word	0x0800238b
 8002134:	0800238b 	.word	0x0800238b
 8002138:	0800238b 	.word	0x0800238b
 800213c:	0800238b 	.word	0x0800238b
 8002140:	0800238b 	.word	0x0800238b
 8002144:	0800238b 	.word	0x0800238b
 8002148:	0800238b 	.word	0x0800238b
 800214c:	0800238b 	.word	0x0800238b
 8002150:	0800238b 	.word	0x0800238b
 8002154:	0800238b 	.word	0x0800238b
 8002158:	0800238b 	.word	0x0800238b
 800215c:	0800238b 	.word	0x0800238b
 8002160:	0800238b 	.word	0x0800238b
 8002164:	0800238b 	.word	0x0800238b
 8002168:	0800238b 	.word	0x0800238b
 800216c:	0800238b 	.word	0x0800238b
 8002170:	0800238b 	.word	0x0800238b
 8002174:	0800238b 	.word	0x0800238b
 8002178:	0800238b 	.word	0x0800238b
 800217c:	0800238b 	.word	0x0800238b
 8002180:	0800238b 	.word	0x0800238b
 8002184:	0800238b 	.word	0x0800238b
 8002188:	0800238b 	.word	0x0800238b
 800218c:	0800238b 	.word	0x0800238b
 8002190:	0800238b 	.word	0x0800238b
 8002194:	0800238b 	.word	0x0800238b
 8002198:	0800238b 	.word	0x0800238b
 800219c:	0800238b 	.word	0x0800238b
 80021a0:	0800238b 	.word	0x0800238b
 80021a4:	0800238b 	.word	0x0800238b
 80021a8:	080022d5 	.word	0x080022d5
 80021ac:	0800238b 	.word	0x0800238b
 80021b0:	080021cd 	.word	0x080021cd
 80021b4:	08002331 	.word	0x08002331
 80021b8:	2bff      	cmp	r3, #255	; 0xff
 80021ba:	f040 80e6 	bne.w	800238a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	617b      	str	r3, [r7, #20]
   				break;
 80021c2:	e0ef      	b.n	80023a4 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
   				break;
 80021ca:	e0eb      	b.n	80023a4 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3301      	adds	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
   				p++;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	617a      	str	r2, [r7, #20]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	74fb      	strb	r3, [r7, #19]
   				break;
 80021e2:	e0df      	b.n	80023a4 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3301      	adds	r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
   				p++;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	617a      	str	r2, [r7, #20]
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <parseDHCPMSG+0x2a4>)
 80021fa:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	617a      	str	r2, [r7, #20]
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <parseDHCPMSG+0x2a4>)
 8002206:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	617a      	str	r2, [r7, #20]
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <parseDHCPMSG+0x2a4>)
 8002212:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	617a      	str	r2, [r7, #20]
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <parseDHCPMSG+0x2a4>)
 800221e:	70da      	strb	r2, [r3, #3]
   				break;
 8002220:	e0c0      	b.n	80023a4 <parseDHCPMSG+0x410>
 8002222:	bf00      	nop
 8002224:	20000190 	.word	0x20000190
 8002228:	200001bc 	.word	0x200001bc
 800222c:	200001c0 	.word	0x200001c0
 8002230:	20000194 	.word	0x20000194
 8002234:	20000198 	.word	0x20000198
 8002238:	200001a8 	.word	0x200001a8
   			case routersOnSubnet :
   				p++;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	617a      	str	r2, [r7, #20]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	617a      	str	r2, [r7, #20]
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <parseDHCPMSG+0x428>)
 8002256:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	617a      	str	r2, [r7, #20]
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	4b56      	ldr	r3, [pc, #344]	; (80023bc <parseDHCPMSG+0x428>)
 8002262:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	617a      	str	r2, [r7, #20]
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <parseDHCPMSG+0x428>)
 800226e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	617a      	str	r2, [r7, #20]
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <parseDHCPMSG+0x428>)
 800227a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	3b04      	subs	r3, #4
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4413      	add	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
   				break;
 8002286:	e08d      	b.n	80023a4 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	617a      	str	r2, [r7, #20]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	617a      	str	r2, [r7, #20]
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <parseDHCPMSG+0x42c>)
 80022a2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	617a      	str	r2, [r7, #20]
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <parseDHCPMSG+0x42c>)
 80022ae:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	617a      	str	r2, [r7, #20]
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <parseDHCPMSG+0x42c>)
 80022ba:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	617a      	str	r2, [r7, #20]
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <parseDHCPMSG+0x42c>)
 80022c6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	3b04      	subs	r3, #4
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4413      	add	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
   				break;
 80022d2:	e067      	b.n	80023a4 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3301      	adds	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	617a      	str	r2, [r7, #20]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	617a      	str	r2, [r7, #20]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <parseDHCPMSG+0x430>)
 80022f0:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <parseDHCPMSG+0x430>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	021a      	lsls	r2, r3, #8
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1c59      	adds	r1, r3, #1
 80022fc:	6179      	str	r1, [r7, #20]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4413      	add	r3, r2
 8002302:	4a30      	ldr	r2, [pc, #192]	; (80023c4 <parseDHCPMSG+0x430>)
 8002304:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002306:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <parseDHCPMSG+0x430>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	021a      	lsls	r2, r3, #8
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	1c59      	adds	r1, r3, #1
 8002310:	6179      	str	r1, [r7, #20]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4413      	add	r3, r2
 8002316:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <parseDHCPMSG+0x430>)
 8002318:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <parseDHCPMSG+0x430>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	021a      	lsls	r2, r3, #8
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1c59      	adds	r1, r3, #1
 8002324:	6179      	str	r1, [r7, #20]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4413      	add	r3, r2
 800232a:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <parseDHCPMSG+0x430>)
 800232c:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 800232e:	e039      	b.n	80023a4 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	617a      	str	r2, [r7, #20]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	617a      	str	r2, [r7, #20]
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <parseDHCPMSG+0x434>)
 800234a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	617a      	str	r2, [r7, #20]
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <parseDHCPMSG+0x434>)
 8002356:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	617a      	str	r2, [r7, #20]
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <parseDHCPMSG+0x434>)
 8002362:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	617a      	str	r2, [r7, #20]
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <parseDHCPMSG+0x434>)
 800236e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002370:	793a      	ldrb	r2, [r7, #4]
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <parseDHCPMSG+0x438>)
 8002374:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8002376:	797a      	ldrb	r2, [r7, #5]
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <parseDHCPMSG+0x438>)
 800237a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 800237c:	79ba      	ldrb	r2, [r7, #6]
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <parseDHCPMSG+0x438>)
 8002380:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8002382:	79fa      	ldrb	r2, [r7, #7]
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <parseDHCPMSG+0x438>)
 8002386:	70da      	strb	r2, [r3, #3]
   				break;
 8002388:	e00c      	b.n	80023a4 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	617a      	str	r2, [r7, #20]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800239a:	7afb      	ldrb	r3, [r7, #11]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4413      	add	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
   				break;
 80023a2:	bf00      	nop
		while ( p < e ) {
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f4ff ae8a 	bcc.w	80020c2 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80023ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200001a4 	.word	0x200001a4
 80023c0:	200001ac 	.word	0x200001ac
 80023c4:	2000001c 	.word	0x2000001c
 80023c8:	20000194 	.word	0x20000194
 80023cc:	20000198 	.word	0x20000198

080023d0 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80023d6:	4b7f      	ldr	r3, [pc, #508]	; (80025d4 <DHCP_run+0x204>)
 80023d8:	f993 3000 	ldrsb.w	r3, [r3]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	d101      	bne.n	80023e4 <DHCP_run+0x14>
 80023e0:	2305      	movs	r3, #5
 80023e2:	e0f3      	b.n	80025cc <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80023e4:	4b7c      	ldr	r3, [pc, #496]	; (80025d8 <DHCP_run+0x208>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	3301      	adds	r3, #1
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fbcc 	bl	8000b90 <WIZCHIP_READ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b22      	cmp	r3, #34	; 0x22
 80023fc:	d006      	beq.n	800240c <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80023fe:	4b76      	ldr	r3, [pc, #472]	; (80025d8 <DHCP_run+0x208>)
 8002400:	7818      	ldrb	r0, [r3, #0]
 8002402:	2300      	movs	r3, #0
 8002404:	2244      	movs	r2, #68	; 0x44
 8002406:	2102      	movs	r1, #2
 8002408:	f000 faec 	bl	80029e4 <socket>

	ret = DHCP_RUNNING;
 800240c:	2301      	movs	r3, #1
 800240e:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002410:	f7ff fdc0 	bl	8001f94 <parseDHCPMSG>
 8002414:	4603      	mov	r3, r0
 8002416:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8002418:	4b6e      	ldr	r3, [pc, #440]	; (80025d4 <DHCP_run+0x204>)
 800241a:	f993 3000 	ldrsb.w	r3, [r3]
 800241e:	2b04      	cmp	r3, #4
 8002420:	f200 80d0 	bhi.w	80025c4 <DHCP_run+0x1f4>
 8002424:	a201      	add	r2, pc, #4	; (adr r2, 800242c <DHCP_run+0x5c>)
 8002426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242a:	bf00      	nop
 800242c:	08002441 	.word	0x08002441
 8002430:	08002465 	.word	0x08002465
 8002434:	080024a9 	.word	0x080024a9
 8002438:	080024f9 	.word	0x080024f9
 800243c:	08002553 	.word	0x08002553
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8002440:	4b66      	ldr	r3, [pc, #408]	; (80025dc <DHCP_run+0x20c>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8002446:	4b65      	ldr	r3, [pc, #404]	; (80025dc <DHCP_run+0x20c>)
 8002448:	2200      	movs	r2, #0
 800244a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800244c:	4b63      	ldr	r3, [pc, #396]	; (80025dc <DHCP_run+0x20c>)
 800244e:	2200      	movs	r2, #0
 8002450:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8002452:	4b62      	ldr	r3, [pc, #392]	; (80025dc <DHCP_run+0x20c>)
 8002454:	2200      	movs	r2, #0
 8002456:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8002458:	f7fe fffa 	bl	8001450 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800245c:	4b5d      	ldr	r3, [pc, #372]	; (80025d4 <DHCP_run+0x204>)
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
   		break;
 8002462:	e0b2      	b.n	80025ca <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002464:	79bb      	ldrb	r3, [r7, #6]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d119      	bne.n	800249e <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <DHCP_run+0x210>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	7c1a      	ldrb	r2, [r3, #16]
 8002470:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <DHCP_run+0x20c>)
 8002472:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002474:	4b5a      	ldr	r3, [pc, #360]	; (80025e0 <DHCP_run+0x210>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	7c5a      	ldrb	r2, [r3, #17]
 800247a:	4b58      	ldr	r3, [pc, #352]	; (80025dc <DHCP_run+0x20c>)
 800247c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800247e:	4b58      	ldr	r3, [pc, #352]	; (80025e0 <DHCP_run+0x210>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	7c9a      	ldrb	r2, [r3, #18]
 8002484:	4b55      	ldr	r3, [pc, #340]	; (80025dc <DHCP_run+0x20c>)
 8002486:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002488:	4b55      	ldr	r3, [pc, #340]	; (80025e0 <DHCP_run+0x210>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	7cda      	ldrb	r2, [r3, #19]
 800248e:	4b53      	ldr	r3, [pc, #332]	; (80025dc <DHCP_run+0x20c>)
 8002490:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002492:	f7ff f9a3 	bl	80017dc <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8002496:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <DHCP_run+0x204>)
 8002498:	2202      	movs	r2, #2
 800249a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800249c:	e095      	b.n	80025ca <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800249e:	f000 f8b1 	bl	8002604 <check_DHCP_timeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
         break;
 80024a6:	e090      	b.n	80025ca <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d116      	bne.n	80024dc <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80024ae:	f000 f909 	bl	80026c4 <check_DHCP_leasedIP>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80024b8:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <DHCP_run+0x214>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4798      	blx	r3
					reset_DHCP_timeout();
 80024be:	f000 f9d3 	bl	8002868 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80024c2:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <DHCP_run+0x204>)
 80024c4:	2203      	movs	r2, #3
 80024c6:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80024c8:	e07f      	b.n	80025ca <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80024ca:	f000 f9cd 	bl	8002868 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80024ce:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <DHCP_run+0x218>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80024d4:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <DHCP_run+0x204>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
		break;
 80024da:	e076      	b.n	80025ca <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80024dc:	79bb      	ldrb	r3, [r7, #6]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d105      	bne.n	80024ee <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80024e2:	f000 f9c1 	bl	8002868 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <DHCP_run+0x204>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
		break;
 80024ec:	e06d      	b.n	80025ca <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80024ee:	f000 f889 	bl	8002604 <check_DHCP_timeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
		break;
 80024f6:	e068      	b.n	80025ca <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80024f8:	2304      	movs	r3, #4
 80024fa:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80024fc:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <DHCP_run+0x21c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002504:	d060      	beq.n	80025c8 <DHCP_run+0x1f8>
 8002506:	4b39      	ldr	r3, [pc, #228]	; (80025ec <DHCP_run+0x21c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	085a      	lsrs	r2, r3, #1
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <DHCP_run+0x220>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d259      	bcs.n	80025c8 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <DHCP_run+0x20c>)
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <DHCP_run+0x224>)
 800251e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <DHCP_run+0x20c>)
 8002522:	785a      	ldrb	r2, [r3, #1]
 8002524:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <DHCP_run+0x224>)
 8002526:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8002528:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <DHCP_run+0x20c>)
 800252a:	789a      	ldrb	r2, [r3, #2]
 800252c:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <DHCP_run+0x224>)
 800252e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8002530:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <DHCP_run+0x20c>)
 8002532:	78da      	ldrb	r2, [r3, #3]
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <DHCP_run+0x224>)
 8002536:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <DHCP_run+0x228>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	4a2e      	ldr	r2, [pc, #184]	; (80025f8 <DHCP_run+0x228>)
 8002540:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8002542:	f7ff f94b 	bl	80017dc <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8002546:	f000 f98f 	bl	8002868 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <DHCP_run+0x204>)
 800254c:	2204      	movs	r2, #4
 800254e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002550:	e03a      	b.n	80025c8 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8002552:	2304      	movs	r3, #4
 8002554:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8002556:	79bb      	ldrb	r3, [r7, #6]
 8002558:	2b05      	cmp	r3, #5
 800255a:	d125      	bne.n	80025a8 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <DHCP_run+0x22c>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <DHCP_run+0x224>)
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <DHCP_run+0x20c>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d111      	bne.n	8002592 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <DHCP_run+0x224>)
 8002570:	785a      	ldrb	r2, [r3, #1]
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <DHCP_run+0x20c>)
 8002574:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002576:	429a      	cmp	r2, r3
 8002578:	d10b      	bne.n	8002592 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <DHCP_run+0x224>)
 800257c:	789a      	ldrb	r2, [r3, #2]
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <DHCP_run+0x20c>)
 8002580:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d105      	bne.n	8002592 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <DHCP_run+0x224>)
 8002588:	78da      	ldrb	r2, [r3, #3]
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <DHCP_run+0x20c>)
 800258c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d004      	beq.n	800259c <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002592:	2303      	movs	r3, #3
 8002594:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <DHCP_run+0x230>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800259c:	f000 f964 	bl	8002868 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <DHCP_run+0x204>)
 80025a2:	2203      	movs	r2, #3
 80025a4:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80025a6:	e010      	b.n	80025ca <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d105      	bne.n	80025ba <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80025ae:	f000 f95b 	bl	8002868 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <DHCP_run+0x204>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
	   	break;
 80025b8:	e007      	b.n	80025ca <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80025ba:	f000 f823 	bl	8002604 <check_DHCP_timeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
	   	break;
 80025c2:	e002      	b.n	80025ca <DHCP_run+0x1fa>
		default :
   		break;
 80025c4:	bf00      	nop
 80025c6:	e000      	b.n	80025ca <DHCP_run+0x1fa>
		break;
 80025c8:	bf00      	nop
	}

	return ret;
 80025ca:	79fb      	ldrb	r3, [r7, #7]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200001b0 	.word	0x200001b0
 80025d8:	20000190 	.word	0x20000190
 80025dc:	200001a0 	.word	0x200001a0
 80025e0:	200001bc 	.word	0x200001bc
 80025e4:	2000002c 	.word	0x2000002c
 80025e8:	20000034 	.word	0x20000034
 80025ec:	2000001c 	.word	0x2000001c
 80025f0:	200001b4 	.word	0x200001b4
 80025f4:	2000019c 	.word	0x2000019c
 80025f8:	200001b8 	.word	0x200001b8
 80025fc:	200001b1 	.word	0x200001b1
 8002600:	20000030 	.word	0x20000030

08002604 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800260a:	2301      	movs	r3, #1
 800260c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800260e:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <check_DHCP_timeout+0xb0>)
 8002610:	f993 3000 	ldrsb.w	r3, [r3]
 8002614:	2b01      	cmp	r3, #1
 8002616:	dc2d      	bgt.n	8002674 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <check_DHCP_timeout+0xb4>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <check_DHCP_timeout+0xb8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d242      	bcs.n	80026aa <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <check_DHCP_timeout+0xbc>)
 8002626:	f993 3000 	ldrsb.w	r3, [r3]
 800262a:	2b04      	cmp	r3, #4
 800262c:	d00c      	beq.n	8002648 <check_DHCP_timeout+0x44>
 800262e:	2b04      	cmp	r3, #4
 8002630:	dc0d      	bgt.n	800264e <check_DHCP_timeout+0x4a>
 8002632:	2b01      	cmp	r3, #1
 8002634:	d002      	beq.n	800263c <check_DHCP_timeout+0x38>
 8002636:	2b02      	cmp	r3, #2
 8002638:	d003      	beq.n	8002642 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800263a:	e008      	b.n	800264e <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800263c:	f7fe ff08 	bl	8001450 <send_DHCP_DISCOVER>
				break;
 8002640:	e006      	b.n	8002650 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002642:	f7ff f8cb 	bl	80017dc <send_DHCP_REQUEST>
				break;
 8002646:	e003      	b.n	8002650 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002648:	f7ff f8c8 	bl	80017dc <send_DHCP_REQUEST>
				break;
 800264c:	e000      	b.n	8002650 <check_DHCP_timeout+0x4c>
				break;
 800264e:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <check_DHCP_timeout+0xb8>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8002656:	4b19      	ldr	r3, [pc, #100]	; (80026bc <check_DHCP_timeout+0xb8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330a      	adds	r3, #10
 800265c:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <check_DHCP_timeout+0xb4>)
 800265e:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <check_DHCP_timeout+0xb0>)
 8002662:	f993 3000 	ldrsb.w	r3, [r3]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	b25a      	sxtb	r2, r3
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <check_DHCP_timeout+0xb0>)
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e01a      	b.n	80026aa <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <check_DHCP_timeout+0xbc>)
 8002676:	f993 3000 	ldrsb.w	r3, [r3]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d00c      	beq.n	8002698 <check_DHCP_timeout+0x94>
 800267e:	2b04      	cmp	r3, #4
 8002680:	dc10      	bgt.n	80026a4 <check_DHCP_timeout+0xa0>
 8002682:	2b01      	cmp	r3, #1
 8002684:	d002      	beq.n	800268c <check_DHCP_timeout+0x88>
 8002686:	2b02      	cmp	r3, #2
 8002688:	d006      	beq.n	8002698 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800268a:	e00b      	b.n	80026a4 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <check_DHCP_timeout+0xbc>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002692:	2300      	movs	r3, #0
 8002694:	71fb      	strb	r3, [r7, #7]
				break;
 8002696:	e006      	b.n	80026a6 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002698:	f7fe feda 	bl	8001450 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <check_DHCP_timeout+0xbc>)
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
				break;
 80026a2:	e000      	b.n	80026a6 <check_DHCP_timeout+0xa2>
				break;
 80026a4:	bf00      	nop
		}
		reset_DHCP_timeout();
 80026a6:	f000 f8df 	bl	8002868 <reset_DHCP_timeout>
	}
	return ret;
 80026aa:	79fb      	ldrb	r3, [r7, #7]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200001b1 	.word	0x200001b1
 80026b8:	20000020 	.word	0x20000020
 80026bc:	200001b4 	.word	0x200001b4
 80026c0:	200001b0 	.word	0x200001b0

080026c4 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80026ca:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80026ce:	f7fe fa5f 	bl	8000b90 <WIZCHIP_READ>
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80026d6:	2103      	movs	r1, #3
 80026d8:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80026dc:	f7fe faa4 	bl	8000c28 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <check_DHCP_leasedIP+0x6c>)
 80026e2:	7818      	ldrb	r0, [r3, #0]
 80026e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <check_DHCP_leasedIP+0x70>)
 80026ec:	2211      	movs	r2, #17
 80026ee:	4912      	ldr	r1, [pc, #72]	; (8002738 <check_DHCP_leasedIP+0x74>)
 80026f0:	f000 fafa 	bl	8002ce8 <sendto>
 80026f4:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80026fe:	f7fe fa93 	bl	8000c28 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f113 0f0d 	cmn.w	r3, #13
 8002708:	d101      	bne.n	800270e <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800270a:	2301      	movs	r3, #1
 800270c:	e00c      	b.n	8002728 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800270e:	f7ff faef 	bl	8001cf0 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <check_DHCP_leasedIP+0x78>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002718:	bf00      	nop
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <check_DHCP_leasedIP+0x78>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d9f9      	bls.n	800271a <check_DHCP_leasedIP+0x56>

		return 0;
 8002726:	2300      	movs	r3, #0
	}
}	
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000190 	.word	0x20000190
 8002734:	200001a0 	.word	0x200001a0
 8002738:	08006b48 	.word	0x08006b48
 800273c:	200001b4 	.word	0x200001b4

08002740 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002750:	2206      	movs	r2, #6
 8002752:	493f      	ldr	r1, [pc, #252]	; (8002850 <DHCP_init+0x110>)
 8002754:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002758:	f7fe fab4 	bl	8000cc4 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800275c:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <DHCP_init+0x110>)
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <DHCP_init+0x110>)
 8002762:	785b      	ldrb	r3, [r3, #1]
 8002764:	4313      	orrs	r3, r2
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b39      	ldr	r3, [pc, #228]	; (8002850 <DHCP_init+0x110>)
 800276a:	789b      	ldrb	r3, [r3, #2]
 800276c:	4313      	orrs	r3, r2
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b37      	ldr	r3, [pc, #220]	; (8002850 <DHCP_init+0x110>)
 8002772:	78db      	ldrb	r3, [r3, #3]
 8002774:	4313      	orrs	r3, r2
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <DHCP_init+0x110>)
 800277a:	791b      	ldrb	r3, [r3, #4]
 800277c:	4313      	orrs	r3, r2
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b33      	ldr	r3, [pc, #204]	; (8002850 <DHCP_init+0x110>)
 8002782:	795b      	ldrb	r3, [r3, #5]
 8002784:	4313      	orrs	r3, r2
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d117      	bne.n	80027bc <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800278c:	4b30      	ldr	r3, [pc, #192]	; (8002850 <DHCP_init+0x110>)
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <DHCP_init+0x110>)
 8002794:	2208      	movs	r2, #8
 8002796:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002798:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <DHCP_init+0x110>)
 800279a:	22dc      	movs	r2, #220	; 0xdc
 800279c:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800279e:	4b2c      	ldr	r3, [pc, #176]	; (8002850 <DHCP_init+0x110>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <DHCP_init+0x110>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 80027aa:	4b29      	ldr	r3, [pc, #164]	; (8002850 <DHCP_init+0x110>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 80027b0:	2206      	movs	r2, #6
 80027b2:	4927      	ldr	r1, [pc, #156]	; (8002850 <DHCP_init+0x110>)
 80027b4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80027b8:	f7fe fae4 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80027bc:	4a25      	ldr	r2, [pc, #148]	; (8002854 <DHCP_init+0x114>)
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80027c2:	4a25      	ldr	r2, [pc, #148]	; (8002858 <DHCP_init+0x118>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <DHCP_init+0x11c>)
 80027ca:	4a25      	ldr	r2, [pc, #148]	; (8002860 <DHCP_init+0x120>)
 80027cc:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <DHCP_init+0x110>)
 80027d0:	78db      	ldrb	r3, [r3, #3]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <DHCP_init+0x11c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	4a20      	ldr	r2, [pc, #128]	; (800285c <DHCP_init+0x11c>)
 80027dc:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <DHCP_init+0x110>)
 80027e0:	791b      	ldrb	r3, [r3, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <DHCP_init+0x11c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <DHCP_init+0x11c>)
 80027ec:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80027ee:	4b18      	ldr	r3, [pc, #96]	; (8002850 <DHCP_init+0x110>)
 80027f0:	795b      	ldrb	r3, [r3, #5]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <DHCP_init+0x11c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4413      	add	r3, r2
 80027fa:	4a18      	ldr	r2, [pc, #96]	; (800285c <DHCP_init+0x11c>)
 80027fc:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <DHCP_init+0x110>)
 8002800:	78da      	ldrb	r2, [r3, #3]
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <DHCP_init+0x110>)
 8002804:	791b      	ldrb	r3, [r3, #4]
 8002806:	4053      	eors	r3, r2
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <DHCP_init+0x110>)
 800280c:	795b      	ldrb	r3, [r3, #5]
 800280e:	4053      	eors	r3, r2
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <DHCP_init+0x11c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4413      	add	r3, r2
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <DHCP_init+0x11c>)
 800281c:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	2204      	movs	r2, #4
 8002824:	4619      	mov	r1, r3
 8002826:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800282a:	f7fe faab 	bl	8000d84 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800282e:	f107 030c 	add.w	r3, r7, #12
 8002832:	2204      	movs	r2, #4
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 7080 	mov.w	r0, #256	; 0x100
 800283a:	f7fe faa3 	bl	8000d84 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800283e:	f000 f813 	bl	8002868 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <DHCP_init+0x124>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200001c0 	.word	0x200001c0
 8002854:	20000190 	.word	0x20000190
 8002858:	200001bc 	.word	0x200001bc
 800285c:	200001b8 	.word	0x200001b8
 8002860:	12345678 	.word	0x12345678
 8002864:	200001b0 	.word	0x200001b0

08002868 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <reset_DHCP_timeout+0x20>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <reset_DHCP_timeout+0x24>)
 8002874:	220a      	movs	r2, #10
 8002876:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <reset_DHCP_timeout+0x28>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	200001b4 	.word	0x200001b4
 800288c:	20000020 	.word	0x20000020
 8002890:	200001b1 	.word	0x200001b1

08002894 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <DHCP_time_handler+0x18>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	4a03      	ldr	r2, [pc, #12]	; (80028ac <DHCP_time_handler+0x18>)
 80028a0:	6013      	str	r3, [r2, #0]
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	200001b4 	.word	0x200001b4

080028b0 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <getIPfromDHCP+0x3c>)
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3301      	adds	r3, #1
 80028c4:	4a09      	ldr	r2, [pc, #36]	; (80028ec <getIPfromDHCP+0x3c>)
 80028c6:	7852      	ldrb	r2, [r2, #1]
 80028c8:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3302      	adds	r3, #2
 80028ce:	4a07      	ldr	r2, [pc, #28]	; (80028ec <getIPfromDHCP+0x3c>)
 80028d0:	7892      	ldrb	r2, [r2, #2]
 80028d2:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3303      	adds	r3, #3
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <getIPfromDHCP+0x3c>)
 80028da:	78d2      	ldrb	r2, [r2, #3]
 80028dc:	701a      	strb	r2, [r3, #0]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	200001a0 	.word	0x200001a0

080028f0 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <getGWfromDHCP+0x3c>)
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3301      	adds	r3, #1
 8002904:	4a09      	ldr	r2, [pc, #36]	; (800292c <getGWfromDHCP+0x3c>)
 8002906:	7852      	ldrb	r2, [r2, #1]
 8002908:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3302      	adds	r3, #2
 800290e:	4a07      	ldr	r2, [pc, #28]	; (800292c <getGWfromDHCP+0x3c>)
 8002910:	7892      	ldrb	r2, [r2, #2]
 8002912:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3303      	adds	r3, #3
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <getGWfromDHCP+0x3c>)
 800291a:	78d2      	ldrb	r2, [r2, #3]
 800291c:	701a      	strb	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	200001a4 	.word	0x200001a4

08002930 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <getSNfromDHCP+0x3c>)
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	4a09      	ldr	r2, [pc, #36]	; (800296c <getSNfromDHCP+0x3c>)
 8002946:	7852      	ldrb	r2, [r2, #1]
 8002948:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3302      	adds	r3, #2
 800294e:	4a07      	ldr	r2, [pc, #28]	; (800296c <getSNfromDHCP+0x3c>)
 8002950:	7892      	ldrb	r2, [r2, #2]
 8002952:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3303      	adds	r3, #3
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <getSNfromDHCP+0x3c>)
 800295a:	78d2      	ldrb	r2, [r2, #3]
 800295c:	701a      	strb	r2, [r3, #0]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	200001a8 	.word	0x200001a8

08002970 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <getDNSfromDHCP+0x3c>)
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3301      	adds	r3, #1
 8002984:	4a09      	ldr	r2, [pc, #36]	; (80029ac <getDNSfromDHCP+0x3c>)
 8002986:	7852      	ldrb	r2, [r2, #1]
 8002988:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3302      	adds	r3, #2
 800298e:	4a07      	ldr	r2, [pc, #28]	; (80029ac <getDNSfromDHCP+0x3c>)
 8002990:	7892      	ldrb	r2, [r2, #2]
 8002992:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3303      	adds	r3, #3
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <getDNSfromDHCP+0x3c>)
 800299a:	78d2      	ldrb	r2, [r2, #3]
 800299c:	701a      	strb	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	200001ac 	.word	0x200001ac

080029b0 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	2b09      	cmp	r3, #9
 80029c6:	d803      	bhi.n	80029d0 <NibbleToHex+0x20>
    return nibble + '0';
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	3330      	adds	r3, #48	; 0x30
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e002      	b.n	80029d6 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	3337      	adds	r3, #55	; 0x37
 80029d4:	b2db      	uxtb	r3, r3
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4604      	mov	r4, r0
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4623      	mov	r3, r4
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	4603      	mov	r3, r0
 80029f8:	71bb      	strb	r3, [r7, #6]
 80029fa:	460b      	mov	r3, r1
 80029fc:	80bb      	strh	r3, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d902      	bls.n	8002a0e <socket+0x2a>
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a0c:	e0f0      	b.n	8002bf0 <socket+0x20c>
	switch(protocol)
 8002a0e:	79bb      	ldrb	r3, [r7, #6]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d005      	beq.n	8002a20 <socket+0x3c>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dd11      	ble.n	8002a3c <socket+0x58>
 8002a18:	3b02      	subs	r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d80e      	bhi.n	8002a3c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002a1e:	e011      	b.n	8002a44 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	2204      	movs	r2, #4
 8002a26:	4619      	mov	r1, r3
 8002a28:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a2c:	f7fe f94a 	bl	8000cc4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d105      	bne.n	8002a42 <socket+0x5e>
 8002a36:	f06f 0302 	mvn.w	r3, #2
 8002a3a:	e0d9      	b.n	8002bf0 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002a3c:	f06f 0304 	mvn.w	r3, #4
 8002a40:	e0d6      	b.n	8002bf0 <socket+0x20c>
	    break;
 8002a42:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <socket+0x70>
 8002a4e:	f06f 0305 	mvn.w	r3, #5
 8002a52:	e0cd      	b.n	8002bf0 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d028      	beq.n	8002aac <socket+0xc8>
	{
   	switch(protocol)
 8002a5a:	79bb      	ldrb	r3, [r7, #6]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d002      	beq.n	8002a66 <socket+0x82>
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d008      	beq.n	8002a76 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002a64:	e022      	b.n	8002aac <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d11a      	bne.n	8002aa6 <socket+0xc2>
 8002a70:	f06f 0305 	mvn.w	r3, #5
 8002a74:	e0bc      	b.n	8002bf0 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	db02      	blt.n	8002a8e <socket+0xaa>
 8002a88:	f06f 0305 	mvn.w	r3, #5
 8002a8c:	e0b0      	b.n	8002bf0 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	db04      	blt.n	8002aaa <socket+0xc6>
 8002aa0:	f06f 0305 	mvn.w	r3, #5
 8002aa4:	e0a4      	b.n	8002bf0 <socket+0x20c>
   	      break;
 8002aa6:	bf00      	nop
 8002aa8:	e000      	b.n	8002aac <socket+0xc8>
   	      break;
 8002aaa:	bf00      	nop
   	}
   }
	close(sn);
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f8ac 	bl	8002c0c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	3301      	adds	r3, #1
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac2:	f023 030f 	bic.w	r3, r3, #15
 8002ac6:	b25a      	sxtb	r2, r3
 8002ac8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7fe f8a8 	bl	8000c28 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002ad8:	88bb      	ldrh	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d110      	bne.n	8002b00 <socket+0x11c>
	{
	   port = sock_any_port++;
 8002ade:	4b46      	ldr	r3, [pc, #280]	; (8002bf8 <socket+0x214>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	b291      	uxth	r1, r2
 8002ae6:	4a44      	ldr	r2, [pc, #272]	; (8002bf8 <socket+0x214>)
 8002ae8:	8011      	strh	r1, [r2, #0]
 8002aea:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002aec:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <socket+0x214>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d103      	bne.n	8002b00 <socket+0x11c>
 8002af8:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <socket+0x214>)
 8002afa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002afe:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	3301      	adds	r3, #1
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	88bb      	ldrh	r3, [r7, #4]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	4619      	mov	r1, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f7fe f885 	bl	8000c28 <WIZCHIP_WRITE>
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3301      	adds	r3, #1
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	88bb      	ldrh	r3, [r7, #4]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f7fe f878 	bl	8000c28 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe f86e 	bl	8000c28 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002b4c:	bf00      	nop
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	3301      	adds	r3, #1
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe f818 	bl	8000b90 <WIZCHIP_READ>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f3      	bne.n	8002b4e <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	b21a      	sxth	r2, r3
 8002b74:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <socket+0x218>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <socket+0x218>)
 8002b82:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	b21a      	sxth	r2, r3
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <socket+0x218>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b21b      	sxth	r3, r3
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <socket+0x218>)
 8002ba0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	b21a      	sxth	r2, r3
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <socket+0x21c>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <socket+0x21c>)
 8002bbe:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <socket+0x220>)
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <socket+0x224>)
 8002bce:	2100      	movs	r1, #0
 8002bd0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002bd2:	bf00      	nop
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3301      	adds	r3, #1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd ffd5 	bl	8000b90 <WIZCHIP_READ>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f3      	beq.n	8002bd4 <socket+0x1f0>
   return (int8_t)sn;
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd90      	pop	{r4, r7, pc}
 8002bf8:	20000038 	.word	0x20000038
 8002bfc:	200001c6 	.word	0x200001c6
 8002c00:	200001c8 	.word	0x200001c8
 8002c04:	200001cc 	.word	0x200001cc
 8002c08:	200001dc 	.word	0x200001dc

08002c0c <close>:

int8_t close(uint8_t sn)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d902      	bls.n	8002c22 <close+0x16>
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c20:	e055      	b.n	8002cce <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	3301      	adds	r3, #1
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c2e:	2110      	movs	r1, #16
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fff9 	bl	8000c28 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002c36:	bf00      	nop
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd ffa3 	bl	8000b90 <WIZCHIP_READ>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f3      	bne.n	8002c38 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	3301      	adds	r3, #1
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c5c:	211f      	movs	r1, #31
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd ffe2 	bl	8000c28 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	2201      	movs	r2, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	b21b      	sxth	r3, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	b21a      	sxth	r2, r3
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <close+0xcc>)
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b21b      	sxth	r3, r3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <close+0xcc>)
 8002c80:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	2201      	movs	r2, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	b21a      	sxth	r2, r3
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <close+0xd0>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	4013      	ands	r3, r2
 8002c98:	b21b      	sxth	r3, r3
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <close+0xd0>)
 8002c9e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <close+0xd4>)
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <close+0xd8>)
 8002cae:	2100      	movs	r1, #0
 8002cb0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002cb2:	bf00      	nop
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	3301      	adds	r3, #1
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd ff65 	bl	8000b90 <WIZCHIP_READ>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f3      	bne.n	8002cb4 <close+0xa8>
	return SOCK_OK;
 8002ccc:	2301      	movs	r3, #1
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200001c6 	.word	0x200001c6
 8002cdc:	200001c8 	.word	0x200001c8
 8002ce0:	200001cc 	.word	0x200001cc
 8002ce4:	200001dc 	.word	0x200001dc

08002ce8 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d902      	bls.n	8002d0e <sendto+0x26>
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d0c:	e11b      	b.n	8002f46 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	3301      	adds	r3, #1
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd ff3a 	bl	8000b90 <WIZCHIP_READ>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3b02      	subs	r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d902      	bls.n	8002d2e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002d28:	f06f 0304 	mvn.w	r3, #4
 8002d2c:	e10b      	b.n	8002f46 <sendto+0x25e>
         break;
 8002d2e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002d30:	89bb      	ldrh	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <sendto+0x54>
 8002d36:	f06f 030d 	mvn.w	r3, #13
 8002d3a:	e104      	b.n	8002f46 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	3201      	adds	r2, #1
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	3202      	adds	r2, #2
 8002d58:	7812      	ldrb	r2, [r2, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	3203      	adds	r2, #3
 8002d66:	7812      	ldrb	r2, [r2, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10e      	bne.n	8002d90 <sendto+0xa8>
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	3301      	adds	r3, #1
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd ff08 	bl	8000b90 <WIZCHIP_READ>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d002      	beq.n	8002d90 <sendto+0xa8>
 8002d8a:	f06f 030b 	mvn.w	r3, #11
 8002d8e:	e0da      	b.n	8002f46 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002d90:	8c3b      	ldrh	r3, [r7, #32]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <sendto+0xcc>
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fef6 	bl	8000b90 <WIZCHIP_READ>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d002      	beq.n	8002db4 <sendto+0xcc>
 8002dae:	f06f 030a 	mvn.w	r3, #10
 8002db2:	e0c8      	b.n	8002f46 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	3301      	adds	r3, #1
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fee5 	bl	8000b90 <WIZCHIP_READ>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b42      	cmp	r3, #66	; 0x42
 8002dce:	d008      	beq.n	8002de2 <sendto+0xfa>
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b22      	cmp	r3, #34	; 0x22
 8002dd4:	d005      	beq.n	8002de2 <sendto+0xfa>
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	2b32      	cmp	r3, #50	; 0x32
 8002dda:	d002      	beq.n	8002de2 <sendto+0xfa>
 8002ddc:	f06f 0306 	mvn.w	r3, #6
 8002de0:	e0b1      	b.n	8002f46 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	3301      	adds	r3, #1
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002dee:	2204      	movs	r2, #4
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd ffc6 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e04:	461a      	mov	r2, r3
 8002e06:	8c3b      	ldrh	r3, [r7, #32]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f7fd ff09 	bl	8000c28 <WIZCHIP_WRITE>
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002e22:	461a      	mov	r2, r3
 8002e24:	8c3b      	ldrh	r3, [r7, #32]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f7fd fefc 	bl	8000c28 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	3301      	adds	r3, #1
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd fea7 	bl	8000b90 <WIZCHIP_READ>
 8002e42:	4603      	mov	r3, r0
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	029b      	lsls	r3, r3, #10
 8002e48:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002e4a:	89ba      	ldrh	r2, [r7, #12]
 8002e4c:	8abb      	ldrh	r3, [r7, #20]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d901      	bls.n	8002e56 <sendto+0x16e>
 8002e52:	8abb      	ldrh	r3, [r7, #20]
 8002e54:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fff3 	bl	8000e44 <getSn_TX_FSR>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3301      	adds	r3, #1
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fe8e 	bl	8000b90 <WIZCHIP_READ>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <sendto+0x198>
 8002e7a:	f06f 0303 	mvn.w	r3, #3
 8002e7e:	e062      	b.n	8002f46 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <sendto+0x268>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	fa42 f303 	asr.w	r3, r2, r3
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <sendto+0x1b8>
 8002e94:	89ba      	ldrh	r2, [r7, #12]
 8002e96:	8abb      	ldrh	r3, [r7, #20]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d901      	bls.n	8002ea0 <sendto+0x1b8>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e052      	b.n	8002f46 <sendto+0x25e>
      if(len <= freesize) break;
 8002ea0:	89ba      	ldrh	r2, [r7, #12]
 8002ea2:	8abb      	ldrh	r3, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d900      	bls.n	8002eaa <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8002ea8:	e7d5      	b.n	8002e56 <sendto+0x16e>
      if(len <= freesize) break;
 8002eaa:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8002eac:	89ba      	ldrh	r2, [r7, #12]
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f85c 	bl	8000f70 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ec4:	2120      	movs	r1, #32
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd feae 	bl	8000c28 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002ecc:	bf00      	nop
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fe58 	bl	8000b90 <WIZCHIP_READ>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f3      	bne.n	8002ece <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	3301      	adds	r3, #1
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fe4c 	bl	8000b90 <WIZCHIP_READ>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00c      	beq.n	8002f24 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	3301      	adds	r3, #1
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f16:	2110      	movs	r1, #16
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fe85 	bl	8000c28 <WIZCHIP_WRITE>
         break;
 8002f1e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002f20:	89bb      	ldrh	r3, [r7, #12]
 8002f22:	e010      	b.n	8002f46 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0db      	beq.n	8002ee6 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	3301      	adds	r3, #1
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f3a:	2108      	movs	r1, #8
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fe73 	bl	8000c28 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8002f42:	f06f 030c 	mvn.w	r3, #12
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200001c6 	.word	0x200001c6

08002f54 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	4603      	mov	r3, r0
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	4613      	mov	r3, r2
 8002f64:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d902      	bls.n	8002f76 <recvfrom+0x22>
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f74:	e1d4      	b.n	8003320 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fe06 	bl	8000b90 <WIZCHIP_READ>
 8002f84:	4603      	mov	r3, r0
 8002f86:	777b      	strb	r3, [r7, #29]
 8002f88:	7f7b      	ldrb	r3, [r7, #29]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	3b02      	subs	r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d902      	bls.n	8002f9a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002f94:	f06f 0304 	mvn.w	r3, #4
 8002f98:	e1c2      	b.n	8003320 <recvfrom+0x3cc>
         break;
 8002f9a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002f9c:	89bb      	ldrh	r3, [r7, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <recvfrom+0x54>
 8002fa2:	f06f 030d 	mvn.w	r3, #13
 8002fa6:	e1bb      	b.n	8003320 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	4a88      	ldr	r2, [pc, #544]	; (80031cc <recvfrom+0x278>)
 8002fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d128      	bne.n	8003006 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd ff8f 	bl	8000eda <getSn_RX_RSR>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fddf 	bl	8000b90 <WIZCHIP_READ>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <recvfrom+0x8a>
 8002fd8:	f06f 0303 	mvn.w	r3, #3
 8002fdc:	e1a0      	b.n	8003320 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8002fde:	4b7c      	ldr	r3, [pc, #496]	; (80031d0 <recvfrom+0x27c>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	fa42 f303 	asr.w	r3, r2, r3
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <recvfrom+0xa8>
 8002ff2:	8bfb      	ldrh	r3, [r7, #30]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <recvfrom+0xa8>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e191      	b.n	8003320 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8002ffc:	8bfb      	ldrh	r3, [r7, #30]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d100      	bne.n	8003004 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003002:	e7d7      	b.n	8002fb4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003004:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003006:	7f7b      	ldrb	r3, [r7, #29]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	2b04      	cmp	r3, #4
 800300e:	d079      	beq.n	8003104 <recvfrom+0x1b0>
 8003010:	2b04      	cmp	r3, #4
 8003012:	f300 8142 	bgt.w	800329a <recvfrom+0x346>
 8003016:	2b02      	cmp	r3, #2
 8003018:	d003      	beq.n	8003022 <recvfrom+0xce>
 800301a:	2b03      	cmp	r3, #3
 800301c:	f000 80dc 	beq.w	80031d8 <recvfrom+0x284>
 8003020:	e13b      	b.n	800329a <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	4a69      	ldr	r2, [pc, #420]	; (80031cc <recvfrom+0x278>)
 8003026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d152      	bne.n	80030d4 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800302e:	f107 0114 	add.w	r1, r7, #20
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2208      	movs	r2, #8
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fff6 	bl	8001028 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3301      	adds	r3, #1
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003048:	2140      	movs	r1, #64	; 0x40
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fdec 	bl	8000c28 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003050:	bf00      	nop
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3301      	adds	r3, #1
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fd96 	bl	8000b90 <WIZCHIP_READ>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f3      	bne.n	8003052 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800306a:	7d3a      	ldrb	r2, [r7, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3301      	adds	r3, #1
 8003074:	7d7a      	ldrb	r2, [r7, #21]
 8003076:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3302      	adds	r3, #2
 800307c:	7dba      	ldrb	r2, [r7, #22]
 800307e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3303      	adds	r3, #3
 8003084:	7dfa      	ldrb	r2, [r7, #23]
 8003086:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8003088:	7e3b      	ldrb	r3, [r7, #24]
 800308a:	b29a      	uxth	r2, r3
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	b29a      	uxth	r2, r3
 8003098:	7e7b      	ldrb	r3, [r7, #25]
 800309a:	b29b      	uxth	r3, r3
 800309c:	4413      	add	r3, r2
 800309e:	b29a      	uxth	r2, r3
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80030a4:	7eba      	ldrb	r2, [r7, #26]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	b291      	uxth	r1, r2
 80030aa:	4a48      	ldr	r2, [pc, #288]	; (80031cc <recvfrom+0x278>)
 80030ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	4a46      	ldr	r2, [pc, #280]	; (80031cc <recvfrom+0x278>)
 80030b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	b299      	uxth	r1, r3
 80030bc:	7efb      	ldrb	r3, [r7, #27]
 80030be:	b29a      	uxth	r2, r3
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	440a      	add	r2, r1
 80030c4:	b291      	uxth	r1, r2
 80030c6:	4a41      	ldr	r2, [pc, #260]	; (80031cc <recvfrom+0x278>)
 80030c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	4a41      	ldr	r2, [pc, #260]	; (80031d4 <recvfrom+0x280>)
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	4a3d      	ldr	r2, [pc, #244]	; (80031cc <recvfrom+0x278>)
 80030d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030dc:	89ba      	ldrh	r2, [r7, #12]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d202      	bcs.n	80030e8 <recvfrom+0x194>
 80030e2:	89bb      	ldrh	r3, [r7, #12]
 80030e4:	83fb      	strh	r3, [r7, #30]
 80030e6:	e004      	b.n	80030f2 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	4a38      	ldr	r2, [pc, #224]	; (80031cc <recvfrom+0x278>)
 80030ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030f0:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80030f2:	8bfb      	ldrh	r3, [r7, #30]
 80030f4:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80030f6:	8bfa      	ldrh	r2, [r7, #30]
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd ff93 	bl	8001028 <wiz_recv_data>
			break;
 8003102:	e0d6      	b.n	80032b2 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	4a31      	ldr	r2, [pc, #196]	; (80031cc <recvfrom+0x278>)
 8003108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d146      	bne.n	800319e <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8003110:	f107 0114 	add.w	r1, r7, #20
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2202      	movs	r2, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd ff85 	bl	8001028 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	3301      	adds	r3, #1
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800312a:	2140      	movs	r1, #64	; 0x40
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fd7b 	bl	8000c28 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003132:	bf00      	nop
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3301      	adds	r3, #1
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fd25 	bl	8000b90 <WIZCHIP_READ>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f3      	bne.n	8003134 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800314c:	7d3a      	ldrb	r2, [r7, #20]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	b291      	uxth	r1, r2
 8003152:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <recvfrom+0x278>)
 8003154:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <recvfrom+0x278>)
 800315c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	b29a      	uxth	r2, r3
 8003164:	7d7b      	ldrb	r3, [r7, #21]
 8003166:	b29b      	uxth	r3, r3
 8003168:	4413      	add	r3, r2
 800316a:	b29a      	uxth	r2, r3
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	3a02      	subs	r2, #2
 8003170:	b291      	uxth	r1, r2
 8003172:	4a16      	ldr	r2, [pc, #88]	; (80031cc <recvfrom+0x278>)
 8003174:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	4a14      	ldr	r2, [pc, #80]	; (80031cc <recvfrom+0x278>)
 800317c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003180:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8003184:	4293      	cmp	r3, r2
 8003186:	d906      	bls.n	8003196 <recvfrom+0x242>
   			{
   			   close(sn);
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fd3e 	bl	8002c0c <close>
   			   return SOCKFATAL_PACKLEN;
 8003190:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8003194:	e0c4      	b.n	8003320 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <recvfrom+0x280>)
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <recvfrom+0x278>)
 80031a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a6:	89ba      	ldrh	r2, [r7, #12]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d202      	bcs.n	80031b2 <recvfrom+0x25e>
 80031ac:	89bb      	ldrh	r3, [r7, #12]
 80031ae:	83fb      	strh	r3, [r7, #30]
 80031b0:	e004      	b.n	80031bc <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	4a05      	ldr	r2, [pc, #20]	; (80031cc <recvfrom+0x278>)
 80031b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ba:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80031bc:	8bfa      	ldrh	r2, [r7, #30]
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd ff30 	bl	8001028 <wiz_recv_data>
		   break;
 80031c8:	e073      	b.n	80032b2 <recvfrom+0x35e>
 80031ca:	bf00      	nop
 80031cc:	200001cc 	.word	0x200001cc
 80031d0:	200001c6 	.word	0x200001c6
 80031d4:	200001dc 	.word	0x200001dc
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	4a53      	ldr	r2, [pc, #332]	; (8003328 <recvfrom+0x3d4>)
 80031dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d144      	bne.n	800326e <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 80031e4:	f107 0114 	add.w	r1, r7, #20
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2206      	movs	r2, #6
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd ff1b 	bl	8001028 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	3301      	adds	r3, #1
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd fd11 	bl	8000c28 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003206:	bf00      	nop
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	3301      	adds	r3, #1
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd fcbb 	bl	8000b90 <WIZCHIP_READ>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f3      	bne.n	8003208 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8003220:	7d3a      	ldrb	r2, [r7, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3301      	adds	r3, #1
 800322a:	7d7a      	ldrb	r2, [r7, #21]
 800322c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3302      	adds	r3, #2
 8003232:	7dba      	ldrb	r2, [r7, #22]
 8003234:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3303      	adds	r3, #3
 800323a:	7dfa      	ldrb	r2, [r7, #23]
 800323c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800323e:	7e3a      	ldrb	r2, [r7, #24]
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	b291      	uxth	r1, r2
 8003244:	4a38      	ldr	r2, [pc, #224]	; (8003328 <recvfrom+0x3d4>)
 8003246:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	4a36      	ldr	r2, [pc, #216]	; (8003328 <recvfrom+0x3d4>)
 800324e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	b299      	uxth	r1, r3
 8003256:	7e7b      	ldrb	r3, [r7, #25]
 8003258:	b29a      	uxth	r2, r3
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	440a      	add	r2, r1
 800325e:	b291      	uxth	r1, r2
 8003260:	4a31      	ldr	r2, [pc, #196]	; (8003328 <recvfrom+0x3d4>)
 8003262:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	4a30      	ldr	r2, [pc, #192]	; (800332c <recvfrom+0x3d8>)
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <recvfrom+0x3d4>)
 8003272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003276:	89ba      	ldrh	r2, [r7, #12]
 8003278:	429a      	cmp	r2, r3
 800327a:	d202      	bcs.n	8003282 <recvfrom+0x32e>
 800327c:	89bb      	ldrh	r3, [r7, #12]
 800327e:	83fb      	strh	r3, [r7, #30]
 8003280:	e004      	b.n	800328c <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	4a28      	ldr	r2, [pc, #160]	; (8003328 <recvfrom+0x3d4>)
 8003286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800328a:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800328c:	8bfa      	ldrh	r2, [r7, #30]
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fec8 	bl	8001028 <wiz_recv_data>
			break;
 8003298:	e00b      	b.n	80032b2 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800329a:	8bfa      	ldrh	r2, [r7, #30]
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd ff1d 	bl	80010e0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	491f      	ldr	r1, [pc, #124]	; (8003328 <recvfrom+0x3d4>)
 80032aa:	8bfa      	ldrh	r2, [r7, #30]
 80032ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80032b0:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	3301      	adds	r3, #1
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd fcb1 	bl	8000c28 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80032c6:	bf00      	nop
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	3301      	adds	r3, #1
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd fc5b 	bl	8000b90 <WIZCHIP_READ>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f3      	bne.n	80032c8 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	4a11      	ldr	r2, [pc, #68]	; (8003328 <recvfrom+0x3d4>)
 80032e4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	8bfa      	ldrh	r2, [r7, #30]
 80032ec:	1a8a      	subs	r2, r1, r2
 80032ee:	b291      	uxth	r1, r2
 80032f0:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <recvfrom+0x3d4>)
 80032f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <recvfrom+0x3d4>)
 80032fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <recvfrom+0x3d8>)
 8003306:	5cd2      	ldrb	r2, [r2, r3]
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	b2d1      	uxtb	r1, r2
 8003310:	4a06      	ldr	r2, [pc, #24]	; (800332c <recvfrom+0x3d8>)
 8003312:	54d1      	strb	r1, [r2, r3]
 8003314:	e003      	b.n	800331e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <recvfrom+0x3d8>)
 800331a:	2100      	movs	r1, #0
 800331c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800331e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3720      	adds	r7, #32
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	200001cc 	.word	0x200001cc
 800332c:	200001dc 	.word	0x200001dc

08003330 <dynamic_host_configuration>:
 * @brief Configures the W5500 using DHCP for dynamic IP assignment.
 * @param mac Source MAC address
 * @retval None
 */
void dynamic_host_configuration(uint8_t mac[6])
{
 8003330:	b580      	push	{r7, lr}
 8003332:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8003336:	af00      	add	r7, sp, #0
 8003338:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800333c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8003340:	6018      	str	r0, [r3, #0]
	uint8_t dhcp_buffer[1024];

    wiz_NetInfo net_info = {
 8003342:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003346:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800334a:	461a      	mov	r2, r3
 800334c:	2300      	movs	r3, #0
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	6053      	str	r3, [r2, #4]
 8003352:	6093      	str	r3, [r2, #8]
 8003354:	60d3      	str	r3, [r2, #12]
 8003356:	6113      	str	r3, [r2, #16]
 8003358:	f8c2 3013 	str.w	r3, [r2, #19]
        .mac  = {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]},  // Set MAC address
 800335c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003360:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	781a      	ldrb	r2, [r3, #0]
    wiz_NetInfo net_info = {
 8003368:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800336c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003376:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	785a      	ldrb	r2, [r3, #1]
 800337e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003382:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8003386:	705a      	strb	r2, [r3, #1]
 8003388:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800338c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	789a      	ldrb	r2, [r3, #2]
 8003394:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003398:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800339c:	709a      	strb	r2, [r3, #2]
 800339e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80033a2:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	78da      	ldrb	r2, [r3, #3]
 80033aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80033ae:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80033b2:	70da      	strb	r2, [r3, #3]
 80033b4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80033b8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	791a      	ldrb	r2, [r3, #4]
 80033c0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80033c4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80033c8:	711a      	strb	r2, [r3, #4]
 80033ca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80033ce:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	795a      	ldrb	r2, [r3, #5]
 80033d6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80033da:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80033de:	715a      	strb	r2, [r3, #5]
 80033e0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80033e4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80033e8:	2202      	movs	r2, #2
 80033ea:	759a      	strb	r2, [r3, #22]
        .dhcp = NETINFO_DHCP                                      // Enable DHCP mode
    };

    printf("Setting up dynamic host configuration...\r\n");
 80033ec:	4826      	ldr	r0, [pc, #152]	; (8003488 <dynamic_host_configuration+0x158>)
 80033ee:	f002 fc6d 	bl	8005ccc <puts>


    // don't buffer the output of printf
    setbuf(stdout, NULL);
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <dynamic_host_configuration+0x15c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f002 fc6e 	bl	8005cdc <setbuf>


    // Set the MAC address before using DHCP
    setSHAR(net_info.mac);
 8003400:	f107 0308 	add.w	r3, r7, #8
 8003404:	2206      	movs	r2, #6
 8003406:	4619      	mov	r1, r3
 8003408:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800340c:	f7fd fcba 	bl	8000d84 <WIZCHIP_WRITE_BUF>

    // Initialize DHCP
    DHCP_init(DHCP_SOCKET, dhcp_buffer);
 8003410:	f107 0320 	add.w	r3, r7, #32
 8003414:	4619      	mov	r1, r3
 8003416:	2000      	movs	r0, #0
 8003418:	f7ff f992 	bl	8002740 <DHCP_init>

    // Register DHCP callback functions if needed
    reg_dhcp_cbfunc(callback_ip_assigned, callback_ip_assigned, callback_ip_conflict);
 800341c:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <dynamic_host_configuration+0x160>)
 800341e:	491d      	ldr	r1, [pc, #116]	; (8003494 <dynamic_host_configuration+0x164>)
 8003420:	481c      	ldr	r0, [pc, #112]	; (8003494 <dynamic_host_configuration+0x164>)
 8003422:	f7fd feeb 	bl	80011fc <reg_dhcp_cbfunc>

    // Run DHCP process in a loop until IP is assigned
    while ((!ip_assigned)) {
 8003426:	e001      	b.n	800342c <dynamic_host_configuration+0xfc>
        DHCP_run();
 8003428:	f7fe ffd2 	bl	80023d0 <DHCP_run>
    while ((!ip_assigned)) {
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <dynamic_host_configuration+0x168>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f083 0301 	eor.w	r3, r3, #1
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f5      	bne.n	8003428 <dynamic_host_configuration+0xf8>
    }

    // Retrieve IP, gateway, subnet mask, and DNS from DHCP
    getIPfromDHCP(net_info.ip);
 800343c:	f107 0308 	add.w	r3, r7, #8
 8003440:	3306      	adds	r3, #6
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fa34 	bl	80028b0 <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 8003448:	f107 0308 	add.w	r3, r7, #8
 800344c:	330e      	adds	r3, #14
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fa4e 	bl	80028f0 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 8003454:	f107 0308 	add.w	r3, r7, #8
 8003458:	330a      	adds	r3, #10
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fa68 	bl	8002930 <getSNfromDHCP>
    getDNSfromDHCP(net_info.dns);
 8003460:	f107 0308 	add.w	r3, r7, #8
 8003464:	3312      	adds	r3, #18
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fa82 	bl	8002970 <getDNSfromDHCP>

    // Set network information obtained from DHCP
    wizchip_setnetinfo(&net_info);
 800346c:	f107 0308 	add.w	r3, r7, #8
 8003470:	4618      	mov	r0, r3
 8003472:	f000 ff2b 	bl	80042cc <wizchip_setnetinfo>

    printf("Dynamic IP configuration is done successfully.\r\n");
 8003476:	4809      	ldr	r0, [pc, #36]	; (800349c <dynamic_host_configuration+0x16c>)
 8003478:	f002 fc28 	bl	8005ccc <puts>
}
 800347c:	bf00      	nop
 800347e:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	08006bb8 	.word	0x08006bb8
 800348c:	200000c8 	.word	0x200000c8
 8003490:	080034bd 	.word	0x080034bd
 8003494:	080034a1 	.word	0x080034a1
 8003498:	200001e4 	.word	0x200001e4
 800349c:	08006be4 	.word	0x08006be4

080034a0 <callback_ip_assigned>:


void callback_ip_assigned()
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
    printf("DHCP: IP assigned\n");
 80034a4:	4803      	ldr	r0, [pc, #12]	; (80034b4 <callback_ip_assigned+0x14>)
 80034a6:	f002 fc11 	bl	8005ccc <puts>
    ip_assigned = true;
 80034aa:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <callback_ip_assigned+0x18>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	08006c14 	.word	0x08006c14
 80034b8:	200001e4 	.word	0x200001e4

080034bc <callback_ip_conflict>:
{
    printf("DHCP: IP renewed\n");
}

void callback_ip_conflict()
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
    printf("DHCP: IP conflict detected\n");
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <callback_ip_conflict+0x10>)
 80034c2:	f002 fc03 	bl	8005ccc <puts>
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	08006c3c 	.word	0x08006c3c

080034d0 <check_cable_presence>:
 *
 * This function continuously checks the status of the PHY link until the Ethernet cable is connected.
 *
 * @return void
 */
void check_cable_presence() {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
    uint8_t phy_status;
    int error_status;

    printf("\r\nChecking ethernet cable presence ...\r\n");
 80034d6:	4815      	ldr	r0, [pc, #84]	; (800352c <check_cable_presence+0x5c>)
 80034d8:	f002 fbf8 	bl	8005ccc <puts>

    do {
        // Get the PHY link status
        error_status = ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status);
 80034dc:	1cfb      	adds	r3, r7, #3
 80034de:	4619      	mov	r1, r3
 80034e0:	200f      	movs	r0, #15
 80034e2:	f000 fb17 	bl	8003b14 <ctlwizchip>
 80034e6:	4603      	mov	r3, r0
 80034e8:	607b      	str	r3, [r7, #4]

        if (error_status == -1) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f0:	d103      	bne.n	80034fa <check_cable_presence+0x2a>
            printf("Failed to get PHY link info.\r\nTrying again...\r\n");
 80034f2:	480f      	ldr	r0, [pc, #60]	; (8003530 <check_cable_presence+0x60>)
 80034f4:	f002 fbea 	bl	8005ccc <puts>
            continue;
 80034f8:	e009      	b.n	800350e <check_cable_presence+0x3e>
        }

        // Check if the cable is not connected
        if (phy_status == PHY_LINK_OFF) {
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d106      	bne.n	800350e <check_cable_presence+0x3e>
            printf("Cable is not connected.\r\n");
 8003500:	480c      	ldr	r0, [pc, #48]	; (8003534 <check_cable_presence+0x64>)
 8003502:	f002 fbe3 	bl	8005ccc <puts>
            HAL_Delay(1500);
 8003506:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800350a:	f001 f869 	bl	80045e0 <HAL_Delay>
        }
    } while (error_status == -1 || phy_status == PHY_LINK_OFF);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003514:	d0e2      	beq.n	80034dc <check_cable_presence+0xc>
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0df      	beq.n	80034dc <check_cable_presence+0xc>

    printf("Cable is connected.\r\n");
 800351c:	4806      	ldr	r0, [pc, #24]	; (8003538 <check_cable_presence+0x68>)
 800351e:	f002 fbd5 	bl	8005ccc <puts>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	08006c58 	.word	0x08006c58
 8003530:	08006c80 	.word	0x08006c80
 8003534:	08006cb0 	.word	0x08006cb0
 8003538:	08006ccc 	.word	0x08006ccc

0800353c <check_phy_status>:
 *
 * This function retrieves and prints the PHY link status and configuration, including mode, speed, and duplex settings.
 *
 * @return void
 */
void check_phy_status() {
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
    uint8_t phy_status;

    // Get the PHY link status
    if (ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status) == -1) {
 8003542:	1dfb      	adds	r3, r7, #7
 8003544:	4619      	mov	r1, r3
 8003546:	200f      	movs	r0, #15
 8003548:	f000 fae4 	bl	8003b14 <ctlwizchip>
 800354c:	4603      	mov	r3, r0
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003552:	d103      	bne.n	800355c <check_phy_status+0x20>
        printf("Failed to get PHY link status.\r\n");
 8003554:	4838      	ldr	r0, [pc, #224]	; (8003638 <check_phy_status+0xfc>)
 8003556:	f002 fbb9 	bl	8005ccc <puts>
        return;
 800355a:	e06a      	b.n	8003632 <check_phy_status+0xf6>
    }

    // Print the PHY link status
    if (phy_status == PHY_LINK_ON) {
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d103      	bne.n	800356a <check_phy_status+0x2e>
        printf("PHY Link is ON.\r\n");
 8003562:	4836      	ldr	r0, [pc, #216]	; (800363c <check_phy_status+0x100>)
 8003564:	f002 fbb2 	bl	8005ccc <puts>
 8003568:	e002      	b.n	8003570 <check_phy_status+0x34>
    } else {
        printf("PHY Link is OFF.\r\n");
 800356a:	4835      	ldr	r0, [pc, #212]	; (8003640 <check_phy_status+0x104>)
 800356c:	f002 fbae 	bl	8005ccc <puts>
    }

    // Get the PHY configuration (optional, for more detailed information)
    wiz_PhyConf phy_conf;
    if (ctlwizchip(CW_GET_PHYCONF, (void*)&phy_conf) == -1) {
 8003570:	463b      	mov	r3, r7
 8003572:	4619      	mov	r1, r3
 8003574:	200b      	movs	r0, #11
 8003576:	f000 facd 	bl	8003b14 <ctlwizchip>
 800357a:	4603      	mov	r3, r0
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003580:	d103      	bne.n	800358a <check_phy_status+0x4e>
        printf("Failed to get PHY configuration.\r\n");
 8003582:	4830      	ldr	r0, [pc, #192]	; (8003644 <check_phy_status+0x108>)
 8003584:	f002 fba2 	bl	8005ccc <puts>
        return;
 8003588:	e053      	b.n	8003632 <check_phy_status+0xf6>
    }

    // Print the PHY configuration
    printf("PHY Mode: ");
 800358a:	482f      	ldr	r0, [pc, #188]	; (8003648 <check_phy_status+0x10c>)
 800358c:	f002 fb38 	bl	8005c00 <iprintf>
    switch (phy_conf.by) {
 8003590:	783b      	ldrb	r3, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <check_phy_status+0x60>
 8003596:	2b01      	cmp	r3, #1
 8003598:	d004      	beq.n	80035a4 <check_phy_status+0x68>
 800359a:	e007      	b.n	80035ac <check_phy_status+0x70>
        case PHY_CONFBY_HW:
            printf("Configured by hardware.\r\n");
 800359c:	482b      	ldr	r0, [pc, #172]	; (800364c <check_phy_status+0x110>)
 800359e:	f002 fb95 	bl	8005ccc <puts>
            break;
 80035a2:	e007      	b.n	80035b4 <check_phy_status+0x78>
        case PHY_CONFBY_SW:
            printf("Configured by software.\r\n");
 80035a4:	482a      	ldr	r0, [pc, #168]	; (8003650 <check_phy_status+0x114>)
 80035a6:	f002 fb91 	bl	8005ccc <puts>
            break;
 80035aa:	e003      	b.n	80035b4 <check_phy_status+0x78>
        default:
            printf("Unknown.\r\n");
 80035ac:	4829      	ldr	r0, [pc, #164]	; (8003654 <check_phy_status+0x118>)
 80035ae:	f002 fb8d 	bl	8005ccc <puts>
            break;
 80035b2:	bf00      	nop
    }

    printf("PHY Speed: ");
 80035b4:	4828      	ldr	r0, [pc, #160]	; (8003658 <check_phy_status+0x11c>)
 80035b6:	f002 fb23 	bl	8005c00 <iprintf>
    switch (phy_conf.speed) {
 80035ba:	78bb      	ldrb	r3, [r7, #2]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <check_phy_status+0x8a>
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d004      	beq.n	80035ce <check_phy_status+0x92>
 80035c4:	e007      	b.n	80035d6 <check_phy_status+0x9a>
        case PHY_SPEED_10:
            printf("10 Mbps.\r\n");
 80035c6:	4825      	ldr	r0, [pc, #148]	; (800365c <check_phy_status+0x120>)
 80035c8:	f002 fb80 	bl	8005ccc <puts>
            break;
 80035cc:	e007      	b.n	80035de <check_phy_status+0xa2>
        case PHY_SPEED_100:
            printf("100 Mbps.\r\n");
 80035ce:	4824      	ldr	r0, [pc, #144]	; (8003660 <check_phy_status+0x124>)
 80035d0:	f002 fb7c 	bl	8005ccc <puts>
            break;
 80035d4:	e003      	b.n	80035de <check_phy_status+0xa2>
        default:
            printf("Unknown.\r\n");
 80035d6:	481f      	ldr	r0, [pc, #124]	; (8003654 <check_phy_status+0x118>)
 80035d8:	f002 fb78 	bl	8005ccc <puts>
            break;
 80035dc:	bf00      	nop
    }

    printf("PHY Duplex: ");
 80035de:	4821      	ldr	r0, [pc, #132]	; (8003664 <check_phy_status+0x128>)
 80035e0:	f002 fb0e 	bl	8005c00 <iprintf>
    switch (phy_conf.duplex) {
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <check_phy_status+0xb4>
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d004      	beq.n	80035f8 <check_phy_status+0xbc>
 80035ee:	e007      	b.n	8003600 <check_phy_status+0xc4>
        case PHY_DUPLEX_HALF:
            printf("Half duplex.\r\n");
 80035f0:	481d      	ldr	r0, [pc, #116]	; (8003668 <check_phy_status+0x12c>)
 80035f2:	f002 fb6b 	bl	8005ccc <puts>
            break;
 80035f6:	e007      	b.n	8003608 <check_phy_status+0xcc>
        case PHY_DUPLEX_FULL:
            printf("Full duplex.\r\n");
 80035f8:	481c      	ldr	r0, [pc, #112]	; (800366c <check_phy_status+0x130>)
 80035fa:	f002 fb67 	bl	8005ccc <puts>
            break;
 80035fe:	e003      	b.n	8003608 <check_phy_status+0xcc>
        default:
            printf("Unknown.\r\n");
 8003600:	4814      	ldr	r0, [pc, #80]	; (8003654 <check_phy_status+0x118>)
 8003602:	f002 fb63 	bl	8005ccc <puts>
            break;
 8003606:	bf00      	nop
    }

    // Print the PHY negotiation mode
    printf("PHY Negotiation Mode: ");
 8003608:	4819      	ldr	r0, [pc, #100]	; (8003670 <check_phy_status+0x134>)
 800360a:	f002 faf9 	bl	8005c00 <iprintf>
    switch (phy_conf.mode) {
 800360e:	787b      	ldrb	r3, [r7, #1]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <check_phy_status+0xde>
 8003614:	2b01      	cmp	r3, #1
 8003616:	d004      	beq.n	8003622 <check_phy_status+0xe6>
 8003618:	e007      	b.n	800362a <check_phy_status+0xee>
        case PHY_MODE_MANUAL:
            printf("Manual.\r\n");
 800361a:	4816      	ldr	r0, [pc, #88]	; (8003674 <check_phy_status+0x138>)
 800361c:	f002 fb56 	bl	8005ccc <puts>
            break;
 8003620:	e007      	b.n	8003632 <check_phy_status+0xf6>
        case PHY_MODE_AUTONEGO:
            printf("Auto-negotiation.\r\n");
 8003622:	4815      	ldr	r0, [pc, #84]	; (8003678 <check_phy_status+0x13c>)
 8003624:	f002 fb52 	bl	8005ccc <puts>
            break;
 8003628:	e003      	b.n	8003632 <check_phy_status+0xf6>
        default:
            printf("Unknown.\r\n");
 800362a:	480a      	ldr	r0, [pc, #40]	; (8003654 <check_phy_status+0x118>)
 800362c:	f002 fb4e 	bl	8005ccc <puts>
            break;
 8003630:	bf00      	nop
    }
}
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	08006ce4 	.word	0x08006ce4
 800363c:	08006d04 	.word	0x08006d04
 8003640:	08006d18 	.word	0x08006d18
 8003644:	08006d2c 	.word	0x08006d2c
 8003648:	08006d50 	.word	0x08006d50
 800364c:	08006d5c 	.word	0x08006d5c
 8003650:	08006d78 	.word	0x08006d78
 8003654:	08006d94 	.word	0x08006d94
 8003658:	08006da0 	.word	0x08006da0
 800365c:	08006dac 	.word	0x08006dac
 8003660:	08006db8 	.word	0x08006db8
 8003664:	08006dc4 	.word	0x08006dc4
 8003668:	08006dd4 	.word	0x08006dd4
 800366c:	08006de4 	.word	0x08006de4
 8003670:	08006df4 	.word	0x08006df4
 8003674:	08006e0c 	.word	0x08006e0c
 8003678:	08006e18 	.word	0x08006e18

0800367c <print_current_host_configuration>:
 * This function retrieves the current network configuration from the WIZnet chip
 * and prints the MAC address, IP address, subnet mask, gateway, and DNS server.
 *
 * @return void
 */
void print_current_host_configuration() {
 800367c:	b5b0      	push	{r4, r5, r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af04      	add	r7, sp, #16
    wiz_NetInfo current_net_info;

    // Retrieve the current network information from the WIZnet chip
    ctlnetwork(CN_GET_NETINFO, (void*)&current_net_info);
 8003682:	463b      	mov	r3, r7
 8003684:	4619      	mov	r1, r3
 8003686:	2001      	movs	r0, #1
 8003688:	f000 fb26 	bl	8003cd8 <ctlnetwork>

    // Print the MAC address
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 800368c:	783b      	ldrb	r3, [r7, #0]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800368e:	4618      	mov	r0, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 8003690:	787b      	ldrb	r3, [r7, #1]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8003692:	461c      	mov	r4, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 8003694:	78bb      	ldrb	r3, [r7, #2]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8003696:	461d      	mov	r5, r3
           current_net_info.mac[3], current_net_info.mac[4], current_net_info.mac[5]);
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	793a      	ldrb	r2, [r7, #4]
 800369c:	7979      	ldrb	r1, [r7, #5]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800369e:	9102      	str	r1, [sp, #8]
 80036a0:	9201      	str	r2, [sp, #4]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	462b      	mov	r3, r5
 80036a6:	4622      	mov	r2, r4
 80036a8:	4601      	mov	r1, r0
 80036aa:	481b      	ldr	r0, [pc, #108]	; (8003718 <print_current_host_configuration+0x9c>)
 80036ac:	f002 faa8 	bl	8005c00 <iprintf>

    // Print the IP address
    printf("IP: %d.%d.%d.%d\r\n",
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80036b0:	79bb      	ldrb	r3, [r7, #6]
    printf("IP: %d.%d.%d.%d\r\n",
 80036b2:	4619      	mov	r1, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80036b4:	79fb      	ldrb	r3, [r7, #7]
    printf("IP: %d.%d.%d.%d\r\n",
 80036b6:	461a      	mov	r2, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80036b8:	7a3b      	ldrb	r3, [r7, #8]
    printf("IP: %d.%d.%d.%d\r\n",
 80036ba:	4618      	mov	r0, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80036bc:	7a7b      	ldrb	r3, [r7, #9]
    printf("IP: %d.%d.%d.%d\r\n",
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4603      	mov	r3, r0
 80036c2:	4816      	ldr	r0, [pc, #88]	; (800371c <print_current_host_configuration+0xa0>)
 80036c4:	f002 fa9c 	bl	8005c00 <iprintf>

    // Print the subnet mask
    printf("SN: %d.%d.%d.%d\r\n",
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80036c8:	7abb      	ldrb	r3, [r7, #10]
    printf("SN: %d.%d.%d.%d\r\n",
 80036ca:	4619      	mov	r1, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80036cc:	7afb      	ldrb	r3, [r7, #11]
    printf("SN: %d.%d.%d.%d\r\n",
 80036ce:	461a      	mov	r2, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80036d0:	7b3b      	ldrb	r3, [r7, #12]
    printf("SN: %d.%d.%d.%d\r\n",
 80036d2:	4618      	mov	r0, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80036d4:	7b7b      	ldrb	r3, [r7, #13]
    printf("SN: %d.%d.%d.%d\r\n",
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4603      	mov	r3, r0
 80036da:	4811      	ldr	r0, [pc, #68]	; (8003720 <print_current_host_configuration+0xa4>)
 80036dc:	f002 fa90 	bl	8005c00 <iprintf>

    // Print the gateway address
    printf("GW: %d.%d.%d.%d\r\n",
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 80036e0:	7bbb      	ldrb	r3, [r7, #14]
    printf("GW: %d.%d.%d.%d\r\n",
 80036e2:	4619      	mov	r1, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
    printf("GW: %d.%d.%d.%d\r\n",
 80036e6:	461a      	mov	r2, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 80036e8:	7c3b      	ldrb	r3, [r7, #16]
    printf("GW: %d.%d.%d.%d\r\n",
 80036ea:	4618      	mov	r0, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 80036ec:	7c7b      	ldrb	r3, [r7, #17]
    printf("GW: %d.%d.%d.%d\r\n",
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	4603      	mov	r3, r0
 80036f2:	480c      	ldr	r0, [pc, #48]	; (8003724 <print_current_host_configuration+0xa8>)
 80036f4:	f002 fa84 	bl	8005c00 <iprintf>

    // Print the DNS server address
    printf("DNS: %d.%d.%d.%d\r\n",
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 80036f8:	7cbb      	ldrb	r3, [r7, #18]
    printf("DNS: %d.%d.%d.%d\r\n",
 80036fa:	4619      	mov	r1, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
    printf("DNS: %d.%d.%d.%d\r\n",
 80036fe:	461a      	mov	r2, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8003700:	7d3b      	ldrb	r3, [r7, #20]
    printf("DNS: %d.%d.%d.%d\r\n",
 8003702:	4618      	mov	r0, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 8003704:	7d7b      	ldrb	r3, [r7, #21]
    printf("DNS: %d.%d.%d.%d\r\n",
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	4603      	mov	r3, r0
 800370a:	4807      	ldr	r0, [pc, #28]	; (8003728 <print_current_host_configuration+0xac>)
 800370c:	f002 fa78 	bl	8005c00 <iprintf>
}
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bdb0      	pop	{r4, r5, r7, pc}
 8003718:	08006e2c 	.word	0x08006e2c
 800371c:	08006e54 	.word	0x08006e54
 8003720:	08006e68 	.word	0x08006e68
 8003724:	08006e7c 	.word	0x08006e7c
 8003728:	08006e90 	.word	0x08006e90

0800372c <SPIReadWrite>:
 *@brief Helper driver to send and receive one byte through SPI
 *@param data   : 1 byte data to transmit
 *@return		: 1 byte data which is received
 */
uint8_t SPIReadWrite(uint8_t data)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
	 * the SPI_CR2 register is set.
	 */

	// check TXE(tx empty buffer) bit of the status register(SR),
	// and wait until the tx buffer becomes empty
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8003736:	bf00      	nop
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <SPIReadWrite+0x4c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	d1f8      	bne.n	8003738 <SPIReadWrite+0xc>



	// write the data to the data register to be sent
	*(__IO uint8_t*)&hspi1.Instance->DR = data;
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <SPIReadWrite+0x4c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	79fa      	ldrb	r2, [r7, #7]
 800374e:	701a      	strb	r2, [r3, #0]
	 *	 * and the RXNE flag is set
	 */

	// wait until the data from the slave is received,
	// and the RXNE flag is set
	while((hspi1.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8003750:	bf00      	nop
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <SPIReadWrite+0x4c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d1f8      	bne.n	8003752 <SPIReadWrite+0x26>


	// return the received byte
	return 	(*(__IO uint8_t*)&hspi1.Instance->DR);
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <SPIReadWrite+0x4c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	200000e8 	.word	0x200000e8

0800377c <wizchip_deselect>:

/**
 *@brief Helper driver to deselect wizchip
 */
void wizchip_deselect()
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_SET);
 8003780:	2201      	movs	r2, #1
 8003782:	2102      	movs	r1, #2
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <wizchip_deselect+0x14>)
 8003786:	f001 f9b9 	bl	8004afc <HAL_GPIO_WritePin>
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40020000 	.word	0x40020000

08003794 <wizchip_select>:

/**
 *@brief Helper driver to select wizchip
 */
void wizchip_select()
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_RESET);
 8003798:	2200      	movs	r2, #0
 800379a:	2102      	movs	r1, #2
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <wizchip_select+0x14>)
 800379e:	f001 f9ad 	bl	8004afc <HAL_GPIO_WritePin>
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40020000 	.word	0x40020000

080037ac <wizchip_read>:
/**
 *@brief Helper driver to read one byte through SPI
 *@return		: 1 byte data which is received
 */
uint8_t wizchip_read()
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
	// pass a dummy variable and read from the spi
	return SPIReadWrite(0x00);
 80037b0:	2000      	movs	r0, #0
 80037b2:	f7ff ffbb 	bl	800372c <SPIReadWrite>
 80037b6:	4603      	mov	r3, r0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}

080037bc <wizchip_write>:
/**
 *@brief Helper driver to send one byte through SPI
 *@param data   : 1 byte data to transmit
 */
void wizchip_write(uint8_t data)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(data);
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ffaf 	bl	800372c <SPIReadWrite>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <wizchip_read_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param buff   : buffer to put the received data
 *@param len    : number of bytes to read
 */
void wizchip_read_burst(uint8_t* buff, uint16_t len)
{
 80037d6:	b590      	push	{r4, r7, lr}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e009      	b.n	80037fc <wizchip_read_burst+0x26>
	{
		buff[i] = wizchip_read();
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	18d4      	adds	r4, r2, r3
 80037ee:	f7ff ffdd 	bl	80037ac <wizchip_read>
 80037f2:	4603      	mov	r3, r0
 80037f4:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3301      	adds	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	429a      	cmp	r2, r3
 8003802:	dbf1      	blt.n	80037e8 <wizchip_read_burst+0x12>
	}

}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bd90      	pop	{r4, r7, pc}

0800380e <wizchip_write_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param data   : array containing data to be sent
 *@param len    : number of bytes to send
 */
void wizchip_write_burst(uint8_t* data, uint16_t len)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	e009      	b.n	8003834 <wizchip_write_burst+0x26>
	{
		wizchip_write(data[i]);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ffc7 	bl	80037bc <wizchip_write>
	for (int i = 0; i < len; i++)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3301      	adds	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	429a      	cmp	r2, r3
 800383a:	dbf1      	blt.n	8003820 <wizchip_write_burst+0x12>
	}
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <w5500_pins_init>:
/**
 *@brief initializer of PA0(RESET) and SCS(PA1)
 */

void w5500_pins_init()
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	611a      	str	r2, [r3, #16]


	// enable GPIO clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800385c:	2300      	movs	r3, #0
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	4b0e      	ldr	r3, [pc, #56]	; (800389c <w5500_pins_init+0x54>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <w5500_pins_init+0x54>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6313      	str	r3, [r2, #48]	; 0x30
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <w5500_pins_init+0x54>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	683b      	ldr	r3, [r7, #0]

	// configuring RESET and SCS as outputs
	GPIO_InitStruct.Pin = RESET_PIN | SCS_PIN;
 8003878:	2303      	movs	r3, #3
 800387a:	607b      	str	r3, [r7, #4]

	// push pull(high if 1 and low if 0)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800387c:	2301      	movs	r3, #1
 800387e:	60bb      	str	r3, [r7, #8]

	// output is NOPULL
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

	// mark these pins fast
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003884:	2302      	movs	r3, #2
 8003886:	613b      	str	r3, [r7, #16]


	// initialize the pins
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	4619      	mov	r1, r3
 800388c:	4804      	ldr	r0, [pc, #16]	; (80038a0 <w5500_pins_init+0x58>)
 800388e:	f000 ffb1 	bl	80047f4 <HAL_GPIO_Init>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	40020000 	.word	0x40020000

080038a4 <w5500_init>:

void w5500_init()
{
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
	// the available size of w5500 is 32KB
	// w5500 supports 8 independents sockets simultaneously
	// here 2KB is allocated for
	// each of the transmit and receive buffer of each socket
	uint8_t memory_for_each_socket[2][8] =
 80038aa:	4b1f      	ldr	r3, [pc, #124]	; (8003928 <w5500_init+0x84>)
 80038ac:	1d3c      	adds	r4, r7, #4
 80038ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{
			{2, 2, 2, 2, 2, 2, 2, 2},		// receive buffer size
			{2, 2, 2, 2, 2, 2, 2, 2}		// transmit buffer size
	};

	uint8_t tmp = 0xFF;
 80038b4:	23ff      	movs	r3, #255	; 0xff
 80038b6:	75fb      	strb	r3, [r7, #23]


	// initialize RESET and SCS pins
	w5500_pins_init();
 80038b8:	f7ff ffc6 	bl	8003848 <w5500_pins_init>

	// first deselect the chip(by setting SCS pin)
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_SET);
 80038bc:	2201      	movs	r2, #1
 80038be:	2102      	movs	r1, #2
 80038c0:	481a      	ldr	r0, [pc, #104]	; (800392c <w5500_init+0x88>)
 80038c2:	f001 f91b 	bl	8004afc <HAL_GPIO_WritePin>


	// hard reset the wiznet chip by clearing RESET
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2101      	movs	r1, #1
 80038ca:	4818      	ldr	r0, [pc, #96]	; (800392c <w5500_init+0x88>)
 80038cc:	f001 f916 	bl	8004afc <HAL_GPIO_WritePin>

	// busy wait for a while and keep the RESET pin 0
	while(tmp--);
 80038d0:	bf00      	nop
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	1e5a      	subs	r2, r3, #1
 80038d6:	75fa      	strb	r2, [r7, #23]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1fa      	bne.n	80038d2 <w5500_init+0x2e>


	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 80038dc:	2201      	movs	r2, #1
 80038de:	2101      	movs	r1, #1
 80038e0:	4812      	ldr	r0, [pc, #72]	; (800392c <w5500_init+0x88>)
 80038e2:	f001 f90b 	bl	8004afc <HAL_GPIO_WritePin>

	// assign the helper drivers to complete the driver

	// callback functions for selecting and deselecting the chip
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80038e6:	4912      	ldr	r1, [pc, #72]	; (8003930 <w5500_init+0x8c>)
 80038e8:	4812      	ldr	r0, [pc, #72]	; (8003934 <w5500_init+0x90>)
 80038ea:	f000 f895 	bl	8003a18 <reg_wizchip_cs_cbfunc>

	// callback functions for reading and writing bytes of data
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 80038ee:	4912      	ldr	r1, [pc, #72]	; (8003938 <w5500_init+0x94>)
 80038f0:	4812      	ldr	r0, [pc, #72]	; (800393c <w5500_init+0x98>)
 80038f2:	f000 f8b7 	bl	8003a64 <reg_wizchip_spi_cbfunc>

	// callback functions for reading and writing burst of data
	reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 80038f6:	4912      	ldr	r1, [pc, #72]	; (8003940 <w5500_init+0x9c>)
 80038f8:	4812      	ldr	r0, [pc, #72]	; (8003944 <w5500_init+0xa0>)
 80038fa:	f000 f8df 	bl	8003abc <reg_wizchip_spiburst_cbfunc>



	// allocate the specified memory for each socket
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memory_for_each_socket) == -1)
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	4619      	mov	r1, r3
 8003902:	2001      	movs	r0, #1
 8003904:	f000 f906 	bl	8003b14 <ctlwizchip>
 8003908:	4603      	mov	r3, r0
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390e:	d103      	bne.n	8003918 <w5500_init+0x74>
	{
		printf("WIZCHIP initialization failed\r\n");
 8003910:	480d      	ldr	r0, [pc, #52]	; (8003948 <w5500_init+0xa4>)
 8003912:	f002 f9db 	bl	8005ccc <puts>
		while(1);
 8003916:	e7fe      	b.n	8003916 <w5500_init+0x72>
	}

	printf("WIZCHIP initialization done successfully\r\n");
 8003918:	480c      	ldr	r0, [pc, #48]	; (800394c <w5500_init+0xa8>)
 800391a:	f002 f9d7 	bl	8005ccc <puts>
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	bd90      	pop	{r4, r7, pc}
 8003926:	bf00      	nop
 8003928:	08006ef0 	.word	0x08006ef0
 800392c:	40020000 	.word	0x40020000
 8003930:	0800377d 	.word	0x0800377d
 8003934:	08003795 	.word	0x08003795
 8003938:	080037bd 	.word	0x080037bd
 800393c:	080037ad 	.word	0x080037ad
 8003940:	0800380f 	.word	0x0800380f
 8003944:	080037d7 	.word	0x080037d7
 8003948:	08006ea4 	.word	0x08006ea4
 800394c:	08006ec4 	.word	0x08006ec4

08003950 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800397a:	b480      	push	{r7}
 800397c:	af00      	add	r7, sp, #0
 800397e:	bf00      	nop
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	460b      	mov	r3, r1
 80039ac:	70fb      	strb	r3, [r7, #3]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	2300      	movs	r3, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	807b      	strh	r3, [r7, #2]
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	807b      	strh	r3, [r7, #2]
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <reg_wizchip_cs_cbfunc+0x16>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <reg_wizchip_cs_cbfunc+0x40>)
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <reg_wizchip_cs_cbfunc+0x44>)
 8003a32:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <reg_wizchip_cs_cbfunc+0x40>)
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <reg_wizchip_cs_cbfunc+0x48>)
 8003a38:	619a      	str	r2, [r3, #24]
 8003a3a:	e006      	b.n	8003a4a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <reg_wizchip_cs_cbfunc+0x40>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003a42:	4a05      	ldr	r2, [pc, #20]	; (8003a58 <reg_wizchip_cs_cbfunc+0x40>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6193      	str	r3, [r2, #24]
   }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	2000003c 	.word	0x2000003c
 8003a5c:	0800396d 	.word	0x0800396d
 8003a60:	0800397b 	.word	0x0800397b

08003a64 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003a6e:	bf00      	nop
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f9      	beq.n	8003a70 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <reg_wizchip_spi_cbfunc+0x24>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <reg_wizchip_spi_cbfunc+0x50>)
 8003a8c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003a90:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <reg_wizchip_spi_cbfunc+0x54>)
 8003a92:	621a      	str	r2, [r3, #32]
 8003a94:	e006      	b.n	8003aa4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003a96:	4a06      	ldr	r2, [pc, #24]	; (8003ab0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6213      	str	r3, [r2, #32]
   }
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	2000003c 	.word	0x2000003c
 8003ab4:	080039c1 	.word	0x080039c1
 8003ab8:	080039d1 	.word	0x080039d1

08003abc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003ac6:	bf00      	nop
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f9      	beq.n	8003ac8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <reg_wizchip_spiburst_cbfunc+0x24>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <reg_wizchip_spiburst_cbfunc+0x50>)
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003ae8:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
 8003aec:	e006      	b.n	8003afc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003aee:	4a06      	ldr	r2, [pc, #24]	; (8003b08 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	2000003c 	.word	0x2000003c
 8003b0c:	080039e7 	.word	0x080039e7
 8003b10:	080039ff 	.word	0x080039ff

08003b14 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	f200 80c7 	bhi.w	8003cc2 <ctlwizchip+0x1ae>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <ctlwizchip+0x28>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b7d 	.word	0x08003b7d
 8003b40:	08003b83 	.word	0x08003b83
 8003b44:	08003baf 	.word	0x08003baf
 8003b48:	08003ba3 	.word	0x08003ba3
 8003b4c:	08003bbd 	.word	0x08003bbd
 8003b50:	08003bc9 	.word	0x08003bc9
 8003b54:	08003bd7 	.word	0x08003bd7
 8003b58:	08003bfd 	.word	0x08003bfd
 8003b5c:	08003c23 	.word	0x08003c23
 8003b60:	08003c67 	.word	0x08003c67
 8003b64:	08003c6d 	.word	0x08003c6d
 8003b68:	08003c75 	.word	0x08003c75
 8003b6c:	08003cc9 	.word	0x08003cc9
 8003b70:	08003c7d 	.word	0x08003c7d
 8003b74:	08003c8b 	.word	0x08003c8b
 8003b78:	08003ca7 	.word	0x08003ca7
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003b7c:	f000 f8ea 	bl	8003d54 <wizchip_sw_reset>
         break;
 8003b80:	e0a3      	b.n	8003cca <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f927 	bl	8003dec <wizchip_init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	e094      	b.n	8003ccc <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f9ac 	bl	8003f04 <wizchip_clrinterrupt>
         break;
 8003bac:	e08d      	b.n	8003cca <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003bae:	f000 f9dd 	bl	8003f6c <wizchip_getinterrupt>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	801a      	strh	r2, [r3, #0]
         break;
 8003bba:	e086      	b.n	8003cca <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f9f8 	bl	8003fb6 <wizchip_setinterruptmask>
         break;         
 8003bc6:	e080      	b.n	8003cca <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003bc8:	f000 fa10 	bl	8003fec <wizchip_getinterruptmask>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	801a      	strh	r2, [r3, #0]
         break;
 8003bd4:	e079      	b.n	8003cca <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003be6:	f7fd f81f 	bl	8000c28 <WIZCHIP_WRITE>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003bf6:	f7fd f817 	bl	8000c28 <WIZCHIP_WRITE>
         break;
 8003bfa:	e066      	b.n	8003cca <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003bfc:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003c00:	f7fc ffc6 	bl	8000b90 <WIZCHIP_READ>
 8003c04:	4603      	mov	r3, r0
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	b29c      	uxth	r4, r3
 8003c0c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003c10:	f7fc ffbe 	bl	8000b90 <WIZCHIP_READ>
 8003c14:	4603      	mov	r3, r0
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	4423      	add	r3, r4
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	801a      	strh	r2, [r3, #0]
         break;
 8003c20:	e053      	b.n	8003cca <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <ctlwizchip+0x1c0>)
 8003c24:	789a      	ldrb	r2, [r3, #2]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <ctlwizchip+0x1c0>)
 8003c30:	78d2      	ldrb	r2, [r2, #3]
 8003c32:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	3302      	adds	r3, #2
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <ctlwizchip+0x1c0>)
 8003c3a:	7912      	ldrb	r2, [r2, #4]
 8003c3c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	3303      	adds	r3, #3
 8003c42:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <ctlwizchip+0x1c0>)
 8003c44:	7952      	ldrb	r2, [r2, #5]
 8003c46:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <ctlwizchip+0x1c0>)
 8003c4e:	7992      	ldrb	r2, [r2, #6]
 8003c50:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	3305      	adds	r3, #5
 8003c56:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <ctlwizchip+0x1c0>)
 8003c58:	79d2      	ldrb	r2, [r2, #7]
 8003c5a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	3306      	adds	r3, #6
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
         break;
 8003c64:	e031      	b.n	8003cca <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003c66:	f000 fa13 	bl	8004090 <wizphy_reset>
         break;
 8003c6a:	e02e      	b.n	8003cca <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003c6c:	6838      	ldr	r0, [r7, #0]
 8003c6e:	f000 fa36 	bl	80040de <wizphy_setphyconf>
         break;
 8003c72:	e02a      	b.n	8003cca <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003c74:	6838      	ldr	r0, [r7, #0]
 8003c76:	f000 fa75 	bl	8004164 <wizphy_getphyconf>
         break;
 8003c7a:	e026      	b.n	8003cca <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fad9 	bl	8004238 <wizphy_setphypmode>
 8003c86:	4603      	mov	r3, r0
 8003c88:	e020      	b.n	8003ccc <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003c8a:	f000 f9e8 	bl	800405e <wizphy_getphypmode>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2bff      	cmp	r3, #255	; 0xff
 8003c96:	d102      	bne.n	8003c9e <ctlwizchip+0x18a>
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c9c:	e016      	b.n	8003ccc <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	7dfa      	ldrb	r2, [r7, #23]
 8003ca2:	701a      	strb	r2, [r3, #0]
         break;
 8003ca4:	e011      	b.n	8003cca <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003ca6:	f000 f9c4 	bl	8004032 <wizphy_getphylink>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2bff      	cmp	r3, #255	; 0xff
 8003cb2:	d102      	bne.n	8003cba <ctlwizchip+0x1a6>
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cb8:	e008      	b.n	8003ccc <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	7dfa      	ldrb	r2, [r7, #23]
 8003cbe:	701a      	strb	r2, [r3, #0]
         break;
 8003cc0:	e003      	b.n	8003cca <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cc6:	e001      	b.n	8003ccc <ctlwizchip+0x1b8>
         break;
 8003cc8:	bf00      	nop
   }
   return 0;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd90      	pop	{r4, r7, pc}
 8003cd4:	2000003c 	.word	0x2000003c

08003cd8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6039      	str	r1, [r7, #0]
 8003ce2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d82c      	bhi.n	8003d44 <ctlnetwork+0x6c>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <ctlnetwork+0x18>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d09 	.word	0x08003d09
 8003cf4:	08003d11 	.word	0x08003d11
 8003cf8:	08003d19 	.word	0x08003d19
 8003cfc:	08003d27 	.word	0x08003d27
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003d3d 	.word	0x08003d3d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003d08:	6838      	ldr	r0, [r7, #0]
 8003d0a:	f000 fadf 	bl	80042cc <wizchip_setnetinfo>
         break;
 8003d0e:	e01c      	b.n	8003d4a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003d10:	6838      	ldr	r0, [r7, #0]
 8003d12:	f000 fb1b 	bl	800434c <wizchip_getnetinfo>
         break;
 8003d16:	e018      	b.n	8003d4a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fb55 	bl	80043cc <wizchip_setnetmode>
 8003d22:	4603      	mov	r3, r0
 8003d24:	e012      	b.n	8003d4c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003d26:	f000 fb73 	bl	8004410 <wizchip_getnetmode>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	701a      	strb	r2, [r3, #0]
         break;
 8003d32:	e00a      	b.n	8003d4a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003d34:	6838      	ldr	r0, [r7, #0]
 8003d36:	f000 fb73 	bl	8004420 <wizchip_settimeout>
         break;
 8003d3a:	e006      	b.n	8003d4a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003d3c:	6838      	ldr	r0, [r7, #0]
 8003d3e:	f000 fb90 	bl	8004462 <wizchip_gettimeout>
         break;
 8003d42:	e002      	b.n	8003d4a <ctlnetwork+0x72>
      default:
         return -1;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d48:	e000      	b.n	8003d4c <ctlnetwork+0x74>
   }
   return 0;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	2206      	movs	r2, #6
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003d64:	f7fc ffae 	bl	8000cc4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d74:	f7fc ffa6 	bl	8000cc4 <WIZCHIP_READ_BUF>
 8003d78:	f107 0310 	add.w	r3, r7, #16
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003d84:	f7fc ff9e 	bl	8000cc4 <WIZCHIP_READ_BUF>
 8003d88:	f107 030c 	add.w	r3, r7, #12
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003d94:	f7fc ff96 	bl	8000cc4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f7fc ff44 	bl	8000c28 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003da0:	2000      	movs	r0, #0
 8003da2:	f7fc fef5 	bl	8000b90 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	2206      	movs	r2, #6
 8003daa:	4619      	mov	r1, r3
 8003dac:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003db0:	f7fc ffe8 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2204      	movs	r2, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003dc0:	f7fc ffe0 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003dc4:	f107 0310 	add.w	r3, r7, #16
 8003dc8:	2204      	movs	r2, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003dd0:	f7fc ffd8 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	2204      	movs	r2, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003de0:	f7fc ffd0 	bl	8000d84 <WIZCHIP_WRITE_BUF>
}
 8003de4:	bf00      	nop
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003dfa:	f7ff ffab 	bl	8003d54 <wizchip_sw_reset>
   if(txsize)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03b      	beq.n	8003e7c <wizchip_init+0x90>
   {
      tmp = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e015      	b.n	8003e3a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	7bbb      	ldrb	r3, [r7, #14]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	dd02      	ble.n	8003e2e <wizchip_init+0x42>
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e2c:	e066      	b.n	8003efc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	73fb      	strb	r3, [r7, #15]
 8003e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3e:	2b07      	cmp	r3, #7
 8003e40:	dde5      	ble.n	8003e0e <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
 8003e46:	e015      	b.n	8003e74 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3301      	adds	r3, #1
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003e56:	4618      	mov	r0, r3
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	f7fc fee0 	bl	8000c28 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e78:	2b07      	cmp	r3, #7
 8003e7a:	dde5      	ble.n	8003e48 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d03b      	beq.n	8003efa <wizchip_init+0x10e>
   {
      tmp = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	e015      	b.n	8003eb8 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	7bbb      	ldrb	r3, [r7, #14]
 8003e98:	4413      	add	r3, r2
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	dd02      	ble.n	8003eac <wizchip_init+0xc0>
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eaa:	e027      	b.n	8003efc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebc:	2b07      	cmp	r3, #7
 8003ebe:	dde5      	ble.n	8003e8c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	e015      	b.n	8003ef2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	3301      	adds	r3, #1
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f7fc fea1 	bl	8000c28 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3301      	adds	r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	73fb      	strb	r3, [r7, #15]
 8003ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef6:	2b07      	cmp	r3, #7
 8003ef8:	dde5      	ble.n	8003ec6 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	0a1b      	lsrs	r3, r3, #8
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	f023 030f 	bic.w	r3, r3, #15
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003f28:	f7fc fe7e 	bl	8000c28 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
 8003f30:	e014      	b.n	8003f5c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003f32:	7bba      	ldrb	r2, [r7, #14]
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	fa42 f303 	asr.w	r3, r2, r3
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <wizchip_clrinterrupt+0x52>
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	3301      	adds	r3, #1
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f4e:	211f      	movs	r1, #31
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc fe69 	bl	8000c28 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b07      	cmp	r3, #7
 8003f60:	d9e7      	bls.n	8003f32 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003f7e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003f82:	f7fc fe05 	bl	8000b90 <WIZCHIP_READ>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f023 030f 	bic.w	r3, r3, #15
 8003f8c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003f8e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003f92:	f7fc fdfd 	bl	8000b90 <WIZCHIP_READ>
 8003f96:	4603      	mov	r3, r0
 8003f98:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003f9a:	79bb      	ldrb	r3, [r7, #6]
 8003f9c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003f9e:	88bb      	ldrh	r3, [r7, #4]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003fac:	88bb      	ldrh	r3, [r7, #4]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003fd4:	f7fc fe28 	bl	8000c28 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003fd8:	7bbb      	ldrb	r3, [r7, #14]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003fe0:	f7fc fe22 	bl	8000c28 <WIZCHIP_WRITE>
#endif   
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003ffe:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8004002:	f7fc fdc5 	bl	8000b90 <WIZCHIP_READ>
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800400a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800400e:	f7fc fdbf 	bl	8000b90 <WIZCHIP_READ>
 8004012:	4603      	mov	r3, r0
 8004014:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004016:	79bb      	ldrb	r3, [r7, #6]
 8004018:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800401a:	88bb      	ldrh	r3, [r7, #4]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	b29a      	uxth	r2, r3
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	b29b      	uxth	r3, r3
 8004024:	4413      	add	r3, r2
 8004026:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004028:	88bb      	ldrh	r3, [r7, #4]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004038:	2300      	movs	r3, #0
 800403a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800403c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004040:	f7fc fda6 	bl	8000b90 <WIZCHIP_READ>
 8004044:	4603      	mov	r3, r0
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800404e:	2301      	movs	r3, #1
 8004050:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004068:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800406c:	f7fc fd90 	bl	8000b90 <WIZCHIP_READ>
 8004070:	4603      	mov	r3, r0
 8004072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004076:	2b30      	cmp	r3, #48	; 0x30
 8004078:	d102      	bne.n	8004080 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800407a:	2301      	movs	r3, #1
 800407c:	71fb      	strb	r3, [r7, #7]
 800407e:	e001      	b.n	8004084 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004080:	2300      	movs	r3, #0
 8004082:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004096:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800409a:	f7fc fd79 	bl	8000b90 <WIZCHIP_READ>
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	4619      	mov	r1, r3
 80040ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80040b2:	f7fc fdb9 	bl	8000c28 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80040b6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80040ba:	f7fc fd69 	bl	8000b90 <WIZCHIP_READ>
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040c8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	4619      	mov	r1, r3
 80040ce:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80040d2:	f7fc fda9 	bl	8000c28 <WIZCHIP_WRITE>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d104      	bne.n	80040fc <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f8:	73fb      	strb	r3, [r7, #15]
 80040fa:	e003      	b.n	8004104 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004102:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d104      	bne.n	8004116 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004112:	73fb      	strb	r3, [r7, #15]
 8004114:	e019      	b.n	800414a <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	78db      	ldrb	r3, [r3, #3]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d10d      	bne.n	800413a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	789b      	ldrb	r3, [r3, #2]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d104      	bne.n	8004130 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	f043 0318 	orr.w	r3, r3, #24
 800412c:	73fb      	strb	r3, [r7, #15]
 800412e:	e00c      	b.n	800414a <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	f043 0308 	orr.w	r3, r3, #8
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e007      	b.n	800414a <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	789b      	ldrb	r3, [r3, #2]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d103      	bne.n	800414a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	f043 0310 	orr.w	r3, r3, #16
 8004148:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	4619      	mov	r1, r3
 800414e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004152:	f7fc fd69 	bl	8000c28 <WIZCHIP_WRITE>
   wizphy_reset();
 8004156:	f7ff ff9b 	bl	8004090 <wizphy_reset>
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004170:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004174:	f7fc fd0c 	bl	8000b90 <WIZCHIP_READ>
 8004178:	4603      	mov	r3, r0
 800417a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	119b      	asrs	r3, r3, #6
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	b2da      	uxtb	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004192:	2b20      	cmp	r3, #32
 8004194:	d001      	beq.n	800419a <wizphy_getphyconf+0x36>
 8004196:	2b38      	cmp	r3, #56	; 0x38
 8004198:	d103      	bne.n	80041a2 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	705a      	strb	r2, [r3, #1]
         break;
 80041a0:	e003      	b.n	80041aa <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	705a      	strb	r2, [r3, #1]
         break;
 80041a8:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b0:	3b10      	subs	r3, #16
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	bf8c      	ite	hi
 80041b6:	2201      	movhi	r2, #1
 80041b8:	2200      	movls	r2, #0
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	2a00      	cmp	r2, #0
 80041be:	d10f      	bne.n	80041e0 <wizphy_getphyconf+0x7c>
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <wizphy_getphyconf+0xcc>)
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	709a      	strb	r2, [r3, #2]
         break;
 80041de:	e003      	b.n	80041e8 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	709a      	strb	r2, [r3, #2]
         break;
 80041e6:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ee:	3b08      	subs	r3, #8
 80041f0:	2b18      	cmp	r3, #24
 80041f2:	bf8c      	ite	hi
 80041f4:	2201      	movhi	r2, #1
 80041f6:	2200      	movls	r2, #0
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	d10f      	bne.n	800421e <wizphy_getphyconf+0xba>
 80041fe:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <wizphy_getphyconf+0xd0>)
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	70da      	strb	r2, [r3, #3]
         break;
 800421c:	e003      	b.n	8004226 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	70da      	strb	r2, [r3, #3]
         break;
 8004224:	bf00      	nop
   }
}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	00010101 	.word	0x00010101
 8004234:	01010001 	.word	0x01010001

08004238 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004246:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800424a:	f7fc fca1 	bl	8000b90 <WIZCHIP_READ>
 800424e:	4603      	mov	r3, r0
 8004250:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d102      	bne.n	8004262 <wizphy_setphypmode+0x2a>
 800425c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004260:	e030      	b.n	80042c4 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004268:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d104      	bne.n	800427a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004276:	73fb      	strb	r3, [r7, #15]
 8004278:	e003      	b.n	8004282 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004280:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	4619      	mov	r1, r3
 8004286:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800428a:	f7fc fccd 	bl	8000c28 <WIZCHIP_WRITE>
   wizphy_reset();
 800428e:	f7ff feff 	bl	8004090 <wizphy_reset>
   tmp = getPHYCFGR();
 8004292:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004296:	f7fc fc7b 	bl	8000b90 <WIZCHIP_READ>
 800429a:	4603      	mov	r3, r0
 800429c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d106      	bne.n	80042b2 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <wizphy_setphypmode+0x88>
 80042ae:	2300      	movs	r3, #0
 80042b0:	e008      	b.n	80042c4 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <wizphy_setphypmode+0x88>
 80042bc:	2300      	movs	r3, #0
 80042be:	e001      	b.n	80042c4 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80042c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2206      	movs	r2, #6
 80042d8:	4619      	mov	r1, r3
 80042da:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80042de:	f7fc fd51 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	330e      	adds	r3, #14
 80042e6:	2204      	movs	r2, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042ee:	f7fc fd49 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	330a      	adds	r3, #10
 80042f6:	2204      	movs	r2, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80042fe:	f7fc fd41 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3306      	adds	r3, #6
 8004306:	2204      	movs	r2, #4
 8004308:	4619      	mov	r1, r3
 800430a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800430e:	f7fc fd39 	bl	8000d84 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7c9a      	ldrb	r2, [r3, #18]
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <wizchip_setnetinfo+0x78>)
 8004318:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7cda      	ldrb	r2, [r3, #19]
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <wizchip_setnetinfo+0x78>)
 8004320:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7d1a      	ldrb	r2, [r3, #20]
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <wizchip_setnetinfo+0x78>)
 8004328:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7d5a      	ldrb	r2, [r3, #21]
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <wizchip_setnetinfo+0x78>)
 8004330:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	7d9a      	ldrb	r2, [r3, #22]
 8004336:	4b04      	ldr	r3, [pc, #16]	; (8004348 <wizchip_setnetinfo+0x7c>)
 8004338:	701a      	strb	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200001e8 	.word	0x200001e8
 8004348:	200001ec 	.word	0x200001ec

0800434c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2206      	movs	r2, #6
 8004358:	4619      	mov	r1, r3
 800435a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800435e:	f7fc fcb1 	bl	8000cc4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	330e      	adds	r3, #14
 8004366:	2204      	movs	r2, #4
 8004368:	4619      	mov	r1, r3
 800436a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800436e:	f7fc fca9 	bl	8000cc4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	330a      	adds	r3, #10
 8004376:	2204      	movs	r2, #4
 8004378:	4619      	mov	r1, r3
 800437a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800437e:	f7fc fca1 	bl	8000cc4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3306      	adds	r3, #6
 8004386:	2204      	movs	r2, #4
 8004388:	4619      	mov	r1, r3
 800438a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800438e:	f7fc fc99 	bl	8000cc4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004392:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <wizchip_getnetinfo+0x78>)
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <wizchip_getnetinfo+0x78>)
 800439c:	785a      	ldrb	r2, [r3, #1]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <wizchip_getnetinfo+0x78>)
 80043a4:	789a      	ldrb	r2, [r3, #2]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <wizchip_getnetinfo+0x78>)
 80043ac:	78da      	ldrb	r2, [r3, #3]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <wizchip_getnetinfo+0x7c>)
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	759a      	strb	r2, [r3, #22]
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200001e8 	.word	0x200001e8
 80043c8:	200001ec 	.word	0x200001ec

080043cc <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <wizchip_setnetmode+0x1e>
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043e8:	e00e      	b.n	8004408 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80043ea:	2000      	movs	r0, #0
 80043ec:	f7fc fbd0 	bl	8000b90 <WIZCHIP_READ>
 80043f0:	4603      	mov	r3, r0
 80043f2:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80043f4:	7bfa      	ldrb	r2, [r7, #15]
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	4619      	mov	r1, r3
 8004400:	2000      	movs	r0, #0
 8004402:	f7fc fc11 	bl	8000c28 <WIZCHIP_WRITE>
   return 0;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004414:	2000      	movs	r0, #0
 8004416:	f7fc fbbb 	bl	8000b90 <WIZCHIP_READ>
 800441a:	4603      	mov	r3, r0
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}

08004420 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004432:	f7fc fbf9 	bl	8000c28 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	885b      	ldrh	r3, [r3, #2]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	b29b      	uxth	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	4619      	mov	r1, r3
 8004442:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004446:	f7fc fbef 	bl	8000c28 <WIZCHIP_WRITE>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	885b      	ldrh	r3, [r3, #2]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	4619      	mov	r1, r3
 8004452:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004456:	f7fc fbe7 	bl	8000c28 <WIZCHIP_WRITE>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8004462:	b590      	push	{r4, r7, lr}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800446a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800446e:	f7fc fb8f 	bl	8000b90 <WIZCHIP_READ>
 8004472:	4603      	mov	r3, r0
 8004474:	461a      	mov	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800447a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800447e:	f7fc fb87 	bl	8000b90 <WIZCHIP_READ>
 8004482:	4603      	mov	r3, r0
 8004484:	b29b      	uxth	r3, r3
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	b29c      	uxth	r4, r3
 800448a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800448e:	f7fc fb7f 	bl	8000b90 <WIZCHIP_READ>
 8004492:	4603      	mov	r3, r0
 8004494:	b29b      	uxth	r3, r3
 8004496:	4423      	add	r3, r4
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	805a      	strh	r2, [r3, #2]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd90      	pop	{r4, r7, pc}
	...

080044a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80044ac:	f7fc fb5e 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044b0:	480c      	ldr	r0, [pc, #48]	; (80044e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044b2:	490d      	ldr	r1, [pc, #52]	; (80044e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044b4:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b8:	e002      	b.n	80044c0 <LoopCopyDataInit>

080044ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044be:	3304      	adds	r3, #4

080044c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c4:	d3f9      	bcc.n	80044ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044c6:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044c8:	4c0a      	ldr	r4, [pc, #40]	; (80044f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80044ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044cc:	e001      	b.n	80044d2 <LoopFillZerobss>

080044ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044d0:	3204      	adds	r2, #4

080044d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d4:	d3fb      	bcc.n	80044ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044d6:	f001 fde3 	bl	80060a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044da:	f7fc f84f 	bl	800057c <main>
  bx  lr    
 80044de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80044e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80044ec:	08006f5c 	.word	0x08006f5c
  ldr r2, =_sbss
 80044f0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80044f4:	20000340 	.word	0x20000340

080044f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044f8:	e7fe      	b.n	80044f8 <ADC_IRQHandler>
	...

080044fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <HAL_Init+0x40>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0d      	ldr	r2, [pc, #52]	; (800453c <HAL_Init+0x40>)
 8004506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800450a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_Init+0x40>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <HAL_Init+0x40>)
 8004512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004518:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_Init+0x40>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a07      	ldr	r2, [pc, #28]	; (800453c <HAL_Init+0x40>)
 800451e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004524:	2003      	movs	r0, #3
 8004526:	f000 f931 	bl	800478c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800452a:	200f      	movs	r0, #15
 800452c:	f000 f808 	bl	8004540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004530:	f7fc f984 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023c00 	.word	0x40023c00

08004540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_InitTick+0x54>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_InitTick+0x58>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	4619      	mov	r1, r3
 8004552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004556:	fbb3 f3f1 	udiv	r3, r3, r1
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f93b 	bl	80047da <HAL_SYSTICK_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e00e      	b.n	800458c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b0f      	cmp	r3, #15
 8004572:	d80a      	bhi.n	800458a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004574:	2200      	movs	r2, #0
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800457c:	f000 f911 	bl	80047a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004580:	4a06      	ldr	r2, [pc, #24]	; (800459c <HAL_InitTick+0x5c>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000018 	.word	0x20000018
 8004598:	2000006c 	.word	0x2000006c
 800459c:	20000068 	.word	0x20000068

080045a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_IncTick+0x20>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_IncTick+0x24>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4413      	add	r3, r2
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <HAL_IncTick+0x24>)
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	2000006c 	.word	0x2000006c
 80045c4:	200001f0 	.word	0x200001f0

080045c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return uwTick;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_GetTick+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	200001f0 	.word	0x200001f0

080045e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e8:	f7ff ffee 	bl	80045c8 <HAL_GetTick>
 80045ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f8:	d005      	beq.n	8004606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045fa:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <HAL_Delay+0x44>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004606:	bf00      	nop
 8004608:	f7ff ffde 	bl	80045c8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	429a      	cmp	r2, r3
 8004616:	d8f7      	bhi.n	8004608 <HAL_Delay+0x28>
  {
  }
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	2000006c 	.word	0x2000006c

08004628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004644:	4013      	ands	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465a:	4a04      	ldr	r2, [pc, #16]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	60d3      	str	r3, [r2, #12]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <__NVIC_GetPriorityGrouping+0x18>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	f003 0307 	and.w	r3, r3, #7
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469c:	2b00      	cmp	r3, #0
 800469e:	db0a      	blt.n	80046b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	490c      	ldr	r1, [pc, #48]	; (80046d8 <__NVIC_SetPriority+0x4c>)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	0112      	lsls	r2, r2, #4
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	440b      	add	r3, r1
 80046b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b4:	e00a      	b.n	80046cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4908      	ldr	r1, [pc, #32]	; (80046dc <__NVIC_SetPriority+0x50>)
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	3b04      	subs	r3, #4
 80046c4:	0112      	lsls	r2, r2, #4
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	440b      	add	r3, r1
 80046ca:	761a      	strb	r2, [r3, #24]
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000e100 	.word	0xe000e100
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	; 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f1c3 0307 	rsb	r3, r3, #7
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	bf28      	it	cs
 80046fe:	2304      	movcs	r3, #4
 8004700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3304      	adds	r3, #4
 8004706:	2b06      	cmp	r3, #6
 8004708:	d902      	bls.n	8004710 <NVIC_EncodePriority+0x30>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3b03      	subs	r3, #3
 800470e:	e000      	b.n	8004712 <NVIC_EncodePriority+0x32>
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	401a      	ands	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa01 f303 	lsl.w	r3, r1, r3
 8004732:	43d9      	mvns	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	4313      	orrs	r3, r2
         );
}
 800473a:	4618      	mov	r0, r3
 800473c:	3724      	adds	r7, #36	; 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3b01      	subs	r3, #1
 8004754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004758:	d301      	bcc.n	800475e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800475a:	2301      	movs	r3, #1
 800475c:	e00f      	b.n	800477e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <SysTick_Config+0x40>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3b01      	subs	r3, #1
 8004764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004766:	210f      	movs	r1, #15
 8004768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800476c:	f7ff ff8e 	bl	800468c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <SysTick_Config+0x40>)
 8004772:	2200      	movs	r2, #0
 8004774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <SysTick_Config+0x40>)
 8004778:	2207      	movs	r2, #7
 800477a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	e000e010 	.word	0xe000e010

0800478c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff ff47 	bl	8004628 <__NVIC_SetPriorityGrouping>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	4603      	mov	r3, r0
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047b4:	f7ff ff5c 	bl	8004670 <__NVIC_GetPriorityGrouping>
 80047b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	6978      	ldr	r0, [r7, #20]
 80047c0:	f7ff ff8e 	bl	80046e0 <NVIC_EncodePriority>
 80047c4:	4602      	mov	r2, r0
 80047c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff ff5d 	bl	800468c <__NVIC_SetPriority>
}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff ffb0 	bl	8004748 <SysTick_Config>
 80047e8:	4603      	mov	r3, r0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e159      	b.n	8004ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004810:	2201      	movs	r2, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	429a      	cmp	r2, r3
 800482a:	f040 8148 	bne.w	8004abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d005      	beq.n	8004846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004842:	2b02      	cmp	r3, #2
 8004844:	d130      	bne.n	80048a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2203      	movs	r2, #3
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800487c:	2201      	movs	r2, #1
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 0201 	and.w	r2, r3, #1
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d017      	beq.n	80048e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2203      	movs	r2, #3
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d123      	bne.n	8004938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	08da      	lsrs	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3208      	adds	r2, #8
 80048f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	220f      	movs	r2, #15
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	08da      	lsrs	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3208      	adds	r2, #8
 8004932:	69b9      	ldr	r1, [r7, #24]
 8004934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	2203      	movs	r2, #3
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0203 	and.w	r2, r3, #3
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80a2 	beq.w	8004abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	4b57      	ldr	r3, [pc, #348]	; (8004adc <HAL_GPIO_Init+0x2e8>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	4a56      	ldr	r2, [pc, #344]	; (8004adc <HAL_GPIO_Init+0x2e8>)
 8004984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004988:	6453      	str	r3, [r2, #68]	; 0x44
 800498a:	4b54      	ldr	r3, [pc, #336]	; (8004adc <HAL_GPIO_Init+0x2e8>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004996:	4a52      	ldr	r2, [pc, #328]	; (8004ae0 <HAL_GPIO_Init+0x2ec>)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	3302      	adds	r3, #2
 800499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a49      	ldr	r2, [pc, #292]	; (8004ae4 <HAL_GPIO_Init+0x2f0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d019      	beq.n	80049f6 <HAL_GPIO_Init+0x202>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a48      	ldr	r2, [pc, #288]	; (8004ae8 <HAL_GPIO_Init+0x2f4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_GPIO_Init+0x1fe>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a47      	ldr	r2, [pc, #284]	; (8004aec <HAL_GPIO_Init+0x2f8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00d      	beq.n	80049ee <HAL_GPIO_Init+0x1fa>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a46      	ldr	r2, [pc, #280]	; (8004af0 <HAL_GPIO_Init+0x2fc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <HAL_GPIO_Init+0x1f6>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a45      	ldr	r2, [pc, #276]	; (8004af4 <HAL_GPIO_Init+0x300>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <HAL_GPIO_Init+0x1f2>
 80049e2:	2304      	movs	r3, #4
 80049e4:	e008      	b.n	80049f8 <HAL_GPIO_Init+0x204>
 80049e6:	2307      	movs	r3, #7
 80049e8:	e006      	b.n	80049f8 <HAL_GPIO_Init+0x204>
 80049ea:	2303      	movs	r3, #3
 80049ec:	e004      	b.n	80049f8 <HAL_GPIO_Init+0x204>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e002      	b.n	80049f8 <HAL_GPIO_Init+0x204>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <HAL_GPIO_Init+0x204>
 80049f6:	2300      	movs	r3, #0
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	f002 0203 	and.w	r2, r2, #3
 80049fe:	0092      	lsls	r2, r2, #2
 8004a00:	4093      	lsls	r3, r2
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a08:	4935      	ldr	r1, [pc, #212]	; (8004ae0 <HAL_GPIO_Init+0x2ec>)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	3302      	adds	r3, #2
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a16:	4b38      	ldr	r3, [pc, #224]	; (8004af8 <HAL_GPIO_Init+0x304>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4013      	ands	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a3a:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <HAL_GPIO_Init+0x304>)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a40:	4b2d      	ldr	r3, [pc, #180]	; (8004af8 <HAL_GPIO_Init+0x304>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a64:	4a24      	ldr	r2, [pc, #144]	; (8004af8 <HAL_GPIO_Init+0x304>)
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a6a:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <HAL_GPIO_Init+0x304>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a8e:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <HAL_GPIO_Init+0x304>)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a94:	4b18      	ldr	r3, [pc, #96]	; (8004af8 <HAL_GPIO_Init+0x304>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ab8:	4a0f      	ldr	r2, [pc, #60]	; (8004af8 <HAL_GPIO_Init+0x304>)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	f67f aea2 	bls.w	8004810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	3724      	adds	r7, #36	; 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40013800 	.word	0x40013800
 8004ae4:	40020000 	.word	0x40020000
 8004ae8:	40020400 	.word	0x40020400
 8004aec:	40020800 	.word	0x40020800
 8004af0:	40020c00 	.word	0x40020c00
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40013c00 	.word	0x40013c00

08004afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	807b      	strh	r3, [r7, #2]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b0c:	787b      	ldrb	r3, [r7, #1]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b12:	887a      	ldrh	r2, [r7, #2]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b18:	e003      	b.n	8004b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b1a:	887b      	ldrh	r3, [r7, #2]
 8004b1c:	041a      	lsls	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	619a      	str	r2, [r3, #24]
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e267      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d075      	beq.n	8004c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b4e:	4b88      	ldr	r3, [pc, #544]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d00c      	beq.n	8004b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b5a:	4b85      	ldr	r3, [pc, #532]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d112      	bne.n	8004b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b66:	4b82      	ldr	r3, [pc, #520]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b72:	d10b      	bne.n	8004b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	4b7e      	ldr	r3, [pc, #504]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d05b      	beq.n	8004c38 <HAL_RCC_OscConfig+0x108>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d157      	bne.n	8004c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e242      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d106      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x74>
 8004b96:	4b76      	ldr	r3, [pc, #472]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a75      	ldr	r2, [pc, #468]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e01d      	b.n	8004be0 <HAL_RCC_OscConfig+0xb0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x98>
 8004bae:	4b70      	ldr	r3, [pc, #448]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a6f      	ldr	r2, [pc, #444]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	4b6d      	ldr	r3, [pc, #436]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6c      	ldr	r2, [pc, #432]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e00b      	b.n	8004be0 <HAL_RCC_OscConfig+0xb0>
 8004bc8:	4b69      	ldr	r3, [pc, #420]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a68      	ldr	r2, [pc, #416]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	4b66      	ldr	r3, [pc, #408]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a65      	ldr	r2, [pc, #404]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d013      	beq.n	8004c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be8:	f7ff fcee 	bl	80045c8 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf0:	f7ff fcea 	bl	80045c8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	; 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e207      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c02:	4b5b      	ldr	r3, [pc, #364]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0xc0>
 8004c0e:	e014      	b.n	8004c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7ff fcda 	bl	80045c8 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c18:	f7ff fcd6 	bl	80045c8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e1f3      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2a:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0xe8>
 8004c36:	e000      	b.n	8004c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d063      	beq.n	8004d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c46:	4b4a      	ldr	r3, [pc, #296]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c52:	4b47      	ldr	r3, [pc, #284]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d11c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c5e:	4b44      	ldr	r3, [pc, #272]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d116      	bne.n	8004c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6a:	4b41      	ldr	r3, [pc, #260]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_RCC_OscConfig+0x152>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e1c7      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c82:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4937      	ldr	r1, [pc, #220]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c96:	e03a      	b.n	8004d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d020      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca0:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca6:	f7ff fc8f 	bl	80045c8 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cae:	f7ff fc8b 	bl	80045c8 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e1a8      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ccc:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4925      	ldr	r1, [pc, #148]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	600b      	str	r3, [r1, #0]
 8004ce0:	e015      	b.n	8004d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce2:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7ff fc6e 	bl	80045c8 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf0:	f7ff fc6a 	bl	80045c8 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e187      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d02:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d036      	beq.n	8004d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <HAL_RCC_OscConfig+0x248>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7ff fc4e 	bl	80045c8 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d30:	f7ff fc4a 	bl	80045c8 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e167      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0x200>
 8004d4e:	e01b      	b.n	8004d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_OscConfig+0x248>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d56:	f7ff fc37 	bl	80045c8 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5c:	e00e      	b.n	8004d7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d5e:	f7ff fc33 	bl	80045c8 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d907      	bls.n	8004d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e150      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
 8004d70:	40023800 	.word	0x40023800
 8004d74:	42470000 	.word	0x42470000
 8004d78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	4b88      	ldr	r3, [pc, #544]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ea      	bne.n	8004d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8097 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9a:	4b81      	ldr	r3, [pc, #516]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	4b7d      	ldr	r3, [pc, #500]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	4a7c      	ldr	r2, [pc, #496]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6413      	str	r3, [r2, #64]	; 0x40
 8004db6:	4b7a      	ldr	r3, [pc, #488]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc6:	4b77      	ldr	r3, [pc, #476]	; (8004fa4 <HAL_RCC_OscConfig+0x474>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d118      	bne.n	8004e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dd2:	4b74      	ldr	r3, [pc, #464]	; (8004fa4 <HAL_RCC_OscConfig+0x474>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a73      	ldr	r2, [pc, #460]	; (8004fa4 <HAL_RCC_OscConfig+0x474>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dde:	f7ff fbf3 	bl	80045c8 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7ff fbef 	bl	80045c8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e10c      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df8:	4b6a      	ldr	r3, [pc, #424]	; (8004fa4 <HAL_RCC_OscConfig+0x474>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCC_OscConfig+0x2ea>
 8004e0c:	4b64      	ldr	r3, [pc, #400]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	4a63      	ldr	r2, [pc, #396]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	; 0x70
 8004e18:	e01c      	b.n	8004e54 <HAL_RCC_OscConfig+0x324>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b05      	cmp	r3, #5
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x30c>
 8004e22:	4b5f      	ldr	r3, [pc, #380]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a5e      	ldr	r2, [pc, #376]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e28:	f043 0304 	orr.w	r3, r3, #4
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2e:	4b5c      	ldr	r3, [pc, #368]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	4a5b      	ldr	r2, [pc, #364]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3a:	e00b      	b.n	8004e54 <HAL_RCC_OscConfig+0x324>
 8004e3c:	4b58      	ldr	r3, [pc, #352]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	4a57      	ldr	r2, [pc, #348]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	6713      	str	r3, [r2, #112]	; 0x70
 8004e48:	4b55      	ldr	r3, [pc, #340]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	4a54      	ldr	r2, [pc, #336]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e4e:	f023 0304 	bic.w	r3, r3, #4
 8004e52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d015      	beq.n	8004e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7ff fbb4 	bl	80045c8 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e64:	f7ff fbb0 	bl	80045c8 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e0cb      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7a:	4b49      	ldr	r3, [pc, #292]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0ee      	beq.n	8004e64 <HAL_RCC_OscConfig+0x334>
 8004e86:	e014      	b.n	8004eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e88:	f7ff fb9e 	bl	80045c8 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e90:	f7ff fb9a 	bl	80045c8 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e0b5      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea6:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1ee      	bne.n	8004e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	4a38      	ldr	r2, [pc, #224]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80a1 	beq.w	8005010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ece:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d05c      	beq.n	8004f94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d141      	bne.n	8004f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee2:	4b31      	ldr	r3, [pc, #196]	; (8004fa8 <HAL_RCC_OscConfig+0x478>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7ff fb6e 	bl	80045c8 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7ff fb6a 	bl	80045c8 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e087      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f02:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	019b      	lsls	r3, r3, #6
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	3b01      	subs	r3, #1
 8004f28:	041b      	lsls	r3, r3, #16
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	061b      	lsls	r3, r3, #24
 8004f32:	491b      	ldr	r1, [pc, #108]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f38:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <HAL_RCC_OscConfig+0x478>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3e:	f7ff fb43 	bl	80045c8 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f46:	f7ff fb3f 	bl	80045c8 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e05c      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f58:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x416>
 8004f64:	e054      	b.n	8005010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <HAL_RCC_OscConfig+0x478>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7ff fb2c 	bl	80045c8 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f74:	f7ff fb28 	bl	80045c8 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e045      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x444>
 8004f92:	e03d      	b.n	8005010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e038      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <HAL_RCC_OscConfig+0x4ec>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d028      	beq.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d121      	bne.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d11a      	bne.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fdc:	4013      	ands	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d111      	bne.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800

08005020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0cc      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005034:	4b68      	ldr	r3, [pc, #416]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d90c      	bls.n	800505c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b65      	ldr	r3, [pc, #404]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b63      	ldr	r3, [pc, #396]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0b8      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d020      	beq.n	80050aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005074:	4b59      	ldr	r3, [pc, #356]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4a58      	ldr	r2, [pc, #352]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800507e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800508c:	4b53      	ldr	r3, [pc, #332]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4a52      	ldr	r2, [pc, #328]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005098:	4b50      	ldr	r3, [pc, #320]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	494d      	ldr	r1, [pc, #308]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d044      	beq.n	8005140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d107      	bne.n	80050ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	4b47      	ldr	r3, [pc, #284]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d119      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e07f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d003      	beq.n	80050de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050de:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e06f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ee:	4b3b      	ldr	r3, [pc, #236]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e067      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050fe:	4b37      	ldr	r3, [pc, #220]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 0203 	bic.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4934      	ldr	r1, [pc, #208]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005110:	f7ff fa5a 	bl	80045c8 <HAL_GetTick>
 8005114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	e00a      	b.n	800512e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7ff fa56 	bl	80045c8 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	; 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e04f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 020c 	and.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	429a      	cmp	r2, r3
 800513e:	d1eb      	bne.n	8005118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005140:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d20c      	bcs.n	8005168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b22      	ldr	r3, [pc, #136]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e032      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4916      	ldr	r1, [pc, #88]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	490e      	ldr	r1, [pc, #56]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051a6:	f000 f821 	bl	80051ec <HAL_RCC_GetSysClockFreq>
 80051aa:	4602      	mov	r2, r0
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	490a      	ldr	r1, [pc, #40]	; (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 80051b8:	5ccb      	ldrb	r3, [r1, r3]
 80051ba:	fa22 f303 	lsr.w	r3, r2, r3
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <HAL_RCC_ClockConfig+0x1c8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff f9ba 	bl	8004540 <HAL_InitTick>

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40023c00 	.word	0x40023c00
 80051dc:	40023800 	.word	0x40023800
 80051e0:	08006f00 	.word	0x08006f00
 80051e4:	20000018 	.word	0x20000018
 80051e8:	20000068 	.word	0x20000068

080051ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f0:	b090      	sub	sp, #64	; 0x40
 80051f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
 80051f8:	2300      	movs	r3, #0
 80051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051fc:	2300      	movs	r3, #0
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005204:	4b59      	ldr	r3, [pc, #356]	; (800536c <HAL_RCC_GetSysClockFreq+0x180>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b08      	cmp	r3, #8
 800520e:	d00d      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x40>
 8005210:	2b08      	cmp	r3, #8
 8005212:	f200 80a1 	bhi.w	8005358 <HAL_RCC_GetSysClockFreq+0x16c>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x34>
 800521a:	2b04      	cmp	r3, #4
 800521c:	d003      	beq.n	8005226 <HAL_RCC_GetSysClockFreq+0x3a>
 800521e:	e09b      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005220:	4b53      	ldr	r3, [pc, #332]	; (8005370 <HAL_RCC_GetSysClockFreq+0x184>)
 8005222:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005224:	e09b      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005226:	4b53      	ldr	r3, [pc, #332]	; (8005374 <HAL_RCC_GetSysClockFreq+0x188>)
 8005228:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800522a:	e098      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800522c:	4b4f      	ldr	r3, [pc, #316]	; (800536c <HAL_RCC_GetSysClockFreq+0x180>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005234:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005236:	4b4d      	ldr	r3, [pc, #308]	; (800536c <HAL_RCC_GetSysClockFreq+0x180>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d028      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005242:	4b4a      	ldr	r3, [pc, #296]	; (800536c <HAL_RCC_GetSysClockFreq+0x180>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	099b      	lsrs	r3, r3, #6
 8005248:	2200      	movs	r2, #0
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	627a      	str	r2, [r7, #36]	; 0x24
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005254:	2100      	movs	r1, #0
 8005256:	4b47      	ldr	r3, [pc, #284]	; (8005374 <HAL_RCC_GetSysClockFreq+0x188>)
 8005258:	fb03 f201 	mul.w	r2, r3, r1
 800525c:	2300      	movs	r3, #0
 800525e:	fb00 f303 	mul.w	r3, r0, r3
 8005262:	4413      	add	r3, r2
 8005264:	4a43      	ldr	r2, [pc, #268]	; (8005374 <HAL_RCC_GetSysClockFreq+0x188>)
 8005266:	fba0 1202 	umull	r1, r2, r0, r2
 800526a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800526c:	460a      	mov	r2, r1
 800526e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005272:	4413      	add	r3, r2
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005278:	2200      	movs	r2, #0
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	61fa      	str	r2, [r7, #28]
 800527e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005282:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005286:	f7fa fffb 	bl	8000280 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4613      	mov	r3, r2
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005292:	e053      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005294:	4b35      	ldr	r3, [pc, #212]	; (800536c <HAL_RCC_GetSysClockFreq+0x180>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	099b      	lsrs	r3, r3, #6
 800529a:	2200      	movs	r2, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	617a      	str	r2, [r7, #20]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052a6:	f04f 0b00 	mov.w	fp, #0
 80052aa:	4652      	mov	r2, sl
 80052ac:	465b      	mov	r3, fp
 80052ae:	f04f 0000 	mov.w	r0, #0
 80052b2:	f04f 0100 	mov.w	r1, #0
 80052b6:	0159      	lsls	r1, r3, #5
 80052b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052bc:	0150      	lsls	r0, r2, #5
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	ebb2 080a 	subs.w	r8, r2, sl
 80052c6:	eb63 090b 	sbc.w	r9, r3, fp
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052de:	ebb2 0408 	subs.w	r4, r2, r8
 80052e2:	eb63 0509 	sbc.w	r5, r3, r9
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	00eb      	lsls	r3, r5, #3
 80052f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f4:	00e2      	lsls	r2, r4, #3
 80052f6:	4614      	mov	r4, r2
 80052f8:	461d      	mov	r5, r3
 80052fa:	eb14 030a 	adds.w	r3, r4, sl
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	eb45 030b 	adc.w	r3, r5, fp
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005312:	4629      	mov	r1, r5
 8005314:	028b      	lsls	r3, r1, #10
 8005316:	4621      	mov	r1, r4
 8005318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800531c:	4621      	mov	r1, r4
 800531e:	028a      	lsls	r2, r1, #10
 8005320:	4610      	mov	r0, r2
 8005322:	4619      	mov	r1, r3
 8005324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005326:	2200      	movs	r2, #0
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	60fa      	str	r2, [r7, #12]
 800532c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005330:	f7fa ffa6 	bl	8000280 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4613      	mov	r3, r2
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_GetSysClockFreq+0x180>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	0c1b      	lsrs	r3, r3, #16
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	3301      	adds	r3, #1
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800534c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005356:	e002      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCC_GetSysClockFreq+0x184>)
 800535a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800535c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005360:	4618      	mov	r0, r3
 8005362:	3740      	adds	r7, #64	; 0x40
 8005364:	46bd      	mov	sp, r7
 8005366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536a:	bf00      	nop
 800536c:	40023800 	.word	0x40023800
 8005370:	00f42400 	.word	0x00f42400
 8005374:	017d7840 	.word	0x017d7840

08005378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800537c:	4b03      	ldr	r3, [pc, #12]	; (800538c <HAL_RCC_GetHCLKFreq+0x14>)
 800537e:	681b      	ldr	r3, [r3, #0]
}
 8005380:	4618      	mov	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000018 	.word	0x20000018

08005390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005394:	f7ff fff0 	bl	8005378 <HAL_RCC_GetHCLKFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	0a9b      	lsrs	r3, r3, #10
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	4903      	ldr	r1, [pc, #12]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40023800 	.word	0x40023800
 80053b4:	08006f10 	.word	0x08006f10

080053b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053bc:	f7ff ffdc 	bl	8005378 <HAL_RCC_GetHCLKFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	0b5b      	lsrs	r3, r3, #13
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4903      	ldr	r1, [pc, #12]	; (80053dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40023800 	.word	0x40023800
 80053dc:	08006f10 	.word	0x08006f10

080053e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e07b      	b.n	80054ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005402:	d009      	beq.n	8005418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	61da      	str	r2, [r3, #28]
 800540a:	e005      	b.n	8005418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fb fa2a 	bl	800088c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549c:	ea42 0103 	orr.w	r1, r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	f003 0104 	and.w	r1, r3, #4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	f003 0210 	and.w	r2, r3, #16
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e042      	b.n	800558a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fb f9ff 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2224      	movs	r2, #36	; 0x24
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005534:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f82c 	bl	8005594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800554a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800555a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800556a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005598:	b0c0      	sub	sp, #256	; 0x100
 800559a:	af00      	add	r7, sp, #0
 800559c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	68d9      	ldr	r1, [r3, #12]
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	ea40 0301 	orr.w	r3, r0, r1
 80055bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055ec:	f021 010c 	bic.w	r1, r1, #12
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055fa:	430b      	orrs	r3, r1
 80055fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560e:	6999      	ldr	r1, [r3, #24]
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	ea40 0301 	orr.w	r3, r0, r1
 800561a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b8f      	ldr	r3, [pc, #572]	; (8005860 <UART_SetConfig+0x2cc>)
 8005624:	429a      	cmp	r2, r3
 8005626:	d005      	beq.n	8005634 <UART_SetConfig+0xa0>
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	4b8d      	ldr	r3, [pc, #564]	; (8005864 <UART_SetConfig+0x2d0>)
 8005630:	429a      	cmp	r2, r3
 8005632:	d104      	bne.n	800563e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005634:	f7ff fec0 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8005638:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800563c:	e003      	b.n	8005646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800563e:	f7ff fea7 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 8005642:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005650:	f040 810c 	bne.w	800586c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800565e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005666:	4622      	mov	r2, r4
 8005668:	462b      	mov	r3, r5
 800566a:	1891      	adds	r1, r2, r2
 800566c:	65b9      	str	r1, [r7, #88]	; 0x58
 800566e:	415b      	adcs	r3, r3
 8005670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005676:	4621      	mov	r1, r4
 8005678:	eb12 0801 	adds.w	r8, r2, r1
 800567c:	4629      	mov	r1, r5
 800567e:	eb43 0901 	adc.w	r9, r3, r1
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800568e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005696:	4690      	mov	r8, r2
 8005698:	4699      	mov	r9, r3
 800569a:	4623      	mov	r3, r4
 800569c:	eb18 0303 	adds.w	r3, r8, r3
 80056a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056a4:	462b      	mov	r3, r5
 80056a6:	eb49 0303 	adc.w	r3, r9, r3
 80056aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056c2:	460b      	mov	r3, r1
 80056c4:	18db      	adds	r3, r3, r3
 80056c6:	653b      	str	r3, [r7, #80]	; 0x50
 80056c8:	4613      	mov	r3, r2
 80056ca:	eb42 0303 	adc.w	r3, r2, r3
 80056ce:	657b      	str	r3, [r7, #84]	; 0x54
 80056d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056d8:	f7fa fdd2 	bl	8000280 <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4b61      	ldr	r3, [pc, #388]	; (8005868 <UART_SetConfig+0x2d4>)
 80056e2:	fba3 2302 	umull	r2, r3, r3, r2
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	011c      	lsls	r4, r3, #4
 80056ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056fc:	4642      	mov	r2, r8
 80056fe:	464b      	mov	r3, r9
 8005700:	1891      	adds	r1, r2, r2
 8005702:	64b9      	str	r1, [r7, #72]	; 0x48
 8005704:	415b      	adcs	r3, r3
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800570c:	4641      	mov	r1, r8
 800570e:	eb12 0a01 	adds.w	sl, r2, r1
 8005712:	4649      	mov	r1, r9
 8005714:	eb43 0b01 	adc.w	fp, r3, r1
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800572c:	4692      	mov	sl, r2
 800572e:	469b      	mov	fp, r3
 8005730:	4643      	mov	r3, r8
 8005732:	eb1a 0303 	adds.w	r3, sl, r3
 8005736:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800573a:	464b      	mov	r3, r9
 800573c:	eb4b 0303 	adc.w	r3, fp, r3
 8005740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005750:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005758:	460b      	mov	r3, r1
 800575a:	18db      	adds	r3, r3, r3
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
 800575e:	4613      	mov	r3, r2
 8005760:	eb42 0303 	adc.w	r3, r2, r3
 8005764:	647b      	str	r3, [r7, #68]	; 0x44
 8005766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800576a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800576e:	f7fa fd87 	bl	8000280 <__aeabi_uldivmod>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4611      	mov	r1, r2
 8005778:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <UART_SetConfig+0x2d4>)
 800577a:	fba3 2301 	umull	r2, r3, r3, r1
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2264      	movs	r2, #100	; 0x64
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	1acb      	subs	r3, r1, r3
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800578e:	4b36      	ldr	r3, [pc, #216]	; (8005868 <UART_SetConfig+0x2d4>)
 8005790:	fba3 2302 	umull	r2, r3, r3, r2
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800579c:	441c      	add	r4, r3
 800579e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	1891      	adds	r1, r2, r2
 80057b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057b8:	415b      	adcs	r3, r3
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057c0:	4641      	mov	r1, r8
 80057c2:	1851      	adds	r1, r2, r1
 80057c4:	6339      	str	r1, [r7, #48]	; 0x30
 80057c6:	4649      	mov	r1, r9
 80057c8:	414b      	adcs	r3, r1
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057d8:	4659      	mov	r1, fp
 80057da:	00cb      	lsls	r3, r1, #3
 80057dc:	4651      	mov	r1, sl
 80057de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e2:	4651      	mov	r1, sl
 80057e4:	00ca      	lsls	r2, r1, #3
 80057e6:	4610      	mov	r0, r2
 80057e8:	4619      	mov	r1, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	4642      	mov	r2, r8
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057f4:	464b      	mov	r3, r9
 80057f6:	460a      	mov	r2, r1
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800580c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005814:	460b      	mov	r3, r1
 8005816:	18db      	adds	r3, r3, r3
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
 800581a:	4613      	mov	r3, r2
 800581c:	eb42 0303 	adc.w	r3, r2, r3
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800582a:	f7fa fd29 	bl	8000280 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <UART_SetConfig+0x2d4>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	4a08      	ldr	r2, [pc, #32]	; (8005868 <UART_SetConfig+0x2d4>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f003 0207 	and.w	r2, r3, #7
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4422      	add	r2, r4
 800585a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800585c:	e106      	b.n	8005a6c <UART_SetConfig+0x4d8>
 800585e:	bf00      	nop
 8005860:	40011000 	.word	0x40011000
 8005864:	40011400 	.word	0x40011400
 8005868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800586c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005870:	2200      	movs	r2, #0
 8005872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005876:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800587a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800587e:	4642      	mov	r2, r8
 8005880:	464b      	mov	r3, r9
 8005882:	1891      	adds	r1, r2, r2
 8005884:	6239      	str	r1, [r7, #32]
 8005886:	415b      	adcs	r3, r3
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800588e:	4641      	mov	r1, r8
 8005890:	1854      	adds	r4, r2, r1
 8005892:	4649      	mov	r1, r9
 8005894:	eb43 0501 	adc.w	r5, r3, r1
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	00eb      	lsls	r3, r5, #3
 80058a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058a6:	00e2      	lsls	r2, r4, #3
 80058a8:	4614      	mov	r4, r2
 80058aa:	461d      	mov	r5, r3
 80058ac:	4643      	mov	r3, r8
 80058ae:	18e3      	adds	r3, r4, r3
 80058b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058b4:	464b      	mov	r3, r9
 80058b6:	eb45 0303 	adc.w	r3, r5, r3
 80058ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058da:	4629      	mov	r1, r5
 80058dc:	008b      	lsls	r3, r1, #2
 80058de:	4621      	mov	r1, r4
 80058e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058e4:	4621      	mov	r1, r4
 80058e6:	008a      	lsls	r2, r1, #2
 80058e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058ec:	f7fa fcc8 	bl	8000280 <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4b60      	ldr	r3, [pc, #384]	; (8005a78 <UART_SetConfig+0x4e4>)
 80058f6:	fba3 2302 	umull	r2, r3, r3, r2
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	011c      	lsls	r4, r3, #4
 80058fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005902:	2200      	movs	r2, #0
 8005904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005908:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800590c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	1891      	adds	r1, r2, r2
 8005916:	61b9      	str	r1, [r7, #24]
 8005918:	415b      	adcs	r3, r3
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005920:	4641      	mov	r1, r8
 8005922:	1851      	adds	r1, r2, r1
 8005924:	6139      	str	r1, [r7, #16]
 8005926:	4649      	mov	r1, r9
 8005928:	414b      	adcs	r3, r1
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005938:	4659      	mov	r1, fp
 800593a:	00cb      	lsls	r3, r1, #3
 800593c:	4651      	mov	r1, sl
 800593e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005942:	4651      	mov	r1, sl
 8005944:	00ca      	lsls	r2, r1, #3
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	4603      	mov	r3, r0
 800594c:	4642      	mov	r2, r8
 800594e:	189b      	adds	r3, r3, r2
 8005950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005954:	464b      	mov	r3, r9
 8005956:	460a      	mov	r2, r1
 8005958:	eb42 0303 	adc.w	r3, r2, r3
 800595c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	67bb      	str	r3, [r7, #120]	; 0x78
 800596a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005978:	4649      	mov	r1, r9
 800597a:	008b      	lsls	r3, r1, #2
 800597c:	4641      	mov	r1, r8
 800597e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005982:	4641      	mov	r1, r8
 8005984:	008a      	lsls	r2, r1, #2
 8005986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800598a:	f7fa fc79 	bl	8000280 <__aeabi_uldivmod>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4611      	mov	r1, r2
 8005994:	4b38      	ldr	r3, [pc, #224]	; (8005a78 <UART_SetConfig+0x4e4>)
 8005996:	fba3 2301 	umull	r2, r3, r3, r1
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	2264      	movs	r2, #100	; 0x64
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	1acb      	subs	r3, r1, r3
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	3332      	adds	r3, #50	; 0x32
 80059a8:	4a33      	ldr	r2, [pc, #204]	; (8005a78 <UART_SetConfig+0x4e4>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b4:	441c      	add	r4, r3
 80059b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ba:	2200      	movs	r2, #0
 80059bc:	673b      	str	r3, [r7, #112]	; 0x70
 80059be:	677a      	str	r2, [r7, #116]	; 0x74
 80059c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059c4:	4642      	mov	r2, r8
 80059c6:	464b      	mov	r3, r9
 80059c8:	1891      	adds	r1, r2, r2
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	415b      	adcs	r3, r3
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059d4:	4641      	mov	r1, r8
 80059d6:	1851      	adds	r1, r2, r1
 80059d8:	6039      	str	r1, [r7, #0]
 80059da:	4649      	mov	r1, r9
 80059dc:	414b      	adcs	r3, r1
 80059de:	607b      	str	r3, [r7, #4]
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059ec:	4659      	mov	r1, fp
 80059ee:	00cb      	lsls	r3, r1, #3
 80059f0:	4651      	mov	r1, sl
 80059f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059f6:	4651      	mov	r1, sl
 80059f8:	00ca      	lsls	r2, r1, #3
 80059fa:	4610      	mov	r0, r2
 80059fc:	4619      	mov	r1, r3
 80059fe:	4603      	mov	r3, r0
 8005a00:	4642      	mov	r2, r8
 8005a02:	189b      	adds	r3, r3, r2
 8005a04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a06:	464b      	mov	r3, r9
 8005a08:	460a      	mov	r2, r1
 8005a0a:	eb42 0303 	adc.w	r3, r2, r3
 8005a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	663b      	str	r3, [r7, #96]	; 0x60
 8005a1a:	667a      	str	r2, [r7, #100]	; 0x64
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a28:	4649      	mov	r1, r9
 8005a2a:	008b      	lsls	r3, r1, #2
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a32:	4641      	mov	r1, r8
 8005a34:	008a      	lsls	r2, r1, #2
 8005a36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a3a:	f7fa fc21 	bl	8000280 <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <UART_SetConfig+0x4e4>)
 8005a44:	fba3 1302 	umull	r1, r3, r3, r2
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	2164      	movs	r1, #100	; 0x64
 8005a4c:	fb01 f303 	mul.w	r3, r1, r3
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	3332      	adds	r3, #50	; 0x32
 8005a56:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <UART_SetConfig+0x4e4>)
 8005a58:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	f003 020f 	and.w	r2, r3, #15
 8005a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4422      	add	r2, r4
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a72:	46bd      	mov	sp, r7
 8005a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a78:	51eb851f 	.word	0x51eb851f

08005a7c <std>:
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	b510      	push	{r4, lr}
 8005a80:	4604      	mov	r4, r0
 8005a82:	e9c0 3300 	strd	r3, r3, [r0]
 8005a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a8a:	6083      	str	r3, [r0, #8]
 8005a8c:	8181      	strh	r1, [r0, #12]
 8005a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005a90:	81c2      	strh	r2, [r0, #14]
 8005a92:	6183      	str	r3, [r0, #24]
 8005a94:	4619      	mov	r1, r3
 8005a96:	2208      	movs	r2, #8
 8005a98:	305c      	adds	r0, #92	; 0x5c
 8005a9a:	f000 faad 	bl	8005ff8 <memset>
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <std+0x58>)
 8005aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <std+0x5c>)
 8005aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <std+0x60>)
 8005aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <std+0x64>)
 8005aac:	6323      	str	r3, [r4, #48]	; 0x30
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <std+0x68>)
 8005ab0:	6224      	str	r4, [r4, #32]
 8005ab2:	429c      	cmp	r4, r3
 8005ab4:	d006      	beq.n	8005ac4 <std+0x48>
 8005ab6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005aba:	4294      	cmp	r4, r2
 8005abc:	d002      	beq.n	8005ac4 <std+0x48>
 8005abe:	33d0      	adds	r3, #208	; 0xd0
 8005ac0:	429c      	cmp	r4, r3
 8005ac2:	d105      	bne.n	8005ad0 <std+0x54>
 8005ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005acc:	f000 bb0c 	b.w	80060e8 <__retarget_lock_init_recursive>
 8005ad0:	bd10      	pop	{r4, pc}
 8005ad2:	bf00      	nop
 8005ad4:	08005e49 	.word	0x08005e49
 8005ad8:	08005e6b 	.word	0x08005e6b
 8005adc:	08005ea3 	.word	0x08005ea3
 8005ae0:	08005ec7 	.word	0x08005ec7
 8005ae4:	200001f4 	.word	0x200001f4

08005ae8 <stdio_exit_handler>:
 8005ae8:	4a02      	ldr	r2, [pc, #8]	; (8005af4 <stdio_exit_handler+0xc>)
 8005aea:	4903      	ldr	r1, [pc, #12]	; (8005af8 <stdio_exit_handler+0x10>)
 8005aec:	4803      	ldr	r0, [pc, #12]	; (8005afc <stdio_exit_handler+0x14>)
 8005aee:	f000 b869 	b.w	8005bc4 <_fwalk_sglue>
 8005af2:	bf00      	nop
 8005af4:	20000070 	.word	0x20000070
 8005af8:	080069a5 	.word	0x080069a5
 8005afc:	2000007c 	.word	0x2000007c

08005b00 <cleanup_stdio>:
 8005b00:	6841      	ldr	r1, [r0, #4]
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <cleanup_stdio+0x34>)
 8005b04:	4299      	cmp	r1, r3
 8005b06:	b510      	push	{r4, lr}
 8005b08:	4604      	mov	r4, r0
 8005b0a:	d001      	beq.n	8005b10 <cleanup_stdio+0x10>
 8005b0c:	f000 ff4a 	bl	80069a4 <_fflush_r>
 8005b10:	68a1      	ldr	r1, [r4, #8]
 8005b12:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <cleanup_stdio+0x38>)
 8005b14:	4299      	cmp	r1, r3
 8005b16:	d002      	beq.n	8005b1e <cleanup_stdio+0x1e>
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 ff43 	bl	80069a4 <_fflush_r>
 8005b1e:	68e1      	ldr	r1, [r4, #12]
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <cleanup_stdio+0x3c>)
 8005b22:	4299      	cmp	r1, r3
 8005b24:	d004      	beq.n	8005b30 <cleanup_stdio+0x30>
 8005b26:	4620      	mov	r0, r4
 8005b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b2c:	f000 bf3a 	b.w	80069a4 <_fflush_r>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	bf00      	nop
 8005b34:	200001f4 	.word	0x200001f4
 8005b38:	2000025c 	.word	0x2000025c
 8005b3c:	200002c4 	.word	0x200002c4

08005b40 <global_stdio_init.part.0>:
 8005b40:	b510      	push	{r4, lr}
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <global_stdio_init.part.0+0x30>)
 8005b44:	4c0b      	ldr	r4, [pc, #44]	; (8005b74 <global_stdio_init.part.0+0x34>)
 8005b46:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <global_stdio_init.part.0+0x38>)
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2104      	movs	r1, #4
 8005b50:	f7ff ff94 	bl	8005a7c <std>
 8005b54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b58:	2201      	movs	r2, #1
 8005b5a:	2109      	movs	r1, #9
 8005b5c:	f7ff ff8e 	bl	8005a7c <std>
 8005b60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b64:	2202      	movs	r2, #2
 8005b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6a:	2112      	movs	r1, #18
 8005b6c:	f7ff bf86 	b.w	8005a7c <std>
 8005b70:	2000032c 	.word	0x2000032c
 8005b74:	200001f4 	.word	0x200001f4
 8005b78:	08005ae9 	.word	0x08005ae9

08005b7c <__sfp_lock_acquire>:
 8005b7c:	4801      	ldr	r0, [pc, #4]	; (8005b84 <__sfp_lock_acquire+0x8>)
 8005b7e:	f000 bab4 	b.w	80060ea <__retarget_lock_acquire_recursive>
 8005b82:	bf00      	nop
 8005b84:	20000335 	.word	0x20000335

08005b88 <__sfp_lock_release>:
 8005b88:	4801      	ldr	r0, [pc, #4]	; (8005b90 <__sfp_lock_release+0x8>)
 8005b8a:	f000 baaf 	b.w	80060ec <__retarget_lock_release_recursive>
 8005b8e:	bf00      	nop
 8005b90:	20000335 	.word	0x20000335

08005b94 <__sinit>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4604      	mov	r4, r0
 8005b98:	f7ff fff0 	bl	8005b7c <__sfp_lock_acquire>
 8005b9c:	6a23      	ldr	r3, [r4, #32]
 8005b9e:	b11b      	cbz	r3, 8005ba8 <__sinit+0x14>
 8005ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba4:	f7ff bff0 	b.w	8005b88 <__sfp_lock_release>
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <__sinit+0x28>)
 8005baa:	6223      	str	r3, [r4, #32]
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <__sinit+0x2c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f5      	bne.n	8005ba0 <__sinit+0xc>
 8005bb4:	f7ff ffc4 	bl	8005b40 <global_stdio_init.part.0>
 8005bb8:	e7f2      	b.n	8005ba0 <__sinit+0xc>
 8005bba:	bf00      	nop
 8005bbc:	08005b01 	.word	0x08005b01
 8005bc0:	2000032c 	.word	0x2000032c

08005bc4 <_fwalk_sglue>:
 8005bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc8:	4607      	mov	r7, r0
 8005bca:	4688      	mov	r8, r1
 8005bcc:	4614      	mov	r4, r2
 8005bce:	2600      	movs	r6, #0
 8005bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8005bd8:	d505      	bpl.n	8005be6 <_fwalk_sglue+0x22>
 8005bda:	6824      	ldr	r4, [r4, #0]
 8005bdc:	2c00      	cmp	r4, #0
 8005bde:	d1f7      	bne.n	8005bd0 <_fwalk_sglue+0xc>
 8005be0:	4630      	mov	r0, r6
 8005be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be6:	89ab      	ldrh	r3, [r5, #12]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d907      	bls.n	8005bfc <_fwalk_sglue+0x38>
 8005bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	d003      	beq.n	8005bfc <_fwalk_sglue+0x38>
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	47c0      	blx	r8
 8005bfa:	4306      	orrs	r6, r0
 8005bfc:	3568      	adds	r5, #104	; 0x68
 8005bfe:	e7e9      	b.n	8005bd4 <_fwalk_sglue+0x10>

08005c00 <iprintf>:
 8005c00:	b40f      	push	{r0, r1, r2, r3}
 8005c02:	b507      	push	{r0, r1, r2, lr}
 8005c04:	4906      	ldr	r1, [pc, #24]	; (8005c20 <iprintf+0x20>)
 8005c06:	ab04      	add	r3, sp, #16
 8005c08:	6808      	ldr	r0, [r1, #0]
 8005c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c0e:	6881      	ldr	r1, [r0, #8]
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	f000 fb97 	bl	8006344 <_vfiprintf_r>
 8005c16:	b003      	add	sp, #12
 8005c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c1c:	b004      	add	sp, #16
 8005c1e:	4770      	bx	lr
 8005c20:	200000c8 	.word	0x200000c8

08005c24 <_puts_r>:
 8005c24:	6a03      	ldr	r3, [r0, #32]
 8005c26:	b570      	push	{r4, r5, r6, lr}
 8005c28:	6884      	ldr	r4, [r0, #8]
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	460e      	mov	r6, r1
 8005c2e:	b90b      	cbnz	r3, 8005c34 <_puts_r+0x10>
 8005c30:	f7ff ffb0 	bl	8005b94 <__sinit>
 8005c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c36:	07db      	lsls	r3, r3, #31
 8005c38:	d405      	bmi.n	8005c46 <_puts_r+0x22>
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	0598      	lsls	r0, r3, #22
 8005c3e:	d402      	bmi.n	8005c46 <_puts_r+0x22>
 8005c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c42:	f000 fa52 	bl	80060ea <__retarget_lock_acquire_recursive>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	0719      	lsls	r1, r3, #28
 8005c4a:	d513      	bpl.n	8005c74 <_puts_r+0x50>
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	b18b      	cbz	r3, 8005c74 <_puts_r+0x50>
 8005c50:	3e01      	subs	r6, #1
 8005c52:	68a3      	ldr	r3, [r4, #8]
 8005c54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	60a3      	str	r3, [r4, #8]
 8005c5c:	b9e9      	cbnz	r1, 8005c9a <_puts_r+0x76>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da2e      	bge.n	8005cc0 <_puts_r+0x9c>
 8005c62:	4622      	mov	r2, r4
 8005c64:	210a      	movs	r1, #10
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 f931 	bl	8005ece <__swbuf_r>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d007      	beq.n	8005c80 <_puts_r+0x5c>
 8005c70:	250a      	movs	r5, #10
 8005c72:	e007      	b.n	8005c84 <_puts_r+0x60>
 8005c74:	4621      	mov	r1, r4
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 f966 	bl	8005f48 <__swsetup_r>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d0e7      	beq.n	8005c50 <_puts_r+0x2c>
 8005c80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c86:	07da      	lsls	r2, r3, #31
 8005c88:	d405      	bmi.n	8005c96 <_puts_r+0x72>
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	059b      	lsls	r3, r3, #22
 8005c8e:	d402      	bmi.n	8005c96 <_puts_r+0x72>
 8005c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c92:	f000 fa2b 	bl	80060ec <__retarget_lock_release_recursive>
 8005c96:	4628      	mov	r0, r5
 8005c98:	bd70      	pop	{r4, r5, r6, pc}
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	da04      	bge.n	8005ca8 <_puts_r+0x84>
 8005c9e:	69a2      	ldr	r2, [r4, #24]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	dc06      	bgt.n	8005cb2 <_puts_r+0x8e>
 8005ca4:	290a      	cmp	r1, #10
 8005ca6:	d004      	beq.n	8005cb2 <_puts_r+0x8e>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	6022      	str	r2, [r4, #0]
 8005cae:	7019      	strb	r1, [r3, #0]
 8005cb0:	e7cf      	b.n	8005c52 <_puts_r+0x2e>
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f000 f90a 	bl	8005ece <__swbuf_r>
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d1c9      	bne.n	8005c52 <_puts_r+0x2e>
 8005cbe:	e7df      	b.n	8005c80 <_puts_r+0x5c>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	250a      	movs	r5, #10
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	6022      	str	r2, [r4, #0]
 8005cc8:	701d      	strb	r5, [r3, #0]
 8005cca:	e7db      	b.n	8005c84 <_puts_r+0x60>

08005ccc <puts>:
 8005ccc:	4b02      	ldr	r3, [pc, #8]	; (8005cd8 <puts+0xc>)
 8005cce:	4601      	mov	r1, r0
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	f7ff bfa7 	b.w	8005c24 <_puts_r>
 8005cd6:	bf00      	nop
 8005cd8:	200000c8 	.word	0x200000c8

08005cdc <setbuf>:
 8005cdc:	fab1 f281 	clz	r2, r1
 8005ce0:	0952      	lsrs	r2, r2, #5
 8005ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce6:	0052      	lsls	r2, r2, #1
 8005ce8:	f000 b800 	b.w	8005cec <setvbuf>

08005cec <setvbuf>:
 8005cec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cf0:	461d      	mov	r5, r3
 8005cf2:	4b54      	ldr	r3, [pc, #336]	; (8005e44 <setvbuf+0x158>)
 8005cf4:	681f      	ldr	r7, [r3, #0]
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	460e      	mov	r6, r1
 8005cfa:	4690      	mov	r8, r2
 8005cfc:	b127      	cbz	r7, 8005d08 <setvbuf+0x1c>
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	b913      	cbnz	r3, 8005d08 <setvbuf+0x1c>
 8005d02:	4638      	mov	r0, r7
 8005d04:	f7ff ff46 	bl	8005b94 <__sinit>
 8005d08:	f1b8 0f02 	cmp.w	r8, #2
 8005d0c:	d006      	beq.n	8005d1c <setvbuf+0x30>
 8005d0e:	f1b8 0f01 	cmp.w	r8, #1
 8005d12:	f200 8094 	bhi.w	8005e3e <setvbuf+0x152>
 8005d16:	2d00      	cmp	r5, #0
 8005d18:	f2c0 8091 	blt.w	8005e3e <setvbuf+0x152>
 8005d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d1e:	07da      	lsls	r2, r3, #31
 8005d20:	d405      	bmi.n	8005d2e <setvbuf+0x42>
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	059b      	lsls	r3, r3, #22
 8005d26:	d402      	bmi.n	8005d2e <setvbuf+0x42>
 8005d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d2a:	f000 f9de 	bl	80060ea <__retarget_lock_acquire_recursive>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4638      	mov	r0, r7
 8005d32:	f000 fe37 	bl	80069a4 <_fflush_r>
 8005d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d38:	b141      	cbz	r1, 8005d4c <setvbuf+0x60>
 8005d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	d002      	beq.n	8005d48 <setvbuf+0x5c>
 8005d42:	4638      	mov	r0, r7
 8005d44:	f000 f9d4 	bl	80060f0 <_free_r>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61a3      	str	r3, [r4, #24]
 8005d50:	6063      	str	r3, [r4, #4]
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	0618      	lsls	r0, r3, #24
 8005d56:	d503      	bpl.n	8005d60 <setvbuf+0x74>
 8005d58:	6921      	ldr	r1, [r4, #16]
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f000 f9c8 	bl	80060f0 <_free_r>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	f1b8 0f02 	cmp.w	r8, #2
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	d05f      	beq.n	8005e32 <setvbuf+0x146>
 8005d72:	ab01      	add	r3, sp, #4
 8005d74:	466a      	mov	r2, sp
 8005d76:	4621      	mov	r1, r4
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f000 fe3b 	bl	80069f4 <__swhatbuf_r>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	4318      	orrs	r0, r3
 8005d82:	81a0      	strh	r0, [r4, #12]
 8005d84:	bb2d      	cbnz	r5, 8005dd2 <setvbuf+0xe6>
 8005d86:	9d00      	ldr	r5, [sp, #0]
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f000 f9fd 	bl	8006188 <malloc>
 8005d8e:	4606      	mov	r6, r0
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d150      	bne.n	8005e36 <setvbuf+0x14a>
 8005d94:	f8dd 9000 	ldr.w	r9, [sp]
 8005d98:	45a9      	cmp	r9, r5
 8005d9a:	d13e      	bne.n	8005e1a <setvbuf+0x12e>
 8005d9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005da0:	2200      	movs	r2, #0
 8005da2:	60a2      	str	r2, [r4, #8]
 8005da4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005da8:	6022      	str	r2, [r4, #0]
 8005daa:	6122      	str	r2, [r4, #16]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db2:	6162      	str	r2, [r4, #20]
 8005db4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005db6:	f043 0302 	orr.w	r3, r3, #2
 8005dba:	07d1      	lsls	r1, r2, #31
 8005dbc:	81a3      	strh	r3, [r4, #12]
 8005dbe:	d404      	bmi.n	8005dca <setvbuf+0xde>
 8005dc0:	059b      	lsls	r3, r3, #22
 8005dc2:	d402      	bmi.n	8005dca <setvbuf+0xde>
 8005dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dc6:	f000 f991 	bl	80060ec <__retarget_lock_release_recursive>
 8005dca:	4628      	mov	r0, r5
 8005dcc:	b003      	add	sp, #12
 8005dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d0d8      	beq.n	8005d88 <setvbuf+0x9c>
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	b913      	cbnz	r3, 8005de0 <setvbuf+0xf4>
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f7ff feda 	bl	8005b94 <__sinit>
 8005de0:	f1b8 0f01 	cmp.w	r8, #1
 8005de4:	bf08      	it	eq
 8005de6:	89a3      	ldrheq	r3, [r4, #12]
 8005de8:	6026      	str	r6, [r4, #0]
 8005dea:	bf04      	itt	eq
 8005dec:	f043 0301 	orreq.w	r3, r3, #1
 8005df0:	81a3      	strheq	r3, [r4, #12]
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	f013 0208 	ands.w	r2, r3, #8
 8005df8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005dfc:	d01d      	beq.n	8005e3a <setvbuf+0x14e>
 8005dfe:	07da      	lsls	r2, r3, #31
 8005e00:	bf41      	itttt	mi
 8005e02:	2200      	movmi	r2, #0
 8005e04:	426d      	negmi	r5, r5
 8005e06:	60a2      	strmi	r2, [r4, #8]
 8005e08:	61a5      	strmi	r5, [r4, #24]
 8005e0a:	bf58      	it	pl
 8005e0c:	60a5      	strpl	r5, [r4, #8]
 8005e0e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005e10:	f015 0501 	ands.w	r5, r5, #1
 8005e14:	d0d4      	beq.n	8005dc0 <setvbuf+0xd4>
 8005e16:	2500      	movs	r5, #0
 8005e18:	e7d7      	b.n	8005dca <setvbuf+0xde>
 8005e1a:	4648      	mov	r0, r9
 8005e1c:	f000 f9b4 	bl	8006188 <malloc>
 8005e20:	4606      	mov	r6, r0
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d0ba      	beq.n	8005d9c <setvbuf+0xb0>
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	464d      	mov	r5, r9
 8005e30:	e7d1      	b.n	8005dd6 <setvbuf+0xea>
 8005e32:	2500      	movs	r5, #0
 8005e34:	e7b4      	b.n	8005da0 <setvbuf+0xb4>
 8005e36:	46a9      	mov	r9, r5
 8005e38:	e7f5      	b.n	8005e26 <setvbuf+0x13a>
 8005e3a:	60a2      	str	r2, [r4, #8]
 8005e3c:	e7e7      	b.n	8005e0e <setvbuf+0x122>
 8005e3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e42:	e7c2      	b.n	8005dca <setvbuf+0xde>
 8005e44:	200000c8 	.word	0x200000c8

08005e48 <__sread>:
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e50:	f000 f8fc 	bl	800604c <_read_r>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	bfab      	itete	ge
 8005e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e5c:	181b      	addge	r3, r3, r0
 8005e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e62:	bfac      	ite	ge
 8005e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e66:	81a3      	strhlt	r3, [r4, #12]
 8005e68:	bd10      	pop	{r4, pc}

08005e6a <__swrite>:
 8005e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6e:	461f      	mov	r7, r3
 8005e70:	898b      	ldrh	r3, [r1, #12]
 8005e72:	05db      	lsls	r3, r3, #23
 8005e74:	4605      	mov	r5, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	4616      	mov	r6, r2
 8005e7a:	d505      	bpl.n	8005e88 <__swrite+0x1e>
 8005e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e80:	2302      	movs	r3, #2
 8005e82:	2200      	movs	r2, #0
 8005e84:	f000 f8d0 	bl	8006028 <_lseek_r>
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e92:	81a3      	strh	r3, [r4, #12]
 8005e94:	4632      	mov	r2, r6
 8005e96:	463b      	mov	r3, r7
 8005e98:	4628      	mov	r0, r5
 8005e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9e:	f000 b8e7 	b.w	8006070 <_write_r>

08005ea2 <__sseek>:
 8005ea2:	b510      	push	{r4, lr}
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eaa:	f000 f8bd 	bl	8006028 <_lseek_r>
 8005eae:	1c43      	adds	r3, r0, #1
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	bf15      	itete	ne
 8005eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ebe:	81a3      	strheq	r3, [r4, #12]
 8005ec0:	bf18      	it	ne
 8005ec2:	81a3      	strhne	r3, [r4, #12]
 8005ec4:	bd10      	pop	{r4, pc}

08005ec6 <__sclose>:
 8005ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eca:	f000 b89d 	b.w	8006008 <_close_r>

08005ece <__swbuf_r>:
 8005ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed0:	460e      	mov	r6, r1
 8005ed2:	4614      	mov	r4, r2
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	b118      	cbz	r0, 8005ee0 <__swbuf_r+0x12>
 8005ed8:	6a03      	ldr	r3, [r0, #32]
 8005eda:	b90b      	cbnz	r3, 8005ee0 <__swbuf_r+0x12>
 8005edc:	f7ff fe5a 	bl	8005b94 <__sinit>
 8005ee0:	69a3      	ldr	r3, [r4, #24]
 8005ee2:	60a3      	str	r3, [r4, #8]
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	071a      	lsls	r2, r3, #28
 8005ee8:	d525      	bpl.n	8005f36 <__swbuf_r+0x68>
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	b31b      	cbz	r3, 8005f36 <__swbuf_r+0x68>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	1a98      	subs	r0, r3, r2
 8005ef4:	6963      	ldr	r3, [r4, #20]
 8005ef6:	b2f6      	uxtb	r6, r6
 8005ef8:	4283      	cmp	r3, r0
 8005efa:	4637      	mov	r7, r6
 8005efc:	dc04      	bgt.n	8005f08 <__swbuf_r+0x3a>
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 fd4f 	bl	80069a4 <_fflush_r>
 8005f06:	b9e0      	cbnz	r0, 8005f42 <__swbuf_r+0x74>
 8005f08:	68a3      	ldr	r3, [r4, #8]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	60a3      	str	r3, [r4, #8]
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	701e      	strb	r6, [r3, #0]
 8005f16:	6962      	ldr	r2, [r4, #20]
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d004      	beq.n	8005f28 <__swbuf_r+0x5a>
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	07db      	lsls	r3, r3, #31
 8005f22:	d506      	bpl.n	8005f32 <__swbuf_r+0x64>
 8005f24:	2e0a      	cmp	r6, #10
 8005f26:	d104      	bne.n	8005f32 <__swbuf_r+0x64>
 8005f28:	4621      	mov	r1, r4
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 fd3a 	bl	80069a4 <_fflush_r>
 8005f30:	b938      	cbnz	r0, 8005f42 <__swbuf_r+0x74>
 8005f32:	4638      	mov	r0, r7
 8005f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f36:	4621      	mov	r1, r4
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f000 f805 	bl	8005f48 <__swsetup_r>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d0d5      	beq.n	8005eee <__swbuf_r+0x20>
 8005f42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f46:	e7f4      	b.n	8005f32 <__swbuf_r+0x64>

08005f48 <__swsetup_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <__swsetup_r+0xac>)
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	460c      	mov	r4, r1
 8005f52:	b118      	cbz	r0, 8005f5c <__swsetup_r+0x14>
 8005f54:	6a03      	ldr	r3, [r0, #32]
 8005f56:	b90b      	cbnz	r3, 8005f5c <__swsetup_r+0x14>
 8005f58:	f7ff fe1c 	bl	8005b94 <__sinit>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f62:	0718      	lsls	r0, r3, #28
 8005f64:	d422      	bmi.n	8005fac <__swsetup_r+0x64>
 8005f66:	06d9      	lsls	r1, r3, #27
 8005f68:	d407      	bmi.n	8005f7a <__swsetup_r+0x32>
 8005f6a:	2309      	movs	r3, #9
 8005f6c:	602b      	str	r3, [r5, #0]
 8005f6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f72:	81a3      	strh	r3, [r4, #12]
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f78:	e034      	b.n	8005fe4 <__swsetup_r+0x9c>
 8005f7a:	0758      	lsls	r0, r3, #29
 8005f7c:	d512      	bpl.n	8005fa4 <__swsetup_r+0x5c>
 8005f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f80:	b141      	cbz	r1, 8005f94 <__swsetup_r+0x4c>
 8005f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f86:	4299      	cmp	r1, r3
 8005f88:	d002      	beq.n	8005f90 <__swsetup_r+0x48>
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 f8b0 	bl	80060f0 <_free_r>
 8005f90:	2300      	movs	r3, #0
 8005f92:	6363      	str	r3, [r4, #52]	; 0x34
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	6063      	str	r3, [r4, #4]
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f043 0308 	orr.w	r3, r3, #8
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	b94b      	cbnz	r3, 8005fc4 <__swsetup_r+0x7c>
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fba:	d003      	beq.n	8005fc4 <__swsetup_r+0x7c>
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f000 fd3e 	bl	8006a40 <__smakebuf_r>
 8005fc4:	89a0      	ldrh	r0, [r4, #12]
 8005fc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fca:	f010 0301 	ands.w	r3, r0, #1
 8005fce:	d00a      	beq.n	8005fe6 <__swsetup_r+0x9e>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60a3      	str	r3, [r4, #8]
 8005fd4:	6963      	ldr	r3, [r4, #20]
 8005fd6:	425b      	negs	r3, r3
 8005fd8:	61a3      	str	r3, [r4, #24]
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	b943      	cbnz	r3, 8005ff0 <__swsetup_r+0xa8>
 8005fde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fe2:	d1c4      	bne.n	8005f6e <__swsetup_r+0x26>
 8005fe4:	bd38      	pop	{r3, r4, r5, pc}
 8005fe6:	0781      	lsls	r1, r0, #30
 8005fe8:	bf58      	it	pl
 8005fea:	6963      	ldrpl	r3, [r4, #20]
 8005fec:	60a3      	str	r3, [r4, #8]
 8005fee:	e7f4      	b.n	8005fda <__swsetup_r+0x92>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	e7f7      	b.n	8005fe4 <__swsetup_r+0x9c>
 8005ff4:	200000c8 	.word	0x200000c8

08005ff8 <memset>:
 8005ff8:	4402      	add	r2, r0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d100      	bne.n	8006002 <memset+0xa>
 8006000:	4770      	bx	lr
 8006002:	f803 1b01 	strb.w	r1, [r3], #1
 8006006:	e7f9      	b.n	8005ffc <memset+0x4>

08006008 <_close_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d06      	ldr	r5, [pc, #24]	; (8006024 <_close_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fa fd3f 	bl	8000a96 <_close>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_close_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_close_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20000330 	.word	0x20000330

08006028 <_lseek_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d07      	ldr	r5, [pc, #28]	; (8006048 <_lseek_r+0x20>)
 800602c:	4604      	mov	r4, r0
 800602e:	4608      	mov	r0, r1
 8006030:	4611      	mov	r1, r2
 8006032:	2200      	movs	r2, #0
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fa fd54 	bl	8000ae4 <_lseek>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_lseek_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_lseek_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20000330 	.word	0x20000330

0800604c <_read_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	; (800606c <_read_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fa fce2 	bl	8000a24 <_read>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_read_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_read_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	20000330 	.word	0x20000330

08006070 <_write_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d07      	ldr	r5, [pc, #28]	; (8006090 <_write_r+0x20>)
 8006074:	4604      	mov	r4, r0
 8006076:	4608      	mov	r0, r1
 8006078:	4611      	mov	r1, r2
 800607a:	2200      	movs	r2, #0
 800607c:	602a      	str	r2, [r5, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f7fa fced 	bl	8000a5e <_write>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_write_r+0x1e>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_write_r+0x1e>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	20000330 	.word	0x20000330

08006094 <__errno>:
 8006094:	4b01      	ldr	r3, [pc, #4]	; (800609c <__errno+0x8>)
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	200000c8 	.word	0x200000c8

080060a0 <__libc_init_array>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	4d0d      	ldr	r5, [pc, #52]	; (80060d8 <__libc_init_array+0x38>)
 80060a4:	4c0d      	ldr	r4, [pc, #52]	; (80060dc <__libc_init_array+0x3c>)
 80060a6:	1b64      	subs	r4, r4, r5
 80060a8:	10a4      	asrs	r4, r4, #2
 80060aa:	2600      	movs	r6, #0
 80060ac:	42a6      	cmp	r6, r4
 80060ae:	d109      	bne.n	80060c4 <__libc_init_array+0x24>
 80060b0:	4d0b      	ldr	r5, [pc, #44]	; (80060e0 <__libc_init_array+0x40>)
 80060b2:	4c0c      	ldr	r4, [pc, #48]	; (80060e4 <__libc_init_array+0x44>)
 80060b4:	f000 fd32 	bl	8006b1c <_init>
 80060b8:	1b64      	subs	r4, r4, r5
 80060ba:	10a4      	asrs	r4, r4, #2
 80060bc:	2600      	movs	r6, #0
 80060be:	42a6      	cmp	r6, r4
 80060c0:	d105      	bne.n	80060ce <__libc_init_array+0x2e>
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c8:	4798      	blx	r3
 80060ca:	3601      	adds	r6, #1
 80060cc:	e7ee      	b.n	80060ac <__libc_init_array+0xc>
 80060ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d2:	4798      	blx	r3
 80060d4:	3601      	adds	r6, #1
 80060d6:	e7f2      	b.n	80060be <__libc_init_array+0x1e>
 80060d8:	08006f54 	.word	0x08006f54
 80060dc:	08006f54 	.word	0x08006f54
 80060e0:	08006f54 	.word	0x08006f54
 80060e4:	08006f58 	.word	0x08006f58

080060e8 <__retarget_lock_init_recursive>:
 80060e8:	4770      	bx	lr

080060ea <__retarget_lock_acquire_recursive>:
 80060ea:	4770      	bx	lr

080060ec <__retarget_lock_release_recursive>:
 80060ec:	4770      	bx	lr
	...

080060f0 <_free_r>:
 80060f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060f2:	2900      	cmp	r1, #0
 80060f4:	d044      	beq.n	8006180 <_free_r+0x90>
 80060f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fa:	9001      	str	r0, [sp, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006102:	bfb8      	it	lt
 8006104:	18e4      	addlt	r4, r4, r3
 8006106:	f000 f8e7 	bl	80062d8 <__malloc_lock>
 800610a:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <_free_r+0x94>)
 800610c:	9801      	ldr	r0, [sp, #4]
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	b933      	cbnz	r3, 8006120 <_free_r+0x30>
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	6014      	str	r4, [r2, #0]
 8006116:	b003      	add	sp, #12
 8006118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800611c:	f000 b8e2 	b.w	80062e4 <__malloc_unlock>
 8006120:	42a3      	cmp	r3, r4
 8006122:	d908      	bls.n	8006136 <_free_r+0x46>
 8006124:	6825      	ldr	r5, [r4, #0]
 8006126:	1961      	adds	r1, r4, r5
 8006128:	428b      	cmp	r3, r1
 800612a:	bf01      	itttt	eq
 800612c:	6819      	ldreq	r1, [r3, #0]
 800612e:	685b      	ldreq	r3, [r3, #4]
 8006130:	1949      	addeq	r1, r1, r5
 8006132:	6021      	streq	r1, [r4, #0]
 8006134:	e7ed      	b.n	8006112 <_free_r+0x22>
 8006136:	461a      	mov	r2, r3
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	b10b      	cbz	r3, 8006140 <_free_r+0x50>
 800613c:	42a3      	cmp	r3, r4
 800613e:	d9fa      	bls.n	8006136 <_free_r+0x46>
 8006140:	6811      	ldr	r1, [r2, #0]
 8006142:	1855      	adds	r5, r2, r1
 8006144:	42a5      	cmp	r5, r4
 8006146:	d10b      	bne.n	8006160 <_free_r+0x70>
 8006148:	6824      	ldr	r4, [r4, #0]
 800614a:	4421      	add	r1, r4
 800614c:	1854      	adds	r4, r2, r1
 800614e:	42a3      	cmp	r3, r4
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	d1e0      	bne.n	8006116 <_free_r+0x26>
 8006154:	681c      	ldr	r4, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	6053      	str	r3, [r2, #4]
 800615a:	440c      	add	r4, r1
 800615c:	6014      	str	r4, [r2, #0]
 800615e:	e7da      	b.n	8006116 <_free_r+0x26>
 8006160:	d902      	bls.n	8006168 <_free_r+0x78>
 8006162:	230c      	movs	r3, #12
 8006164:	6003      	str	r3, [r0, #0]
 8006166:	e7d6      	b.n	8006116 <_free_r+0x26>
 8006168:	6825      	ldr	r5, [r4, #0]
 800616a:	1961      	adds	r1, r4, r5
 800616c:	428b      	cmp	r3, r1
 800616e:	bf04      	itt	eq
 8006170:	6819      	ldreq	r1, [r3, #0]
 8006172:	685b      	ldreq	r3, [r3, #4]
 8006174:	6063      	str	r3, [r4, #4]
 8006176:	bf04      	itt	eq
 8006178:	1949      	addeq	r1, r1, r5
 800617a:	6021      	streq	r1, [r4, #0]
 800617c:	6054      	str	r4, [r2, #4]
 800617e:	e7ca      	b.n	8006116 <_free_r+0x26>
 8006180:	b003      	add	sp, #12
 8006182:	bd30      	pop	{r4, r5, pc}
 8006184:	20000338 	.word	0x20000338

08006188 <malloc>:
 8006188:	4b02      	ldr	r3, [pc, #8]	; (8006194 <malloc+0xc>)
 800618a:	4601      	mov	r1, r0
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	f000 b823 	b.w	80061d8 <_malloc_r>
 8006192:	bf00      	nop
 8006194:	200000c8 	.word	0x200000c8

08006198 <sbrk_aligned>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	4e0e      	ldr	r6, [pc, #56]	; (80061d4 <sbrk_aligned+0x3c>)
 800619c:	460c      	mov	r4, r1
 800619e:	6831      	ldr	r1, [r6, #0]
 80061a0:	4605      	mov	r5, r0
 80061a2:	b911      	cbnz	r1, 80061aa <sbrk_aligned+0x12>
 80061a4:	f000 fcaa 	bl	8006afc <_sbrk_r>
 80061a8:	6030      	str	r0, [r6, #0]
 80061aa:	4621      	mov	r1, r4
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 fca5 	bl	8006afc <_sbrk_r>
 80061b2:	1c43      	adds	r3, r0, #1
 80061b4:	d00a      	beq.n	80061cc <sbrk_aligned+0x34>
 80061b6:	1cc4      	adds	r4, r0, #3
 80061b8:	f024 0403 	bic.w	r4, r4, #3
 80061bc:	42a0      	cmp	r0, r4
 80061be:	d007      	beq.n	80061d0 <sbrk_aligned+0x38>
 80061c0:	1a21      	subs	r1, r4, r0
 80061c2:	4628      	mov	r0, r5
 80061c4:	f000 fc9a 	bl	8006afc <_sbrk_r>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d101      	bne.n	80061d0 <sbrk_aligned+0x38>
 80061cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80061d0:	4620      	mov	r0, r4
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	2000033c 	.word	0x2000033c

080061d8 <_malloc_r>:
 80061d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061dc:	1ccd      	adds	r5, r1, #3
 80061de:	f025 0503 	bic.w	r5, r5, #3
 80061e2:	3508      	adds	r5, #8
 80061e4:	2d0c      	cmp	r5, #12
 80061e6:	bf38      	it	cc
 80061e8:	250c      	movcc	r5, #12
 80061ea:	2d00      	cmp	r5, #0
 80061ec:	4607      	mov	r7, r0
 80061ee:	db01      	blt.n	80061f4 <_malloc_r+0x1c>
 80061f0:	42a9      	cmp	r1, r5
 80061f2:	d905      	bls.n	8006200 <_malloc_r+0x28>
 80061f4:	230c      	movs	r3, #12
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	2600      	movs	r6, #0
 80061fa:	4630      	mov	r0, r6
 80061fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006200:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062d4 <_malloc_r+0xfc>
 8006204:	f000 f868 	bl	80062d8 <__malloc_lock>
 8006208:	f8d8 3000 	ldr.w	r3, [r8]
 800620c:	461c      	mov	r4, r3
 800620e:	bb5c      	cbnz	r4, 8006268 <_malloc_r+0x90>
 8006210:	4629      	mov	r1, r5
 8006212:	4638      	mov	r0, r7
 8006214:	f7ff ffc0 	bl	8006198 <sbrk_aligned>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	4604      	mov	r4, r0
 800621c:	d155      	bne.n	80062ca <_malloc_r+0xf2>
 800621e:	f8d8 4000 	ldr.w	r4, [r8]
 8006222:	4626      	mov	r6, r4
 8006224:	2e00      	cmp	r6, #0
 8006226:	d145      	bne.n	80062b4 <_malloc_r+0xdc>
 8006228:	2c00      	cmp	r4, #0
 800622a:	d048      	beq.n	80062be <_malloc_r+0xe6>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	4631      	mov	r1, r6
 8006230:	4638      	mov	r0, r7
 8006232:	eb04 0903 	add.w	r9, r4, r3
 8006236:	f000 fc61 	bl	8006afc <_sbrk_r>
 800623a:	4581      	cmp	r9, r0
 800623c:	d13f      	bne.n	80062be <_malloc_r+0xe6>
 800623e:	6821      	ldr	r1, [r4, #0]
 8006240:	1a6d      	subs	r5, r5, r1
 8006242:	4629      	mov	r1, r5
 8006244:	4638      	mov	r0, r7
 8006246:	f7ff ffa7 	bl	8006198 <sbrk_aligned>
 800624a:	3001      	adds	r0, #1
 800624c:	d037      	beq.n	80062be <_malloc_r+0xe6>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	442b      	add	r3, r5
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	f8d8 3000 	ldr.w	r3, [r8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d038      	beq.n	80062ce <_malloc_r+0xf6>
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	42a2      	cmp	r2, r4
 8006260:	d12b      	bne.n	80062ba <_malloc_r+0xe2>
 8006262:	2200      	movs	r2, #0
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	e00f      	b.n	8006288 <_malloc_r+0xb0>
 8006268:	6822      	ldr	r2, [r4, #0]
 800626a:	1b52      	subs	r2, r2, r5
 800626c:	d41f      	bmi.n	80062ae <_malloc_r+0xd6>
 800626e:	2a0b      	cmp	r2, #11
 8006270:	d917      	bls.n	80062a2 <_malloc_r+0xca>
 8006272:	1961      	adds	r1, r4, r5
 8006274:	42a3      	cmp	r3, r4
 8006276:	6025      	str	r5, [r4, #0]
 8006278:	bf18      	it	ne
 800627a:	6059      	strne	r1, [r3, #4]
 800627c:	6863      	ldr	r3, [r4, #4]
 800627e:	bf08      	it	eq
 8006280:	f8c8 1000 	streq.w	r1, [r8]
 8006284:	5162      	str	r2, [r4, r5]
 8006286:	604b      	str	r3, [r1, #4]
 8006288:	4638      	mov	r0, r7
 800628a:	f104 060b 	add.w	r6, r4, #11
 800628e:	f000 f829 	bl	80062e4 <__malloc_unlock>
 8006292:	f026 0607 	bic.w	r6, r6, #7
 8006296:	1d23      	adds	r3, r4, #4
 8006298:	1af2      	subs	r2, r6, r3
 800629a:	d0ae      	beq.n	80061fa <_malloc_r+0x22>
 800629c:	1b9b      	subs	r3, r3, r6
 800629e:	50a3      	str	r3, [r4, r2]
 80062a0:	e7ab      	b.n	80061fa <_malloc_r+0x22>
 80062a2:	42a3      	cmp	r3, r4
 80062a4:	6862      	ldr	r2, [r4, #4]
 80062a6:	d1dd      	bne.n	8006264 <_malloc_r+0x8c>
 80062a8:	f8c8 2000 	str.w	r2, [r8]
 80062ac:	e7ec      	b.n	8006288 <_malloc_r+0xb0>
 80062ae:	4623      	mov	r3, r4
 80062b0:	6864      	ldr	r4, [r4, #4]
 80062b2:	e7ac      	b.n	800620e <_malloc_r+0x36>
 80062b4:	4634      	mov	r4, r6
 80062b6:	6876      	ldr	r6, [r6, #4]
 80062b8:	e7b4      	b.n	8006224 <_malloc_r+0x4c>
 80062ba:	4613      	mov	r3, r2
 80062bc:	e7cc      	b.n	8006258 <_malloc_r+0x80>
 80062be:	230c      	movs	r3, #12
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4638      	mov	r0, r7
 80062c4:	f000 f80e 	bl	80062e4 <__malloc_unlock>
 80062c8:	e797      	b.n	80061fa <_malloc_r+0x22>
 80062ca:	6025      	str	r5, [r4, #0]
 80062cc:	e7dc      	b.n	8006288 <_malloc_r+0xb0>
 80062ce:	605b      	str	r3, [r3, #4]
 80062d0:	deff      	udf	#255	; 0xff
 80062d2:	bf00      	nop
 80062d4:	20000338 	.word	0x20000338

080062d8 <__malloc_lock>:
 80062d8:	4801      	ldr	r0, [pc, #4]	; (80062e0 <__malloc_lock+0x8>)
 80062da:	f7ff bf06 	b.w	80060ea <__retarget_lock_acquire_recursive>
 80062de:	bf00      	nop
 80062e0:	20000334 	.word	0x20000334

080062e4 <__malloc_unlock>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__malloc_unlock+0x8>)
 80062e6:	f7ff bf01 	b.w	80060ec <__retarget_lock_release_recursive>
 80062ea:	bf00      	nop
 80062ec:	20000334 	.word	0x20000334

080062f0 <__sfputc_r>:
 80062f0:	6893      	ldr	r3, [r2, #8]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	b410      	push	{r4}
 80062f8:	6093      	str	r3, [r2, #8]
 80062fa:	da08      	bge.n	800630e <__sfputc_r+0x1e>
 80062fc:	6994      	ldr	r4, [r2, #24]
 80062fe:	42a3      	cmp	r3, r4
 8006300:	db01      	blt.n	8006306 <__sfputc_r+0x16>
 8006302:	290a      	cmp	r1, #10
 8006304:	d103      	bne.n	800630e <__sfputc_r+0x1e>
 8006306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800630a:	f7ff bde0 	b.w	8005ece <__swbuf_r>
 800630e:	6813      	ldr	r3, [r2, #0]
 8006310:	1c58      	adds	r0, r3, #1
 8006312:	6010      	str	r0, [r2, #0]
 8006314:	7019      	strb	r1, [r3, #0]
 8006316:	4608      	mov	r0, r1
 8006318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800631c:	4770      	bx	lr

0800631e <__sfputs_r>:
 800631e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006320:	4606      	mov	r6, r0
 8006322:	460f      	mov	r7, r1
 8006324:	4614      	mov	r4, r2
 8006326:	18d5      	adds	r5, r2, r3
 8006328:	42ac      	cmp	r4, r5
 800632a:	d101      	bne.n	8006330 <__sfputs_r+0x12>
 800632c:	2000      	movs	r0, #0
 800632e:	e007      	b.n	8006340 <__sfputs_r+0x22>
 8006330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006334:	463a      	mov	r2, r7
 8006336:	4630      	mov	r0, r6
 8006338:	f7ff ffda 	bl	80062f0 <__sfputc_r>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d1f3      	bne.n	8006328 <__sfputs_r+0xa>
 8006340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006344 <_vfiprintf_r>:
 8006344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006348:	460d      	mov	r5, r1
 800634a:	b09d      	sub	sp, #116	; 0x74
 800634c:	4614      	mov	r4, r2
 800634e:	4698      	mov	r8, r3
 8006350:	4606      	mov	r6, r0
 8006352:	b118      	cbz	r0, 800635c <_vfiprintf_r+0x18>
 8006354:	6a03      	ldr	r3, [r0, #32]
 8006356:	b90b      	cbnz	r3, 800635c <_vfiprintf_r+0x18>
 8006358:	f7ff fc1c 	bl	8005b94 <__sinit>
 800635c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800635e:	07d9      	lsls	r1, r3, #31
 8006360:	d405      	bmi.n	800636e <_vfiprintf_r+0x2a>
 8006362:	89ab      	ldrh	r3, [r5, #12]
 8006364:	059a      	lsls	r2, r3, #22
 8006366:	d402      	bmi.n	800636e <_vfiprintf_r+0x2a>
 8006368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800636a:	f7ff febe 	bl	80060ea <__retarget_lock_acquire_recursive>
 800636e:	89ab      	ldrh	r3, [r5, #12]
 8006370:	071b      	lsls	r3, r3, #28
 8006372:	d501      	bpl.n	8006378 <_vfiprintf_r+0x34>
 8006374:	692b      	ldr	r3, [r5, #16]
 8006376:	b99b      	cbnz	r3, 80063a0 <_vfiprintf_r+0x5c>
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff fde4 	bl	8005f48 <__swsetup_r>
 8006380:	b170      	cbz	r0, 80063a0 <_vfiprintf_r+0x5c>
 8006382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006384:	07dc      	lsls	r4, r3, #31
 8006386:	d504      	bpl.n	8006392 <_vfiprintf_r+0x4e>
 8006388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800638c:	b01d      	add	sp, #116	; 0x74
 800638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	0598      	lsls	r0, r3, #22
 8006396:	d4f7      	bmi.n	8006388 <_vfiprintf_r+0x44>
 8006398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639a:	f7ff fea7 	bl	80060ec <__retarget_lock_release_recursive>
 800639e:	e7f3      	b.n	8006388 <_vfiprintf_r+0x44>
 80063a0:	2300      	movs	r3, #0
 80063a2:	9309      	str	r3, [sp, #36]	; 0x24
 80063a4:	2320      	movs	r3, #32
 80063a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80063ae:	2330      	movs	r3, #48	; 0x30
 80063b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006564 <_vfiprintf_r+0x220>
 80063b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063b8:	f04f 0901 	mov.w	r9, #1
 80063bc:	4623      	mov	r3, r4
 80063be:	469a      	mov	sl, r3
 80063c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c4:	b10a      	cbz	r2, 80063ca <_vfiprintf_r+0x86>
 80063c6:	2a25      	cmp	r2, #37	; 0x25
 80063c8:	d1f9      	bne.n	80063be <_vfiprintf_r+0x7a>
 80063ca:	ebba 0b04 	subs.w	fp, sl, r4
 80063ce:	d00b      	beq.n	80063e8 <_vfiprintf_r+0xa4>
 80063d0:	465b      	mov	r3, fp
 80063d2:	4622      	mov	r2, r4
 80063d4:	4629      	mov	r1, r5
 80063d6:	4630      	mov	r0, r6
 80063d8:	f7ff ffa1 	bl	800631e <__sfputs_r>
 80063dc:	3001      	adds	r0, #1
 80063de:	f000 80a9 	beq.w	8006534 <_vfiprintf_r+0x1f0>
 80063e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063e4:	445a      	add	r2, fp
 80063e6:	9209      	str	r2, [sp, #36]	; 0x24
 80063e8:	f89a 3000 	ldrb.w	r3, [sl]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80a1 	beq.w	8006534 <_vfiprintf_r+0x1f0>
 80063f2:	2300      	movs	r3, #0
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063fc:	f10a 0a01 	add.w	sl, sl, #1
 8006400:	9304      	str	r3, [sp, #16]
 8006402:	9307      	str	r3, [sp, #28]
 8006404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006408:	931a      	str	r3, [sp, #104]	; 0x68
 800640a:	4654      	mov	r4, sl
 800640c:	2205      	movs	r2, #5
 800640e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006412:	4854      	ldr	r0, [pc, #336]	; (8006564 <_vfiprintf_r+0x220>)
 8006414:	f7f9 fee4 	bl	80001e0 <memchr>
 8006418:	9a04      	ldr	r2, [sp, #16]
 800641a:	b9d8      	cbnz	r0, 8006454 <_vfiprintf_r+0x110>
 800641c:	06d1      	lsls	r1, r2, #27
 800641e:	bf44      	itt	mi
 8006420:	2320      	movmi	r3, #32
 8006422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006426:	0713      	lsls	r3, r2, #28
 8006428:	bf44      	itt	mi
 800642a:	232b      	movmi	r3, #43	; 0x2b
 800642c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006430:	f89a 3000 	ldrb.w	r3, [sl]
 8006434:	2b2a      	cmp	r3, #42	; 0x2a
 8006436:	d015      	beq.n	8006464 <_vfiprintf_r+0x120>
 8006438:	9a07      	ldr	r2, [sp, #28]
 800643a:	4654      	mov	r4, sl
 800643c:	2000      	movs	r0, #0
 800643e:	f04f 0c0a 	mov.w	ip, #10
 8006442:	4621      	mov	r1, r4
 8006444:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006448:	3b30      	subs	r3, #48	; 0x30
 800644a:	2b09      	cmp	r3, #9
 800644c:	d94d      	bls.n	80064ea <_vfiprintf_r+0x1a6>
 800644e:	b1b0      	cbz	r0, 800647e <_vfiprintf_r+0x13a>
 8006450:	9207      	str	r2, [sp, #28]
 8006452:	e014      	b.n	800647e <_vfiprintf_r+0x13a>
 8006454:	eba0 0308 	sub.w	r3, r0, r8
 8006458:	fa09 f303 	lsl.w	r3, r9, r3
 800645c:	4313      	orrs	r3, r2
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	46a2      	mov	sl, r4
 8006462:	e7d2      	b.n	800640a <_vfiprintf_r+0xc6>
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	1d19      	adds	r1, r3, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	9103      	str	r1, [sp, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	bfbb      	ittet	lt
 8006470:	425b      	neglt	r3, r3
 8006472:	f042 0202 	orrlt.w	r2, r2, #2
 8006476:	9307      	strge	r3, [sp, #28]
 8006478:	9307      	strlt	r3, [sp, #28]
 800647a:	bfb8      	it	lt
 800647c:	9204      	strlt	r2, [sp, #16]
 800647e:	7823      	ldrb	r3, [r4, #0]
 8006480:	2b2e      	cmp	r3, #46	; 0x2e
 8006482:	d10c      	bne.n	800649e <_vfiprintf_r+0x15a>
 8006484:	7863      	ldrb	r3, [r4, #1]
 8006486:	2b2a      	cmp	r3, #42	; 0x2a
 8006488:	d134      	bne.n	80064f4 <_vfiprintf_r+0x1b0>
 800648a:	9b03      	ldr	r3, [sp, #12]
 800648c:	1d1a      	adds	r2, r3, #4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	9203      	str	r2, [sp, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	bfb8      	it	lt
 8006496:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800649a:	3402      	adds	r4, #2
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006574 <_vfiprintf_r+0x230>
 80064a2:	7821      	ldrb	r1, [r4, #0]
 80064a4:	2203      	movs	r2, #3
 80064a6:	4650      	mov	r0, sl
 80064a8:	f7f9 fe9a 	bl	80001e0 <memchr>
 80064ac:	b138      	cbz	r0, 80064be <_vfiprintf_r+0x17a>
 80064ae:	9b04      	ldr	r3, [sp, #16]
 80064b0:	eba0 000a 	sub.w	r0, r0, sl
 80064b4:	2240      	movs	r2, #64	; 0x40
 80064b6:	4082      	lsls	r2, r0
 80064b8:	4313      	orrs	r3, r2
 80064ba:	3401      	adds	r4, #1
 80064bc:	9304      	str	r3, [sp, #16]
 80064be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c2:	4829      	ldr	r0, [pc, #164]	; (8006568 <_vfiprintf_r+0x224>)
 80064c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064c8:	2206      	movs	r2, #6
 80064ca:	f7f9 fe89 	bl	80001e0 <memchr>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d03f      	beq.n	8006552 <_vfiprintf_r+0x20e>
 80064d2:	4b26      	ldr	r3, [pc, #152]	; (800656c <_vfiprintf_r+0x228>)
 80064d4:	bb1b      	cbnz	r3, 800651e <_vfiprintf_r+0x1da>
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	3307      	adds	r3, #7
 80064da:	f023 0307 	bic.w	r3, r3, #7
 80064de:	3308      	adds	r3, #8
 80064e0:	9303      	str	r3, [sp, #12]
 80064e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e4:	443b      	add	r3, r7
 80064e6:	9309      	str	r3, [sp, #36]	; 0x24
 80064e8:	e768      	b.n	80063bc <_vfiprintf_r+0x78>
 80064ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ee:	460c      	mov	r4, r1
 80064f0:	2001      	movs	r0, #1
 80064f2:	e7a6      	b.n	8006442 <_vfiprintf_r+0xfe>
 80064f4:	2300      	movs	r3, #0
 80064f6:	3401      	adds	r4, #1
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	4619      	mov	r1, r3
 80064fc:	f04f 0c0a 	mov.w	ip, #10
 8006500:	4620      	mov	r0, r4
 8006502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006506:	3a30      	subs	r2, #48	; 0x30
 8006508:	2a09      	cmp	r2, #9
 800650a:	d903      	bls.n	8006514 <_vfiprintf_r+0x1d0>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0c6      	beq.n	800649e <_vfiprintf_r+0x15a>
 8006510:	9105      	str	r1, [sp, #20]
 8006512:	e7c4      	b.n	800649e <_vfiprintf_r+0x15a>
 8006514:	fb0c 2101 	mla	r1, ip, r1, r2
 8006518:	4604      	mov	r4, r0
 800651a:	2301      	movs	r3, #1
 800651c:	e7f0      	b.n	8006500 <_vfiprintf_r+0x1bc>
 800651e:	ab03      	add	r3, sp, #12
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	462a      	mov	r2, r5
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <_vfiprintf_r+0x22c>)
 8006526:	a904      	add	r1, sp, #16
 8006528:	4630      	mov	r0, r6
 800652a:	f3af 8000 	nop.w
 800652e:	4607      	mov	r7, r0
 8006530:	1c78      	adds	r0, r7, #1
 8006532:	d1d6      	bne.n	80064e2 <_vfiprintf_r+0x19e>
 8006534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	d405      	bmi.n	8006546 <_vfiprintf_r+0x202>
 800653a:	89ab      	ldrh	r3, [r5, #12]
 800653c:	059a      	lsls	r2, r3, #22
 800653e:	d402      	bmi.n	8006546 <_vfiprintf_r+0x202>
 8006540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006542:	f7ff fdd3 	bl	80060ec <__retarget_lock_release_recursive>
 8006546:	89ab      	ldrh	r3, [r5, #12]
 8006548:	065b      	lsls	r3, r3, #25
 800654a:	f53f af1d 	bmi.w	8006388 <_vfiprintf_r+0x44>
 800654e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006550:	e71c      	b.n	800638c <_vfiprintf_r+0x48>
 8006552:	ab03      	add	r3, sp, #12
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	462a      	mov	r2, r5
 8006558:	4b05      	ldr	r3, [pc, #20]	; (8006570 <_vfiprintf_r+0x22c>)
 800655a:	a904      	add	r1, sp, #16
 800655c:	4630      	mov	r0, r6
 800655e:	f000 f879 	bl	8006654 <_printf_i>
 8006562:	e7e4      	b.n	800652e <_vfiprintf_r+0x1ea>
 8006564:	08006f18 	.word	0x08006f18
 8006568:	08006f22 	.word	0x08006f22
 800656c:	00000000 	.word	0x00000000
 8006570:	0800631f 	.word	0x0800631f
 8006574:	08006f1e 	.word	0x08006f1e

08006578 <_printf_common>:
 8006578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800657c:	4616      	mov	r6, r2
 800657e:	4699      	mov	r9, r3
 8006580:	688a      	ldr	r2, [r1, #8]
 8006582:	690b      	ldr	r3, [r1, #16]
 8006584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006588:	4293      	cmp	r3, r2
 800658a:	bfb8      	it	lt
 800658c:	4613      	movlt	r3, r2
 800658e:	6033      	str	r3, [r6, #0]
 8006590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006594:	4607      	mov	r7, r0
 8006596:	460c      	mov	r4, r1
 8006598:	b10a      	cbz	r2, 800659e <_printf_common+0x26>
 800659a:	3301      	adds	r3, #1
 800659c:	6033      	str	r3, [r6, #0]
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	0699      	lsls	r1, r3, #26
 80065a2:	bf42      	ittt	mi
 80065a4:	6833      	ldrmi	r3, [r6, #0]
 80065a6:	3302      	addmi	r3, #2
 80065a8:	6033      	strmi	r3, [r6, #0]
 80065aa:	6825      	ldr	r5, [r4, #0]
 80065ac:	f015 0506 	ands.w	r5, r5, #6
 80065b0:	d106      	bne.n	80065c0 <_printf_common+0x48>
 80065b2:	f104 0a19 	add.w	sl, r4, #25
 80065b6:	68e3      	ldr	r3, [r4, #12]
 80065b8:	6832      	ldr	r2, [r6, #0]
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	42ab      	cmp	r3, r5
 80065be:	dc26      	bgt.n	800660e <_printf_common+0x96>
 80065c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065c4:	1e13      	subs	r3, r2, #0
 80065c6:	6822      	ldr	r2, [r4, #0]
 80065c8:	bf18      	it	ne
 80065ca:	2301      	movne	r3, #1
 80065cc:	0692      	lsls	r2, r2, #26
 80065ce:	d42b      	bmi.n	8006628 <_printf_common+0xb0>
 80065d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065d4:	4649      	mov	r1, r9
 80065d6:	4638      	mov	r0, r7
 80065d8:	47c0      	blx	r8
 80065da:	3001      	adds	r0, #1
 80065dc:	d01e      	beq.n	800661c <_printf_common+0xa4>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	6922      	ldr	r2, [r4, #16]
 80065e2:	f003 0306 	and.w	r3, r3, #6
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	bf02      	ittt	eq
 80065ea:	68e5      	ldreq	r5, [r4, #12]
 80065ec:	6833      	ldreq	r3, [r6, #0]
 80065ee:	1aed      	subeq	r5, r5, r3
 80065f0:	68a3      	ldr	r3, [r4, #8]
 80065f2:	bf0c      	ite	eq
 80065f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065f8:	2500      	movne	r5, #0
 80065fa:	4293      	cmp	r3, r2
 80065fc:	bfc4      	itt	gt
 80065fe:	1a9b      	subgt	r3, r3, r2
 8006600:	18ed      	addgt	r5, r5, r3
 8006602:	2600      	movs	r6, #0
 8006604:	341a      	adds	r4, #26
 8006606:	42b5      	cmp	r5, r6
 8006608:	d11a      	bne.n	8006640 <_printf_common+0xc8>
 800660a:	2000      	movs	r0, #0
 800660c:	e008      	b.n	8006620 <_printf_common+0xa8>
 800660e:	2301      	movs	r3, #1
 8006610:	4652      	mov	r2, sl
 8006612:	4649      	mov	r1, r9
 8006614:	4638      	mov	r0, r7
 8006616:	47c0      	blx	r8
 8006618:	3001      	adds	r0, #1
 800661a:	d103      	bne.n	8006624 <_printf_common+0xac>
 800661c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006624:	3501      	adds	r5, #1
 8006626:	e7c6      	b.n	80065b6 <_printf_common+0x3e>
 8006628:	18e1      	adds	r1, r4, r3
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	2030      	movs	r0, #48	; 0x30
 800662e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006632:	4422      	add	r2, r4
 8006634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800663c:	3302      	adds	r3, #2
 800663e:	e7c7      	b.n	80065d0 <_printf_common+0x58>
 8006640:	2301      	movs	r3, #1
 8006642:	4622      	mov	r2, r4
 8006644:	4649      	mov	r1, r9
 8006646:	4638      	mov	r0, r7
 8006648:	47c0      	blx	r8
 800664a:	3001      	adds	r0, #1
 800664c:	d0e6      	beq.n	800661c <_printf_common+0xa4>
 800664e:	3601      	adds	r6, #1
 8006650:	e7d9      	b.n	8006606 <_printf_common+0x8e>
	...

08006654 <_printf_i>:
 8006654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006658:	7e0f      	ldrb	r7, [r1, #24]
 800665a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800665c:	2f78      	cmp	r7, #120	; 0x78
 800665e:	4691      	mov	r9, r2
 8006660:	4680      	mov	r8, r0
 8006662:	460c      	mov	r4, r1
 8006664:	469a      	mov	sl, r3
 8006666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800666a:	d807      	bhi.n	800667c <_printf_i+0x28>
 800666c:	2f62      	cmp	r7, #98	; 0x62
 800666e:	d80a      	bhi.n	8006686 <_printf_i+0x32>
 8006670:	2f00      	cmp	r7, #0
 8006672:	f000 80d4 	beq.w	800681e <_printf_i+0x1ca>
 8006676:	2f58      	cmp	r7, #88	; 0x58
 8006678:	f000 80c0 	beq.w	80067fc <_printf_i+0x1a8>
 800667c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006684:	e03a      	b.n	80066fc <_printf_i+0xa8>
 8006686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800668a:	2b15      	cmp	r3, #21
 800668c:	d8f6      	bhi.n	800667c <_printf_i+0x28>
 800668e:	a101      	add	r1, pc, #4	; (adr r1, 8006694 <_printf_i+0x40>)
 8006690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006694:	080066ed 	.word	0x080066ed
 8006698:	08006701 	.word	0x08006701
 800669c:	0800667d 	.word	0x0800667d
 80066a0:	0800667d 	.word	0x0800667d
 80066a4:	0800667d 	.word	0x0800667d
 80066a8:	0800667d 	.word	0x0800667d
 80066ac:	08006701 	.word	0x08006701
 80066b0:	0800667d 	.word	0x0800667d
 80066b4:	0800667d 	.word	0x0800667d
 80066b8:	0800667d 	.word	0x0800667d
 80066bc:	0800667d 	.word	0x0800667d
 80066c0:	08006805 	.word	0x08006805
 80066c4:	0800672d 	.word	0x0800672d
 80066c8:	080067bf 	.word	0x080067bf
 80066cc:	0800667d 	.word	0x0800667d
 80066d0:	0800667d 	.word	0x0800667d
 80066d4:	08006827 	.word	0x08006827
 80066d8:	0800667d 	.word	0x0800667d
 80066dc:	0800672d 	.word	0x0800672d
 80066e0:	0800667d 	.word	0x0800667d
 80066e4:	0800667d 	.word	0x0800667d
 80066e8:	080067c7 	.word	0x080067c7
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	1d1a      	adds	r2, r3, #4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	602a      	str	r2, [r5, #0]
 80066f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066fc:	2301      	movs	r3, #1
 80066fe:	e09f      	b.n	8006840 <_printf_i+0x1ec>
 8006700:	6820      	ldr	r0, [r4, #0]
 8006702:	682b      	ldr	r3, [r5, #0]
 8006704:	0607      	lsls	r7, r0, #24
 8006706:	f103 0104 	add.w	r1, r3, #4
 800670a:	6029      	str	r1, [r5, #0]
 800670c:	d501      	bpl.n	8006712 <_printf_i+0xbe>
 800670e:	681e      	ldr	r6, [r3, #0]
 8006710:	e003      	b.n	800671a <_printf_i+0xc6>
 8006712:	0646      	lsls	r6, r0, #25
 8006714:	d5fb      	bpl.n	800670e <_printf_i+0xba>
 8006716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800671a:	2e00      	cmp	r6, #0
 800671c:	da03      	bge.n	8006726 <_printf_i+0xd2>
 800671e:	232d      	movs	r3, #45	; 0x2d
 8006720:	4276      	negs	r6, r6
 8006722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006726:	485a      	ldr	r0, [pc, #360]	; (8006890 <_printf_i+0x23c>)
 8006728:	230a      	movs	r3, #10
 800672a:	e012      	b.n	8006752 <_printf_i+0xfe>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	6820      	ldr	r0, [r4, #0]
 8006730:	1d19      	adds	r1, r3, #4
 8006732:	6029      	str	r1, [r5, #0]
 8006734:	0605      	lsls	r5, r0, #24
 8006736:	d501      	bpl.n	800673c <_printf_i+0xe8>
 8006738:	681e      	ldr	r6, [r3, #0]
 800673a:	e002      	b.n	8006742 <_printf_i+0xee>
 800673c:	0641      	lsls	r1, r0, #25
 800673e:	d5fb      	bpl.n	8006738 <_printf_i+0xe4>
 8006740:	881e      	ldrh	r6, [r3, #0]
 8006742:	4853      	ldr	r0, [pc, #332]	; (8006890 <_printf_i+0x23c>)
 8006744:	2f6f      	cmp	r7, #111	; 0x6f
 8006746:	bf0c      	ite	eq
 8006748:	2308      	moveq	r3, #8
 800674a:	230a      	movne	r3, #10
 800674c:	2100      	movs	r1, #0
 800674e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006752:	6865      	ldr	r5, [r4, #4]
 8006754:	60a5      	str	r5, [r4, #8]
 8006756:	2d00      	cmp	r5, #0
 8006758:	bfa2      	ittt	ge
 800675a:	6821      	ldrge	r1, [r4, #0]
 800675c:	f021 0104 	bicge.w	r1, r1, #4
 8006760:	6021      	strge	r1, [r4, #0]
 8006762:	b90e      	cbnz	r6, 8006768 <_printf_i+0x114>
 8006764:	2d00      	cmp	r5, #0
 8006766:	d04b      	beq.n	8006800 <_printf_i+0x1ac>
 8006768:	4615      	mov	r5, r2
 800676a:	fbb6 f1f3 	udiv	r1, r6, r3
 800676e:	fb03 6711 	mls	r7, r3, r1, r6
 8006772:	5dc7      	ldrb	r7, [r0, r7]
 8006774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006778:	4637      	mov	r7, r6
 800677a:	42bb      	cmp	r3, r7
 800677c:	460e      	mov	r6, r1
 800677e:	d9f4      	bls.n	800676a <_printf_i+0x116>
 8006780:	2b08      	cmp	r3, #8
 8006782:	d10b      	bne.n	800679c <_printf_i+0x148>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	07de      	lsls	r6, r3, #31
 8006788:	d508      	bpl.n	800679c <_printf_i+0x148>
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	6861      	ldr	r1, [r4, #4]
 800678e:	4299      	cmp	r1, r3
 8006790:	bfde      	ittt	le
 8006792:	2330      	movle	r3, #48	; 0x30
 8006794:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006798:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800679c:	1b52      	subs	r2, r2, r5
 800679e:	6122      	str	r2, [r4, #16]
 80067a0:	f8cd a000 	str.w	sl, [sp]
 80067a4:	464b      	mov	r3, r9
 80067a6:	aa03      	add	r2, sp, #12
 80067a8:	4621      	mov	r1, r4
 80067aa:	4640      	mov	r0, r8
 80067ac:	f7ff fee4 	bl	8006578 <_printf_common>
 80067b0:	3001      	adds	r0, #1
 80067b2:	d14a      	bne.n	800684a <_printf_i+0x1f6>
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067b8:	b004      	add	sp, #16
 80067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	f043 0320 	orr.w	r3, r3, #32
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	4833      	ldr	r0, [pc, #204]	; (8006894 <_printf_i+0x240>)
 80067c8:	2778      	movs	r7, #120	; 0x78
 80067ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	6829      	ldr	r1, [r5, #0]
 80067d2:	061f      	lsls	r7, r3, #24
 80067d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80067d8:	d402      	bmi.n	80067e0 <_printf_i+0x18c>
 80067da:	065f      	lsls	r7, r3, #25
 80067dc:	bf48      	it	mi
 80067de:	b2b6      	uxthmi	r6, r6
 80067e0:	07df      	lsls	r7, r3, #31
 80067e2:	bf48      	it	mi
 80067e4:	f043 0320 	orrmi.w	r3, r3, #32
 80067e8:	6029      	str	r1, [r5, #0]
 80067ea:	bf48      	it	mi
 80067ec:	6023      	strmi	r3, [r4, #0]
 80067ee:	b91e      	cbnz	r6, 80067f8 <_printf_i+0x1a4>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	f023 0320 	bic.w	r3, r3, #32
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	2310      	movs	r3, #16
 80067fa:	e7a7      	b.n	800674c <_printf_i+0xf8>
 80067fc:	4824      	ldr	r0, [pc, #144]	; (8006890 <_printf_i+0x23c>)
 80067fe:	e7e4      	b.n	80067ca <_printf_i+0x176>
 8006800:	4615      	mov	r5, r2
 8006802:	e7bd      	b.n	8006780 <_printf_i+0x12c>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	6826      	ldr	r6, [r4, #0]
 8006808:	6961      	ldr	r1, [r4, #20]
 800680a:	1d18      	adds	r0, r3, #4
 800680c:	6028      	str	r0, [r5, #0]
 800680e:	0635      	lsls	r5, r6, #24
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	d501      	bpl.n	8006818 <_printf_i+0x1c4>
 8006814:	6019      	str	r1, [r3, #0]
 8006816:	e002      	b.n	800681e <_printf_i+0x1ca>
 8006818:	0670      	lsls	r0, r6, #25
 800681a:	d5fb      	bpl.n	8006814 <_printf_i+0x1c0>
 800681c:	8019      	strh	r1, [r3, #0]
 800681e:	2300      	movs	r3, #0
 8006820:	6123      	str	r3, [r4, #16]
 8006822:	4615      	mov	r5, r2
 8006824:	e7bc      	b.n	80067a0 <_printf_i+0x14c>
 8006826:	682b      	ldr	r3, [r5, #0]
 8006828:	1d1a      	adds	r2, r3, #4
 800682a:	602a      	str	r2, [r5, #0]
 800682c:	681d      	ldr	r5, [r3, #0]
 800682e:	6862      	ldr	r2, [r4, #4]
 8006830:	2100      	movs	r1, #0
 8006832:	4628      	mov	r0, r5
 8006834:	f7f9 fcd4 	bl	80001e0 <memchr>
 8006838:	b108      	cbz	r0, 800683e <_printf_i+0x1ea>
 800683a:	1b40      	subs	r0, r0, r5
 800683c:	6060      	str	r0, [r4, #4]
 800683e:	6863      	ldr	r3, [r4, #4]
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	2300      	movs	r3, #0
 8006844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006848:	e7aa      	b.n	80067a0 <_printf_i+0x14c>
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	462a      	mov	r2, r5
 800684e:	4649      	mov	r1, r9
 8006850:	4640      	mov	r0, r8
 8006852:	47d0      	blx	sl
 8006854:	3001      	adds	r0, #1
 8006856:	d0ad      	beq.n	80067b4 <_printf_i+0x160>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	079b      	lsls	r3, r3, #30
 800685c:	d413      	bmi.n	8006886 <_printf_i+0x232>
 800685e:	68e0      	ldr	r0, [r4, #12]
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	4298      	cmp	r0, r3
 8006864:	bfb8      	it	lt
 8006866:	4618      	movlt	r0, r3
 8006868:	e7a6      	b.n	80067b8 <_printf_i+0x164>
 800686a:	2301      	movs	r3, #1
 800686c:	4632      	mov	r2, r6
 800686e:	4649      	mov	r1, r9
 8006870:	4640      	mov	r0, r8
 8006872:	47d0      	blx	sl
 8006874:	3001      	adds	r0, #1
 8006876:	d09d      	beq.n	80067b4 <_printf_i+0x160>
 8006878:	3501      	adds	r5, #1
 800687a:	68e3      	ldr	r3, [r4, #12]
 800687c:	9903      	ldr	r1, [sp, #12]
 800687e:	1a5b      	subs	r3, r3, r1
 8006880:	42ab      	cmp	r3, r5
 8006882:	dcf2      	bgt.n	800686a <_printf_i+0x216>
 8006884:	e7eb      	b.n	800685e <_printf_i+0x20a>
 8006886:	2500      	movs	r5, #0
 8006888:	f104 0619 	add.w	r6, r4, #25
 800688c:	e7f5      	b.n	800687a <_printf_i+0x226>
 800688e:	bf00      	nop
 8006890:	08006f29 	.word	0x08006f29
 8006894:	08006f3a 	.word	0x08006f3a

08006898 <__sflush_r>:
 8006898:	898a      	ldrh	r2, [r1, #12]
 800689a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800689e:	4605      	mov	r5, r0
 80068a0:	0710      	lsls	r0, r2, #28
 80068a2:	460c      	mov	r4, r1
 80068a4:	d458      	bmi.n	8006958 <__sflush_r+0xc0>
 80068a6:	684b      	ldr	r3, [r1, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	dc05      	bgt.n	80068b8 <__sflush_r+0x20>
 80068ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	dc02      	bgt.n	80068b8 <__sflush_r+0x20>
 80068b2:	2000      	movs	r0, #0
 80068b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	d0f9      	beq.n	80068b2 <__sflush_r+0x1a>
 80068be:	2300      	movs	r3, #0
 80068c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068c4:	682f      	ldr	r7, [r5, #0]
 80068c6:	6a21      	ldr	r1, [r4, #32]
 80068c8:	602b      	str	r3, [r5, #0]
 80068ca:	d032      	beq.n	8006932 <__sflush_r+0x9a>
 80068cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	075a      	lsls	r2, r3, #29
 80068d2:	d505      	bpl.n	80068e0 <__sflush_r+0x48>
 80068d4:	6863      	ldr	r3, [r4, #4]
 80068d6:	1ac0      	subs	r0, r0, r3
 80068d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068da:	b10b      	cbz	r3, 80068e0 <__sflush_r+0x48>
 80068dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068de:	1ac0      	subs	r0, r0, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	4602      	mov	r2, r0
 80068e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068e6:	6a21      	ldr	r1, [r4, #32]
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b0      	blx	r6
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	d106      	bne.n	8006900 <__sflush_r+0x68>
 80068f2:	6829      	ldr	r1, [r5, #0]
 80068f4:	291d      	cmp	r1, #29
 80068f6:	d82b      	bhi.n	8006950 <__sflush_r+0xb8>
 80068f8:	4a29      	ldr	r2, [pc, #164]	; (80069a0 <__sflush_r+0x108>)
 80068fa:	410a      	asrs	r2, r1
 80068fc:	07d6      	lsls	r6, r2, #31
 80068fe:	d427      	bmi.n	8006950 <__sflush_r+0xb8>
 8006900:	2200      	movs	r2, #0
 8006902:	6062      	str	r2, [r4, #4]
 8006904:	04d9      	lsls	r1, r3, #19
 8006906:	6922      	ldr	r2, [r4, #16]
 8006908:	6022      	str	r2, [r4, #0]
 800690a:	d504      	bpl.n	8006916 <__sflush_r+0x7e>
 800690c:	1c42      	adds	r2, r0, #1
 800690e:	d101      	bne.n	8006914 <__sflush_r+0x7c>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b903      	cbnz	r3, 8006916 <__sflush_r+0x7e>
 8006914:	6560      	str	r0, [r4, #84]	; 0x54
 8006916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006918:	602f      	str	r7, [r5, #0]
 800691a:	2900      	cmp	r1, #0
 800691c:	d0c9      	beq.n	80068b2 <__sflush_r+0x1a>
 800691e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006922:	4299      	cmp	r1, r3
 8006924:	d002      	beq.n	800692c <__sflush_r+0x94>
 8006926:	4628      	mov	r0, r5
 8006928:	f7ff fbe2 	bl	80060f0 <_free_r>
 800692c:	2000      	movs	r0, #0
 800692e:	6360      	str	r0, [r4, #52]	; 0x34
 8006930:	e7c0      	b.n	80068b4 <__sflush_r+0x1c>
 8006932:	2301      	movs	r3, #1
 8006934:	4628      	mov	r0, r5
 8006936:	47b0      	blx	r6
 8006938:	1c41      	adds	r1, r0, #1
 800693a:	d1c8      	bne.n	80068ce <__sflush_r+0x36>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0c5      	beq.n	80068ce <__sflush_r+0x36>
 8006942:	2b1d      	cmp	r3, #29
 8006944:	d001      	beq.n	800694a <__sflush_r+0xb2>
 8006946:	2b16      	cmp	r3, #22
 8006948:	d101      	bne.n	800694e <__sflush_r+0xb6>
 800694a:	602f      	str	r7, [r5, #0]
 800694c:	e7b1      	b.n	80068b2 <__sflush_r+0x1a>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	e7ad      	b.n	80068b4 <__sflush_r+0x1c>
 8006958:	690f      	ldr	r7, [r1, #16]
 800695a:	2f00      	cmp	r7, #0
 800695c:	d0a9      	beq.n	80068b2 <__sflush_r+0x1a>
 800695e:	0793      	lsls	r3, r2, #30
 8006960:	680e      	ldr	r6, [r1, #0]
 8006962:	bf08      	it	eq
 8006964:	694b      	ldreq	r3, [r1, #20]
 8006966:	600f      	str	r7, [r1, #0]
 8006968:	bf18      	it	ne
 800696a:	2300      	movne	r3, #0
 800696c:	eba6 0807 	sub.w	r8, r6, r7
 8006970:	608b      	str	r3, [r1, #8]
 8006972:	f1b8 0f00 	cmp.w	r8, #0
 8006976:	dd9c      	ble.n	80068b2 <__sflush_r+0x1a>
 8006978:	6a21      	ldr	r1, [r4, #32]
 800697a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800697c:	4643      	mov	r3, r8
 800697e:	463a      	mov	r2, r7
 8006980:	4628      	mov	r0, r5
 8006982:	47b0      	blx	r6
 8006984:	2800      	cmp	r0, #0
 8006986:	dc06      	bgt.n	8006996 <__sflush_r+0xfe>
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006994:	e78e      	b.n	80068b4 <__sflush_r+0x1c>
 8006996:	4407      	add	r7, r0
 8006998:	eba8 0800 	sub.w	r8, r8, r0
 800699c:	e7e9      	b.n	8006972 <__sflush_r+0xda>
 800699e:	bf00      	nop
 80069a0:	dfbffffe 	.word	0xdfbffffe

080069a4 <_fflush_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	690b      	ldr	r3, [r1, #16]
 80069a8:	4605      	mov	r5, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	b913      	cbnz	r3, 80069b4 <_fflush_r+0x10>
 80069ae:	2500      	movs	r5, #0
 80069b0:	4628      	mov	r0, r5
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	b118      	cbz	r0, 80069be <_fflush_r+0x1a>
 80069b6:	6a03      	ldr	r3, [r0, #32]
 80069b8:	b90b      	cbnz	r3, 80069be <_fflush_r+0x1a>
 80069ba:	f7ff f8eb 	bl	8005b94 <__sinit>
 80069be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f3      	beq.n	80069ae <_fflush_r+0xa>
 80069c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069c8:	07d0      	lsls	r0, r2, #31
 80069ca:	d404      	bmi.n	80069d6 <_fflush_r+0x32>
 80069cc:	0599      	lsls	r1, r3, #22
 80069ce:	d402      	bmi.n	80069d6 <_fflush_r+0x32>
 80069d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069d2:	f7ff fb8a 	bl	80060ea <__retarget_lock_acquire_recursive>
 80069d6:	4628      	mov	r0, r5
 80069d8:	4621      	mov	r1, r4
 80069da:	f7ff ff5d 	bl	8006898 <__sflush_r>
 80069de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069e0:	07da      	lsls	r2, r3, #31
 80069e2:	4605      	mov	r5, r0
 80069e4:	d4e4      	bmi.n	80069b0 <_fflush_r+0xc>
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	059b      	lsls	r3, r3, #22
 80069ea:	d4e1      	bmi.n	80069b0 <_fflush_r+0xc>
 80069ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ee:	f7ff fb7d 	bl	80060ec <__retarget_lock_release_recursive>
 80069f2:	e7dd      	b.n	80069b0 <_fflush_r+0xc>

080069f4 <__swhatbuf_r>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	460c      	mov	r4, r1
 80069f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fc:	2900      	cmp	r1, #0
 80069fe:	b096      	sub	sp, #88	; 0x58
 8006a00:	4615      	mov	r5, r2
 8006a02:	461e      	mov	r6, r3
 8006a04:	da0d      	bge.n	8006a22 <__swhatbuf_r+0x2e>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a0c:	f04f 0100 	mov.w	r1, #0
 8006a10:	bf0c      	ite	eq
 8006a12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a16:	2340      	movne	r3, #64	; 0x40
 8006a18:	2000      	movs	r0, #0
 8006a1a:	6031      	str	r1, [r6, #0]
 8006a1c:	602b      	str	r3, [r5, #0]
 8006a1e:	b016      	add	sp, #88	; 0x58
 8006a20:	bd70      	pop	{r4, r5, r6, pc}
 8006a22:	466a      	mov	r2, sp
 8006a24:	f000 f848 	bl	8006ab8 <_fstat_r>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	dbec      	blt.n	8006a06 <__swhatbuf_r+0x12>
 8006a2c:	9901      	ldr	r1, [sp, #4]
 8006a2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006a36:	4259      	negs	r1, r3
 8006a38:	4159      	adcs	r1, r3
 8006a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a3e:	e7eb      	b.n	8006a18 <__swhatbuf_r+0x24>

08006a40 <__smakebuf_r>:
 8006a40:	898b      	ldrh	r3, [r1, #12]
 8006a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a44:	079d      	lsls	r5, r3, #30
 8006a46:	4606      	mov	r6, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	d507      	bpl.n	8006a5c <__smakebuf_r+0x1c>
 8006a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	2301      	movs	r3, #1
 8006a56:	6163      	str	r3, [r4, #20]
 8006a58:	b002      	add	sp, #8
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	ab01      	add	r3, sp, #4
 8006a5e:	466a      	mov	r2, sp
 8006a60:	f7ff ffc8 	bl	80069f4 <__swhatbuf_r>
 8006a64:	9900      	ldr	r1, [sp, #0]
 8006a66:	4605      	mov	r5, r0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f7ff fbb5 	bl	80061d8 <_malloc_r>
 8006a6e:	b948      	cbnz	r0, 8006a84 <__smakebuf_r+0x44>
 8006a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a74:	059a      	lsls	r2, r3, #22
 8006a76:	d4ef      	bmi.n	8006a58 <__smakebuf_r+0x18>
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	e7e3      	b.n	8006a4c <__smakebuf_r+0xc>
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	6020      	str	r0, [r4, #0]
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	6163      	str	r3, [r4, #20]
 8006a92:	9b01      	ldr	r3, [sp, #4]
 8006a94:	6120      	str	r0, [r4, #16]
 8006a96:	b15b      	cbz	r3, 8006ab0 <__smakebuf_r+0x70>
 8006a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 f81d 	bl	8006adc <_isatty_r>
 8006aa2:	b128      	cbz	r0, 8006ab0 <__smakebuf_r+0x70>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	431d      	orrs	r5, r3
 8006ab4:	81a5      	strh	r5, [r4, #12]
 8006ab6:	e7cf      	b.n	8006a58 <__smakebuf_r+0x18>

08006ab8 <_fstat_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4d07      	ldr	r5, [pc, #28]	; (8006ad8 <_fstat_r+0x20>)
 8006abc:	2300      	movs	r3, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	602b      	str	r3, [r5, #0]
 8006ac6:	f7f9 fff2 	bl	8000aae <_fstat>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	d102      	bne.n	8006ad4 <_fstat_r+0x1c>
 8006ace:	682b      	ldr	r3, [r5, #0]
 8006ad0:	b103      	cbz	r3, 8006ad4 <_fstat_r+0x1c>
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	bd38      	pop	{r3, r4, r5, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000330 	.word	0x20000330

08006adc <_isatty_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d06      	ldr	r5, [pc, #24]	; (8006af8 <_isatty_r+0x1c>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	602b      	str	r3, [r5, #0]
 8006ae8:	f7f9 fff1 	bl	8000ace <_isatty>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_isatty_r+0x1a>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_isatty_r+0x1a>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20000330 	.word	0x20000330

08006afc <_sbrk_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d06      	ldr	r5, [pc, #24]	; (8006b18 <_sbrk_r+0x1c>)
 8006b00:	2300      	movs	r3, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	602b      	str	r3, [r5, #0]
 8006b08:	f7f9 fffa 	bl	8000b00 <_sbrk>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_sbrk_r+0x1a>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_sbrk_r+0x1a>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	20000330 	.word	0x20000330

08006b1c <_init>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr

08006b28 <_fini>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	bf00      	nop
 8006b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2e:	bc08      	pop	{r3}
 8006b30:	469e      	mov	lr, r3
 8006b32:	4770      	bx	lr
